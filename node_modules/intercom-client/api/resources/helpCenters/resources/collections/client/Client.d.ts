/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Intercom from "../../../../../index";
export declare namespace Collections {
    interface Options {
        environment?: core.Supplier<environments.IntercomEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Intercom-Version header */
        version?: "1.0" | "1.1" | "1.2" | "1.3" | "1.4" | "2.0" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "2.6" | "2.7" | "2.8" | "2.9" | "2.10" | "2.11" | "Unstable";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
        /** Override the Intercom-Version header */
        version?: "1.0" | "1.1" | "1.2" | "1.3" | "1.4" | "2.0" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "2.6" | "2.7" | "2.8" | "2.9" | "2.10" | "2.11" | "Unstable";
    }
}
export declare class Collections {
    protected readonly _options: Collections.Options;
    constructor(_options?: Collections.Options);
    /**
     * You can fetch a list of all collections by making a GET request to `https://api.intercom.io/help_center/collections`.
     *
     * Collections will be returned in descending order on the `updated_at` attribute. This means if you need to iterate through results then we'll show the most recently updated collections first.
     *
     * @param {Intercom.helpCenters.ListCollectionsRequest} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.helpCenters.collections.list()
     */
    list(request?: Intercom.helpCenters.ListCollectionsRequest, requestOptions?: Collections.RequestOptions): Promise<core.Page<Intercom.Collection>>;
    /**
     * You can create a new collection by making a POST request to `https://api.intercom.io/help_center/collections.`
     *
     * @param {Intercom.helpCenters.CreateCollectionRequest} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.BadRequestError}
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.helpCenters.collections.create({
     *         name: "Thanks for everything"
     *     })
     *
     * @example
     *     await client.helpCenters.collections.create({
     *         name: "collection 51",
     *         description: "Missing required parameter"
     *     })
     */
    create(request: Intercom.helpCenters.CreateCollectionRequest, requestOptions?: Collections.RequestOptions): Promise<Intercom.Collection>;
    /**
     * You can fetch the details of a single collection by making a GET request to `https://api.intercom.io/help_center/collections/<id>`.
     *
     * @param {Intercom.helpCenters.FindCollectionRequest} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.helpCenters.collections.find({
     *         collection_id: "123"
     *     })
     */
    find(request: Intercom.helpCenters.FindCollectionRequest, requestOptions?: Collections.RequestOptions): Promise<Intercom.Collection>;
    /**
     * You can update the details of a single collection by making a PUT request to `https://api.intercom.io/collections/<id>`.
     *
     * @param {Intercom.helpCenters.UpdateCollectionRequest} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.helpCenters.collections.update({
     *         collection_id: "123",
     *         name: "Update collection name"
     *     })
     */
    update(request: Intercom.helpCenters.UpdateCollectionRequest, requestOptions?: Collections.RequestOptions): Promise<Intercom.Collection>;
    /**
     * You can delete a single collection by making a DELETE request to `https://api.intercom.io/collections/<id>`.
     *
     * @param {Intercom.helpCenters.DeleteCollectionRequest} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.helpCenters.collections.delete({
     *         collection_id: "123"
     *     })
     */
    delete(request: Intercom.helpCenters.DeleteCollectionRequest, requestOptions?: Collections.RequestOptions): Promise<Intercom.DeletedCollectionObject>;
    protected _getAuthorizationHeader(): Promise<string>;
}
