/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Intercom from "../../../index";
/**
 * A subscription type lets customers easily opt out of non-essential communications without missing what's important to them.
 */
export interface SubscriptionType {
    /** The type of the object - subscription */
    type: string;
    /** The unique identifier representing the subscription type. */
    id: string;
    /** The state of the subscription type. */
    state: SubscriptionType.State;
    default_translation: Intercom.Translation;
    /** An array of translations objects with the localised version of the subscription type in each available locale within your translation settings. */
    translations: Intercom.Translation[];
    /** Describes the type of consent. */
    consent_type: SubscriptionType.ConsentType;
    /** The message types that this subscription supports - can contain `email` or `sms_message`. */
    content_types: SubscriptionType.ContentTypes.Item[];
}
export declare namespace SubscriptionType {
    /**
     * The state of the subscription type.
     */
    type State = "live" | "draft" | "archived";
    const State: {
        readonly Live: "live";
        readonly Draft: "draft";
        readonly Archived: "archived";
    };
    /**
     * Describes the type of consent.
     */
    type ConsentType = "opt_out" | "opt_in";
    const ConsentType: {
        readonly OptOut: "opt_out";
        readonly OptIn: "opt_in";
    };
    type ContentTypes = ContentTypes.Item[];
    namespace ContentTypes {
        type Item = "email" | "sms_message";
        const Item: {
            readonly Email: "email";
            readonly SmsMessage: "sms_message";
        };
    }
}
