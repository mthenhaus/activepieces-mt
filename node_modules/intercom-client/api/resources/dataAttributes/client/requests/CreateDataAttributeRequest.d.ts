/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * @example
 *     {
 *         name: "Mithril Shirt",
 *         model: "company",
 *         data_type: "string"
 *     }
 *
 * @example
 *     {
 *         name: "The One Ring",
 *         model: "contact",
 *         data_type: "integer"
 *     }
 *
 * @example
 *     {
 *         name: "!nv@l!d n@me",
 *         model: "company",
 *         data_type: "string"
 *     }
 *
 * @example
 *     {
 *         name: "The One Ring",
 *         model: "company",
 *         data_type: "string"
 *     }
 *
 * @example
 *     {
 *         name: "The Second Ring",
 *         model: "company",
 *         data_type: "string"
 *     }
 *
 * @example
 *     {
 *         name: "My Data Attribute",
 *         model: "contact",
 *         data_type: "string",
 *         description: "Just a plain old ring",
 *         options: ["options"]
 *     }
 */
export interface CreateDataAttributeRequest {
    /** The name of the data attribute. */
    name: string;
    /** The model that the data attribute belongs to. */
    model: CreateDataAttributeRequest.Model;
    /** The type of data stored for this attribute. */
    data_type: CreateDataAttributeRequest.DataType;
    /** The readable description you see in the UI for the attribute. */
    description?: string;
    /** To create list attributes. Provide a set of hashes with `value` as the key of the options you want to make. `data_type` must be `string`. */
    options?: string[];
    /** Can this attribute be updated by the Messenger */
    messenger_writable?: boolean;
}
export declare namespace CreateDataAttributeRequest {
    /**
     * The model that the data attribute belongs to.
     */
    type Model = "contact" | "company";
    const Model: {
        readonly Contact: "contact";
        readonly Company: "company";
    };
    /**
     * The type of data stored for this attribute.
     */
    type DataType = "string" | "integer" | "float" | "boolean" | "datetime" | "date";
    const DataType: {
        readonly String: "string";
        readonly Integer: "integer";
        readonly Float: "float";
        readonly Boolean: "boolean";
        readonly Datetime: "datetime";
        readonly Date: "date";
    };
}
