/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Intercom from "../../../index";
import { Attributes } from "../resources/attributes/client/Client";
export declare namespace TicketTypes {
    interface Options {
        environment?: core.Supplier<environments.IntercomEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Intercom-Version header */
        version?: "1.0" | "1.1" | "1.2" | "1.3" | "1.4" | "2.0" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "2.6" | "2.7" | "2.8" | "2.9" | "2.10" | "2.11" | "Unstable";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
        /** Override the Intercom-Version header */
        version?: "1.0" | "1.1" | "1.2" | "1.3" | "1.4" | "2.0" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "2.6" | "2.7" | "2.8" | "2.9" | "2.10" | "2.11" | "Unstable";
    }
}
/**
 * Everything about your ticket types
 */
export declare class TicketTypes {
    protected readonly _options: TicketTypes.Options;
    protected _attributes: Attributes | undefined;
    constructor(_options?: TicketTypes.Options);
    get attributes(): Attributes;
    /**
     * You can get a list of all ticket types for a workspace.
     *
     * @param {TicketTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.ticketTypes.list()
     */
    list(requestOptions?: TicketTypes.RequestOptions): Promise<Intercom.TicketTypeList>;
    /**
     * You can create a new ticket type.
     * > ðŸ“˜ Creating ticket types.
     * >
     * > Every ticket type will be created with two default attributes: _default_title_ and _default_description_.
     * > For the `icon` propery, use an emoji from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
     *
     * @param {Intercom.CreateTicketTypeRequest} request
     * @param {TicketTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.ticketTypes.create({
     *         name: "Customer Issue",
     *         description: "Customer Report Template",
     *         category: "Customer",
     *         icon: "\uD83C\uDF9F\uFE0F"
     *     })
     */
    create(request: Intercom.CreateTicketTypeRequest, requestOptions?: TicketTypes.RequestOptions): Promise<Intercom.TicketType>;
    /**
     * You can fetch the details of a single ticket type.
     *
     * @param {Intercom.FindTicketTypeRequest} request
     * @param {TicketTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.ticketTypes.get({
     *         ticket_type_id: "ticket_type_id"
     *     })
     */
    get(request: Intercom.FindTicketTypeRequest, requestOptions?: TicketTypes.RequestOptions): Promise<Intercom.TicketType>;
    /**
     *
     * You can update a ticket type.
     *
     * > ðŸ“˜ Updating a ticket type.
     * >
     * > For the `icon` propery, use an emoji from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
     *
     * @param {Intercom.UpdateTicketTypeRequest} request
     * @param {TicketTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.ticketTypes.update({
     *         ticket_type_id: "ticket_type_id",
     *         name: "Bug Report 2"
     *     })
     */
    update(request: Intercom.UpdateTicketTypeRequest, requestOptions?: TicketTypes.RequestOptions): Promise<Intercom.TicketType>;
    protected _getAuthorizationHeader(): Promise<string>;
}
