/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Intercom from "../../../../../index";
export declare namespace Attributes {
    interface Options {
        environment?: core.Supplier<environments.IntercomEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Intercom-Version header */
        version?: "1.0" | "1.1" | "1.2" | "1.3" | "1.4" | "2.0" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "2.6" | "2.7" | "2.8" | "2.9" | "2.10" | "2.11" | "Unstable";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
        /** Override the Intercom-Version header */
        version?: "1.0" | "1.1" | "1.2" | "1.3" | "1.4" | "2.0" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "2.6" | "2.7" | "2.8" | "2.9" | "2.10" | "2.11" | "Unstable";
    }
}
export declare class Attributes {
    protected readonly _options: Attributes.Options;
    constructor(_options?: Attributes.Options);
    /**
     * You can create a new attribute for a ticket type.
     *
     * @param {Intercom.ticketTypes.CreateTicketTypeAttributeRequest} request
     * @param {Attributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.ticketTypes.attributes.create({
     *         ticket_type_id: "ticket_type_id",
     *         name: "Attribute Title",
     *         description: "Attribute Description",
     *         data_type: "string",
     *         required_to_create: false
     *     })
     */
    create(request: Intercom.ticketTypes.CreateTicketTypeAttributeRequest, requestOptions?: Attributes.RequestOptions): Promise<Intercom.TicketTypeAttribute>;
    /**
     * You can update an existing attribute for a ticket type.
     *
     * @param {Intercom.ticketTypes.UpdateTicketTypeAttributeRequest} request
     * @param {Attributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.ticketTypes.attributes.update({
     *         ticket_type_id: "ticket_type_id",
     *         attribute_id: "attribute_id",
     *         description: "New Attribute Description"
     *     })
     */
    update(request: Intercom.ticketTypes.UpdateTicketTypeAttributeRequest, requestOptions?: Attributes.RequestOptions): Promise<Intercom.TicketTypeAttribute>;
    protected _getAuthorizationHeader(): Promise<string>;
}
