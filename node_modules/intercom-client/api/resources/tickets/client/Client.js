"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tickets = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const Intercom = __importStar(require("../../../index"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors/index"));
/**
 * Everything about your tickets
 */
class Tickets {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * You can reply to a ticket with a message from an admin or on behalf of a contact, or with a note for admins.
     *
     * @param {Intercom.ReplyToTicketRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.BadRequestError}
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.tickets.reply({
     *         ticket_id: "123",
     *         body: {
     *             message_type: "comment",
     *             type: "user",
     *             body: "Thanks again :)",
     *             intercom_user_id: "667d619d8a68186f43bafe82"
     *         }
     *     })
     *
     * @example
     *     await client.tickets.reply({
     *         ticket_id: "123",
     *         body: {
     *             message_type: "note",
     *             type: "admin",
     *             body: "<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>  <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>   </body> </html>",
     *             admin_id: "3156780"
     *         }
     *     })
     *
     * @example
     *     await client.tickets.reply({
     *         ticket_id: "123",
     *         body: {
     *             message_type: "quick_reply",
     *             type: "admin",
     *             admin_id: "3156780",
     *             reply_options: [{
     *                     text: "Yes",
     *                     uuid: "22d6d1f4-1a19-41d0-94c2-e54031f78aca"
     *                 }, {
     *                     text: "No",
     *                     uuid: "fbc3dbe0-ec0c-4fb6-826d-e19127191906"
     *                 }]
     *         }
     *     })
     *
     * @example
     *     await client.tickets.reply({
     *         ticket_id: "123",
     *         body: {
     *             message_type: "comment",
     *             type: "user",
     *             body: "Thanks again :)",
     *             intercom_user_id: "667d61a68a68186f43bafe85"
     *         }
     *     })
     */
    reply(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { ticket_id: ticketId, body: _body } = request;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `tickets/${encodeURIComponent(ticketId)}/reply`),
                method: "POST",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Intercom.BadRequestError(_response.error.body);
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /tickets/{ticket_id}/reply.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can create a new ticket.
     *
     * @param {Intercom.CreateTicketRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.tickets.create({
     *         ticket_type_id: "1234",
     *         contacts: [{
     *                 id: "667d61b78a68186f43bafe8d"
     *             }],
     *         ticket_attributes: {
     *             "_default_title_": "example",
     *             "_default_description_": "there is a problem"
     *         }
     *     })
     */
    create(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, "tickets"),
                method: "POST",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /tickets.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can fetch the details of a single ticket.
     *
     * @param {Intercom.FindTicketRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.tickets.get({
     *         ticket_id: "ticket_id"
     *     })
     */
    get(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { ticket_id: ticketId } = request;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `tickets/${encodeURIComponent(ticketId)}`),
                method: "GET",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling GET /tickets/{ticket_id}.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can update a ticket.
     *
     * @param {Intercom.UpdateTicketRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.tickets.update({
     *         ticket_id: "ticket_id",
     *         ticket_attributes: {
     *             "_default_title_": "example",
     *             "_default_description_": "there is a problem"
     *         },
     *         state: "in_progress",
     *         open: true,
     *         snoozed_until: 1673609604,
     *         assignment: {
     *             admin_id: "991267883",
     *             assignee_id: "991267885"
     *         }
     *     })
     *
     * @example
     *     await client.tickets.update({
     *         ticket_id: "ticket_id",
     *         ticket_attributes: {
     *             "_default_title_": "example",
     *             "_default_description_": "there is a problem"
     *         },
     *         state: "in_progress",
     *         assignment: {
     *             admin_id: "123",
     *             assignee_id: "991267893"
     *         }
     *     })
     *
     * @example
     *     await client.tickets.update({
     *         ticket_id: "ticket_id",
     *         ticket_attributes: {
     *             "_default_title_": "example",
     *             "_default_description_": "there is a problem"
     *         },
     *         state: "in_progress",
     *         assignment: {
     *             admin_id: "991267899",
     *             assignee_id: "456"
     *         }
     *     })
     */
    update(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { ticket_id: ticketId } = request, _body = __rest(request, ["ticket_id"]);
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `tickets/${encodeURIComponent(ticketId)}`),
                method: "PUT",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling PUT /tickets/{ticket_id}.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can search for multiple tickets by the value of their attributes in order to fetch exactly which ones you want.
     *
     * To search for tickets, you send a `POST` request to `https://api.intercom.io/tickets/search`.
     *
     * This will accept a query object in the body which will define your filters.
     * {% admonition type="warning" name="Optimizing search queries" %}
     *   Search queries can be complex, so optimizing them can help the performance of your search.
     *   Use the `AND` and `OR` operators to combine multiple filters to get the exact results you need and utilize
     *   pagination to limit the number of results returned. The default is `20` results per page.
     *   See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#example-search-conversations-request) for more details on how to use the `starting_after` param.
     * {% /admonition %}
     *
     * ### Nesting & Limitations
     *
     * You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
     * There are some limitations to the amount of multiples there can be:
     * - There's a limit of max 2 nested filters
     * - There's a limit of max 15 filters for each AND or OR group
     *
     * ### Accepted Fields
     *
     * Most keys listed as part of the Ticket model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foobar"`).
     *
     * | Field                                     | Type                                                                                     |
     * | :---------------------------------------- | :--------------------------------------------------------------------------------------- |
     * | id                                        | String                                                                                   |
     * | created_at                                | Date (UNIX timestamp)                                                                    |
     * | updated_at                                | Date (UNIX timestamp)                                                                    |
     * | _default_title_                           | String                                                                                   |
     * | _default_description_                     | String                                                                                   |
     * | category                                  | String                                                                                   |
     * | ticket_type_id                            | String                                                                                   |
     * | contact_ids                               | String                                                                                   |
     * | teammate_ids                              | String                                                                                   |
     * | admin_assignee_id                         | String                                                                                   |
     * | team_assignee_id                          | String                                                                                   |
     * | open                                      | Boolean                                                                                  |
     * | state                                     | String                                                                                   |
     * | snoozed_until                             | Date (UNIX timestamp)                                                                    |
     * | ticket_attribute.{id}                     | String or Boolean or Date (UNIX timestamp) or Float or Integer                           |
     *
     * ### Accepted Operators
     *
     * {% admonition type="info" name="Searching based on `created_at`" %}
     *   You may use the `<=` or `>=` operators to search by `created_at`.
     * {% /admonition %}
     *
     * The table below shows the operators you can use to define how you want to search for the value.  The operator should be put in as a string (`"="`). The operator has to be compatible with the field's type  (eg. you cannot search with `>` for a given string value as it's only compatible for integer's and dates).
     *
     * | Operator | Valid Types                    | Description                                                  |
     * | :------- | :----------------------------- | :----------------------------------------------------------- |
     * | =        | All                            | Equals                                                       |
     * | !=       | All                            | Doesn't Equal                                                |
     * | IN       | All                            | In  Shortcut for `OR` queries  Values most be in Array       |
     * | NIN      | All                            | Not In  Shortcut for `OR !` queries  Values must be in Array |
     * | >        | Integer  Date (UNIX Timestamp) | Greater (or equal) than                                      |
     * | <       | Integer  Date (UNIX Timestamp) | Lower (or equal) than                                        |
     * | ~        | String                         | Contains                                                     |
     * | !~       | String                         | Doesn't Contain                                              |
     * | ^        | String                         | Starts With                                                  |
     * | $        | String                         | Ends With                                                    |
     *
     * @param {Intercom.SearchRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tickets.search({
     *         query: {
     *             operator: "AND",
     *             value: [{
     *                     field: "created_at",
     *                     operator: ">",
     *                     value: "1306054154"
     *                 }]
     *         },
     *         pagination: {
     *             per_page: 5
     *         }
     *     })
     */
    search(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const list = (request) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d, _e;
                const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                    url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, "tickets/search"),
                    method: "POST",
                    headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                    contentType: "application/json",
                    requestType: "json",
                    body: request,
                    timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                    abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                });
                if (_response.ok) {
                    return _response.body;
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /tickets/search.");
                    case "unknown":
                        throw new errors.IntercomError({
                            message: _response.error.errorMessage,
                        });
                }
            });
            return new core.Pageable({
                response: yield list(request),
                hasNextPage: (response) => { var _a, _b; return ((_b = (_a = response === null || response === void 0 ? void 0 : response.pages) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.starting_after) != null; },
                getItems: (response) => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.tickets) !== null && _a !== void 0 ? _a : []; },
                loadPage: (response) => {
                    var _a, _b;
                    return list(core.setObjectProperty(request, "pagination.starting_after", (_b = (_a = response === null || response === void 0 ? void 0 : response.pages) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.starting_after));
                },
            });
        });
    }
    _getAuthorizationHeader() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = (_a = (yield core.Supplier.get(this._options.token))) !== null && _a !== void 0 ? _a : process === null || process === void 0 ? void 0 : process.env["INTERCOM_API_KEY"];
            if (bearer == null) {
                throw new errors.IntercomError({
                    message: "Please specify INTERCOM_API_KEY when instantiating the client.",
                });
            }
            return `Bearer ${bearer}`;
        });
    }
}
exports.Tickets = Tickets;
