"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Conversations = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const Intercom = __importStar(require("../../../index"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors/index"));
/**
 * Everything about your Conversations
 */
class Conversations {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * You can fetch a list of all conversations.
     *
     * You can optionally request the result page size and the cursor to start after to fetch the result.
     * {% admonition type="warning" name="Pagination" %}
     *   You can use pagination to limit the number of results returned. The default is `20` results per page.
     *   See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#pagination-for-list-apis) for more details on how to use the `starting_after` param.
     * {% /admonition %}
     *
     * @param {Intercom.ListConversationsRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.ForbiddenError}
     *
     * @example
     *     await client.conversations.list()
     */
    list(request = {}, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const list = (request) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d, _e;
                const { per_page: perPage, starting_after: startingAfter } = request;
                const _queryParams = {};
                if (perPage != null) {
                    _queryParams["per_page"] = perPage.toString();
                }
                if (startingAfter != null) {
                    _queryParams["starting_after"] = startingAfter;
                }
                const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                    url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, "conversations"),
                    method: "GET",
                    headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                    abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                });
                if (_response.ok) {
                    return _response.body;
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new Intercom.UnauthorizedError(_response.error.body);
                        case 403:
                            throw new Intercom.ForbiddenError(_response.error.body);
                        default:
                            throw new errors.IntercomError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.IntercomTimeoutError("Timeout exceeded when calling GET /conversations.");
                    case "unknown":
                        throw new errors.IntercomError({
                            message: _response.error.errorMessage,
                        });
                }
            });
            return new core.Pageable({
                response: yield list(request),
                hasNextPage: (response) => { var _a, _b; return ((_b = (_a = response === null || response === void 0 ? void 0 : response.pages) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.starting_after) != null; },
                getItems: (response) => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.conversations) !== null && _a !== void 0 ? _a : []; },
                loadPage: (response) => {
                    var _a, _b;
                    return list(core.setObjectProperty(request, "starting_after", (_b = (_a = response === null || response === void 0 ? void 0 : response.pages) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.starting_after));
                },
            });
        });
    }
    /**
     * You can create a conversation that has been initiated by a contact (ie. user or lead).
     * The conversation can be an in-app message only.
     *
     * {% admonition type="info" name="Sending for visitors" %}
     * You can also send a message from a visitor by specifying their `user_id` or `id` value in the `from` field, along with a `type` field value of `contact`.
     * This visitor will be automatically converted to a contact with a lead role once the conversation is created.
     * {% /admonition %}
     *
     * This will return the Message model that has been created.
     *
     *
     * @param {Intercom.CreateConversationRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.ForbiddenError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.conversations.create({
     *         from: {
     *             type: "user",
     *             id: "667d60d18a68186f43bafddd"
     *         },
     *         body: "Hello there"
     *     })
     *
     * @example
     *     await client.conversations.create({
     *         from: {
     *             type: "user",
     *             id: "123_doesnt_exist"
     *         },
     *         body: "Hello there"
     *     })
     */
    create(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, "conversations"),
                method: "POST",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 403:
                        throw new Intercom.ForbiddenError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /conversations.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     *
     * You can fetch the details of a single conversation.
     *
     * This will return a single Conversation model with all its conversation parts.
     *
     * {% admonition type="warning" name="Hard limit of 500 parts" %}
     * The maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts.
     * {% /admonition %}
     *
     * For AI agent conversation metadata, please note that you need to have the agent enabled in your workspace, which is a [paid feature](https://www.intercom.com/help/en/articles/8205718-fin-resolutions#h_97f8c2e671).
     *
     * @param {Intercom.FindConversationRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.ForbiddenError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.conversations.find({
     *         conversation_id: "123",
     *         display_as: "plaintext"
     *     })
     */
    find(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { conversation_id: conversationId, display_as: displayAs } = request;
            const _queryParams = {};
            if (displayAs != null) {
                _queryParams["display_as"] = displayAs;
            }
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `conversations/${encodeURIComponent(conversationId)}`),
                method: "GET",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 403:
                        throw new Intercom.ForbiddenError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling GET /conversations/{conversation_id}.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     *
     * You can update an existing conversation.
     *
     * {% admonition type="info" name="Replying and other actions" %}
     * If you want to reply to a coveration or take an action such as assign, unassign, open, close or snooze, take a look at the reply and manage endpoints.
     * {% /admonition %}
     *
     *
     * @param {Intercom.UpdateConversationRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.ForbiddenError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.conversations.update({
     *         conversation_id: "123",
     *         display_as: "plaintext",
     *         read: true,
     *         custom_attributes: {
     *             "issue_type": "Billing",
     *             "priority": "High"
     *         }
     *     })
     */
    update(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { conversation_id: conversationId, display_as: displayAs } = request, _body = __rest(request, ["conversation_id", "display_as"]);
            const _queryParams = {};
            if (displayAs != null) {
                _queryParams["display_as"] = displayAs;
            }
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `conversations/${encodeURIComponent(conversationId)}`),
                method: "PUT",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 403:
                        throw new Intercom.ForbiddenError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling PUT /conversations/{conversation_id}.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.
     *
     * To search for conversations, you need to send a `POST` request to `https://api.intercom.io/conversations/search`.
     *
     * This will accept a query object in the body which will define your filters in order to search for conversations.
     * {% admonition type="warning" name="Optimizing search queries" %}
     *   Search queries can be complex, so optimizing them can help the performance of your search.
     *   Use the `AND` and `OR` operators to combine multiple filters to get the exact results you need and utilize
     *   pagination to limit the number of results returned. The default is `20` results per page and maximum is `150`.
     *   See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#example-search-conversations-request) for more details on how to use the `starting_after` param.
     * {% /admonition %}
     *
     * ### Nesting & Limitations
     *
     * You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
     * There are some limitations to the amount of multiple's there can be:
     * - There's a limit of max 2 nested filters
     * - There's a limit of max 15 filters for each AND or OR group
     *
     * ### Accepted Fields
     *
     * Most keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foorbar"`).
     * The `source.body` field is unique as the search will not be performed against the entire value, but instead against every element of the value separately. For example, when searching for a conversation with a `"I need support"` body - the query should contain a `=` operator with the value `"support"` for such conversation to be returned. A query with a `=` operator and a `"need support"` value will not yield a result.
     *
     * | Field                                     | Type                                                                                                                                                   |
     * | :---------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | id                                        | String                                                                                                                                                 |
     * | created_at                                | Date (UNIX timestamp)                                                                                                                                  |
     * | updated_at                                | Date (UNIX timestamp)                                                                                                                                  |
     * | source.type                               | String<br>Accepted fields are `conversation`, `email`, `facebook`, `instagram`, `phone_call`, `phone_switch`, `push`, `sms`, `twitter` and `whatsapp`. |
     * | source.id                                 | String                                                                                                                                                 |
     * | source.delivered_as                       | String                                                                                                                                                 |
     * | source.subject                            | String                                                                                                                                                 |
     * | source.body                               | String                                                                                                                                                 |
     * | source.author.id                          | String                                                                                                                                                 |
     * | source.author.type                        | String                                                                                                                                                 |
     * | source.author.name                        | String                                                                                                                                                 |
     * | source.author.email                       | String                                                                                                                                                 |
     * | source.url                                | String                                                                                                                                                 |
     * | contact_ids                               | String                                                                                                                                                 |
     * | teammate_ids                              | String                                                                                                                                                 |
     * | admin_assignee_id                         | String                                                                                                                                                 |
     * | team_assignee_id                          | String                                                                                                                                                 |
     * | channel_initiated                         | String                                                                                                                                                 |
     * | open                                      | Boolean                                                                                                                                                |
     * | read                                      | Boolean                                                                                                                                                |
     * | state                                     | String                                                                                                                                                 |
     * | waiting_since                             | Date (UNIX timestamp)                                                                                                                                  |
     * | snoozed_until                             | Date (UNIX timestamp)                                                                                                                                  |
     * | tag_ids                                   | String                                                                                                                                                 |
     * | priority                                  | String                                                                                                                                                 |
     * | statistics.time_to_assignment             | Integer                                                                                                                                                |
     * | statistics.time_to_admin_reply            | Integer                                                                                                                                                |
     * | statistics.time_to_first_close            | Integer                                                                                                                                                |
     * | statistics.time_to_last_close             | Integer                                                                                                                                                |
     * | statistics.median_time_to_reply           | Integer                                                                                                                                                |
     * | statistics.first_contact_reply_at         | Date (UNIX timestamp)                                                                                                                                  |
     * | statistics.first_assignment_at            | Date (UNIX timestamp)                                                                                                                                  |
     * | statistics.first_admin_reply_at           | Date (UNIX timestamp)                                                                                                                                  |
     * | statistics.first_close_at                 | Date (UNIX timestamp)                                                                                                                                  |
     * | statistics.last_assignment_at             | Date (UNIX timestamp)                                                                                                                                  |
     * | statistics.last_assignment_admin_reply_at | Date (UNIX timestamp)                                                                                                                                  |
     * | statistics.last_contact_reply_at          | Date (UNIX timestamp)                                                                                                                                  |
     * | statistics.last_admin_reply_at            | Date (UNIX timestamp)                                                                                                                                  |
     * | statistics.last_close_at                  | Date (UNIX timestamp)                                                                                                                                  |
     * | statistics.last_closed_by_id              | String                                                                                                                                                 |
     * | statistics.count_reopens                  | Integer                                                                                                                                                |
     * | statistics.count_assignments              | Integer                                                                                                                                                |
     * | statistics.count_conversation_parts       | Integer                                                                                                                                                |
     * | conversation_rating.requested_at          | Date (UNIX timestamp)                                                                                                                                  |
     * | conversation_rating.replied_at            | Date (UNIX timestamp)                                                                                                                                  |
     * | conversation_rating.score                 | Integer                                                                                                                                                |
     * | conversation_rating.remark                | String                                                                                                                                                 |
     * | conversation_rating.contact_id            | String                                                                                                                                                 |
     * | conversation_rating.admin_d               | String                                                                                                                                                 |
     * | ai_agent_participated                     | Boolean                                                                                                                                                |
     * | ai_agent.resolution_state                 | String                                                                                                                                                 |
     * | ai_agent.last_answer_type                 | String                                                                                                                                                 |
     * | ai_agent.rating                           | Integer                                                                                                                                                |
     * | ai_agent.rating_remark                    | String                                                                                                                                                 |
     * | ai_agent.source_type                      | String                                                                                                                                                 |
     * | ai_agent.source_title                     | String                                                                                                                                                 |
     *
     * ### Accepted Operators
     *
     * The table below shows the operators you can use to define how you want to search for the value.  The operator should be put in as a string (`"="`). The operator has to be compatible with the field's type  (eg. you cannot search with `>` for a given string value as it's only compatible for integer's and dates).
     *
     * | Operator | Valid Types                    | Description                                                  |
     * | :------- | :----------------------------- | :----------------------------------------------------------- |
     * | =        | All                            | Equals                                                       |
     * | !=       | All                            | Doesn't Equal                                                |
     * | IN       | All                            | In  Shortcut for `OR` queries  Values most be in Array       |
     * | NIN      | All                            | Not In  Shortcut for `OR !` queries  Values must be in Array |
     * | >        | Integer  Date (UNIX Timestamp) | Greater (or equal) than                                      |
     * | <       | Integer  Date (UNIX Timestamp) | Lower (or equal) than                                        |
     * | ~        | String                         | Contains                                                     |
     * | !~       | String                         | Doesn't Contain                                              |
     * | ^        | String                         | Starts With                                                  |
     * | $        | String                         | Ends With                                                    |
     *
     * @param {Intercom.SearchRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.conversations.search({
     *         query: {
     *             operator: "AND",
     *             value: [{
     *                     field: "created_at",
     *                     operator: ">",
     *                     value: "1306054154"
     *                 }]
     *         },
     *         pagination: {
     *             per_page: 5
     *         }
     *     })
     */
    search(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const list = (request) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d, _e;
                const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                    url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, "conversations/search"),
                    method: "POST",
                    headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                    contentType: "application/json",
                    requestType: "json",
                    body: request,
                    timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                    abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                });
                if (_response.ok) {
                    return _response.body;
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /conversations/search.");
                    case "unknown":
                        throw new errors.IntercomError({
                            message: _response.error.errorMessage,
                        });
                }
            });
            return new core.Pageable({
                response: yield list(request),
                hasNextPage: (response) => { var _a, _b; return ((_b = (_a = response === null || response === void 0 ? void 0 : response.pages) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.starting_after) != null; },
                getItems: (response) => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.conversations) !== null && _a !== void 0 ? _a : []; },
                loadPage: (response) => {
                    var _a, _b;
                    return list(core.setObjectProperty(request, "pagination.starting_after", (_b = (_a = response === null || response === void 0 ? void 0 : response.pages) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.starting_after));
                },
            });
        });
    }
    /**
     * You can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins.
     *
     * @param {Intercom.ReplyToConversationRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.ForbiddenError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.conversations.reply({
     *         conversation_id: "123 or \"last\"",
     *         body: {
     *             message_type: "comment",
     *             type: "user",
     *             body: "Thanks again :)",
     *             intercom_user_id: "667d60f18a68186f43bafdf4"
     *         }
     *     })
     *
     * @example
     *     await client.conversations.reply({
     *         conversation_id: "123 or \"last\"",
     *         body: {
     *             message_type: "note",
     *             type: "admin",
     *             body: "<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>  <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>   </body> </html>",
     *             admin_id: "3156780"
     *         }
     *     })
     *
     * @example
     *     await client.conversations.reply({
     *         conversation_id: "123 or \"last\"",
     *         body: {
     *             message_type: "comment",
     *             type: "user",
     *             body: "Thanks again :)",
     *             intercom_user_id: "667d60f78a68186f43bafdf7"
     *         }
     *     })
     *
     * @example
     *     await client.conversations.reply({
     *         conversation_id: "123 or \"last\"",
     *         body: {
     *             message_type: "comment",
     *             type: "user",
     *             body: "Thanks again :)",
     *             intercom_user_id: "667d60f98a68186f43bafdf8"
     *         }
     *     })
     */
    reply(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { conversation_id: conversationId, body: _body } = request;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `conversations/${encodeURIComponent(conversationId)}/reply`),
                method: "POST",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 403:
                        throw new Intercom.ForbiddenError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /conversations/{conversation_id}/reply.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * For managing conversations you can:
     * - Close a conversation
     * - Snooze a conversation to reopen on a future date
     * - Open a conversation which is `snoozed` or `closed`
     * - Assign a conversation to an admin and/or team.
     *
     * @param {Intercom.ManageConversationPartsRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.ForbiddenError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.conversations.manage({
     *         conversation_id: "123",
     *         body: {
     *             message_type: "assignment",
     *             type: "admin",
     *             admin_id: "12345",
     *             assignee_id: "4324241",
     *             body: "Goodbye :)"
     *         }
     *     })
     *
     * @example
     *     await client.conversations.manage({
     *         conversation_id: "123",
     *         body: {
     *             message_type: "assignment",
     *             type: "admin",
     *             admin_id: "12345",
     *             assignee_id: "4324241",
     *             body: "Let me pass you over to one of my colleagues."
     *         }
     *     })
     */
    manage(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { conversation_id: conversationId, body: _body } = request;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `conversations/${encodeURIComponent(conversationId)}/parts`),
                method: "POST",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 403:
                        throw new Intercom.ForbiddenError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /conversations/{conversation_id}/parts.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can let a conversation be automatically assigned following assignment rules.
     * {% admonition type="attention" name="When using workflows" %}
     * It is not possible to use this endpoint with Workflows.
     * {% /admonition %}
     *
     * @param {Intercom.AutoAssignConversationRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.ForbiddenError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.conversations.runAssignmentRules({
     *         conversation_id: "123"
     *     })
     */
    runAssignmentRules(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { conversation_id: conversationId } = request;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `conversations/${encodeURIComponent(conversationId)}/run_assignment_rules`),
                method: "POST",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 403:
                        throw new Intercom.ForbiddenError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /conversations/{conversation_id}/run_assignment_rules.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.
     *
     * {% admonition type="attention" name="Contacts without an email" %}
     * If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.
     * {% /admonition %}
     *
     *
     * @param {Intercom.AttachContactToConversationRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.ForbiddenError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.conversations.attachContactAsAdmin({
     *         conversation_id: "123",
     *         admin_id: "12345",
     *         customer: {
     *             intercom_user_id: "667d61168a68186f43bafe0d"
     *         }
     *     })
     *
     * @example
     *     await client.conversations.attachContactAsAdmin({
     *         conversation_id: "123",
     *         admin_id: "12345",
     *         customer: {
     *             intercom_user_id: "667d61188a68186f43bafe0e"
     *         }
     *     })
     */
    attachContactAsAdmin(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { conversation_id: conversationId } = request, _body = __rest(request, ["conversation_id"]);
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `conversations/${encodeURIComponent(conversationId)}/customers`),
                method: "POST",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 403:
                        throw new Intercom.ForbiddenError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /conversations/{conversation_id}/customers.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.
     *
     * {% admonition type="attention" name="Contacts without an email" %}
     * If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.
     * {% /admonition %}
     *
     *
     * @param {Intercom.DetachContactFromConversationRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.ForbiddenError}
     * @throws {@link Intercom.NotFoundError}
     * @throws {@link Intercom.UnprocessableEntityError}
     *
     * @example
     *     await client.conversations.detachContactAsAdmin({
     *         conversation_id: "123",
     *         contact_id: "123",
     *         admin_id: "5017690"
     *     })
     */
    detachContactAsAdmin(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { conversation_id: conversationId, contact_id: contactId } = request, _body = __rest(request, ["conversation_id", "contact_id"]);
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `conversations/${encodeURIComponent(conversationId)}/customers/${encodeURIComponent(contactId)}`),
                method: "DELETE",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 403:
                        throw new Intercom.ForbiddenError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    case 422:
                        throw new Intercom.UnprocessableEntityError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling DELETE /conversations/{conversation_id}/customers/{contact_id}.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can redact a conversation part or the source message of a conversation (as seen in the source object).
     *
     * {% admonition type="info" name="Redacting parts and messages" %}
     * If you are redacting a conversation part, it must have a `body`. If you are redacting a source message, it must have been created by a contact. We will return a `conversation_part_not_redactable` error if these criteria are not met.
     * {% /admonition %}
     *
     *
     * @param {Intercom.RedactConversationRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     * @throws {@link Intercom.NotFoundError}
     *
     * @example
     *     await client.conversations.redactConversationPart({
     *         type: "conversation_part",
     *         conversation_id: "19894788788",
     *         conversation_part_id: "19381789428"
     *     })
     *
     * @example
     *     await client.conversations.redactConversationPart({
     *         type: "conversation_part",
     *         conversation_id: "really_123_doesnt_exist",
     *         conversation_part_id: "really_123_doesnt_exist"
     *     })
     */
    redactConversationPart(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, "conversations/redact"),
                method: "POST",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new Intercom.UnauthorizedError(_response.error.body);
                    case 404:
                        throw new Intercom.NotFoundError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /conversations/redact.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * You can convert a conversation to a ticket.
     *
     * @param {Intercom.ConvertConversationToTicketRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.BadRequestError}
     *
     * @example
     *     await client.conversations.convertToTicket({
     *         conversation_id: "123",
     *         ticket_type_id: "79"
     *     })
     *
     * @example
     *     await client.conversations.convertToTicket({
     *         conversation_id: "123",
     *         ticket_type_id: "80"
     *     })
     */
    convertToTicket(request, requestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { conversation_id: conversationId } = request, _body = __rest(request, ["conversation_id"]);
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.IntercomEnvironment.UsProduction, `conversations/${encodeURIComponent(conversationId)}/convert`),
                method: "POST",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "intercom-client", "X-Fern-SDK-Version": "6.0.0", "User-Agent": "intercom-client/6.0.0", "Intercom-Version": (_e = (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : (_d = this._options) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : "2.11", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Intercom.BadRequestError(_response.error.body);
                    default:
                        throw new errors.IntercomError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /conversations/{conversation_id}/convert.");
                case "unknown":
                    throw new errors.IntercomError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = (_a = (yield core.Supplier.get(this._options.token))) !== null && _a !== void 0 ? _a : process === null || process === void 0 ? void 0 : process.env["INTERCOM_API_KEY"];
            if (bearer == null) {
                throw new errors.IntercomError({
                    message: "Please specify INTERCOM_API_KEY when instantiating the client.",
                });
            }
            return `Bearer ${bearer}`;
        });
    }
}
exports.Conversations = Conversations;
