/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Intercom from "../../../../../index";
export declare namespace Feeds {
    interface Options {
        environment?: core.Supplier<environments.IntercomEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Intercom-Version header */
        version?: "1.0" | "1.1" | "1.2" | "1.3" | "1.4" | "2.0" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "2.6" | "2.7" | "2.8" | "2.9" | "2.10" | "2.11" | "Unstable";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
        /** Override the Intercom-Version header */
        version?: "1.0" | "1.1" | "1.2" | "1.3" | "1.4" | "2.0" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "2.6" | "2.7" | "2.8" | "2.9" | "2.10" | "2.11" | "Unstable";
    }
}
export declare class Feeds {
    protected readonly _options: Feeds.Options;
    constructor(_options?: Feeds.Options);
    /**
     * You can fetch a list of all news items that are live on a given newsfeed
     *
     * @param {Intercom.news.ListNewsFeedItemsRequest} request
     * @param {Feeds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.news.feeds.listItems({
     *         newsfeed_id: "123"
     *     })
     */
    listItems(request: Intercom.news.ListNewsFeedItemsRequest, requestOptions?: Feeds.RequestOptions): Promise<Intercom.PaginatedNewsItemResponse>;
    /**
     * You can fetch a list of all newsfeeds
     *
     * @param {Feeds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.news.feeds.list()
     */
    list(requestOptions?: Feeds.RequestOptions): Promise<Intercom.PaginatedNewsfeedResponse>;
    /**
     * You can fetch the details of a single newsfeed
     *
     * @param {Intercom.news.FindNewsFeedRequest} request
     * @param {Feeds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.UnauthorizedError}
     *
     * @example
     *     await client.news.feeds.find({
     *         newsfeed_id: "123"
     *     })
     */
    find(request: Intercom.news.FindNewsFeedRequest, requestOptions?: Feeds.RequestOptions): Promise<Intercom.Newsfeed>;
    protected _getAuthorizationHeader(): Promise<string>;
}
