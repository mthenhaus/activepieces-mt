"use strict";Object.defineProperty(exports, "__esModule", {value: true});





var _chunkSV46MOJDjs = require('./chunk-SV46MOJD.js');



var _chunkBUKFPQGEjs = require('./chunk-BUKFPQGE.js');



var _chunkAIY3EMBZjs = require('./chunk-AIY3EMBZ.js');



var _chunkTOXDKCM7js = require('./chunk-TOXDKCM7.js');


var _chunk2ZCYWED7js = require('./chunk-2ZCYWED7.js');


var _chunkJ7MIGZHMjs = require('./chunk-J7MIGZHM.js');

// src/encoding.ts
var UnsupportedEncodingError = class extends Error {
  constructor(encoding) {
    super(`Encoding [${encoding}] not supported`);
  }
};
function decode(encoding, src) {
  switch (encoding.toLowerCase()) {
    case _chunkJ7MIGZHMjs.EncodingTypes.Base58:
      return _chunkTOXDKCM7js.decodeBase58.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.Hex:
      return _chunkSV46MOJDjs.decodeHex.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.Hex0xPrefix:
      return _chunkSV46MOJDjs.decodeHexZeroX.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.Utf8:
      return _chunkBUKFPQGEjs.decodeUtf8.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.Base32:
      return _chunkAIY3EMBZjs.decodeBase32.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.HexAny:
      return _chunkSV46MOJDjs.decodeHexAny.call(void 0, src);
    default:
      throw new UnsupportedEncodingError(encoding);
  }
}
function encode(encoding, src) {
  switch (encoding.toLowerCase()) {
    case _chunkJ7MIGZHMjs.EncodingTypes.Base58:
      return _chunkTOXDKCM7js.encodeBase58.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.Hex:
      return _chunkSV46MOJDjs.encodeHex.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.Hex0xPrefix:
      return _chunkSV46MOJDjs.encodeHexZeroX.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.Base64:
      return _chunk2ZCYWED7js.encodeBase64UrlSafe.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.Utf8:
      return _chunkBUKFPQGEjs.encodeUtf8.call(void 0, src);
    case _chunkJ7MIGZHMjs.EncodingTypes.Base32:
      return _chunkAIY3EMBZjs.encodeBase32.call(void 0, src);
    default:
      throw new UnsupportedEncodingError(encoding);
  }
}




exports.decode = decode; exports.encode = encode;
