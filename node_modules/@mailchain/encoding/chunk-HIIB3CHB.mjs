import {
  decodeHex,
  decodeHexAny,
  decodeHexZeroX,
  encodeHex,
  encodeHexZeroX
} from "./chunk-2ZWIOYKP.mjs";
import {
  decodeUtf8,
  encodeUtf8
} from "./chunk-HSTTGBPL.mjs";
import {
  decodeBase32,
  encodeBase32
} from "./chunk-VQTPFEEJ.mjs";
import {
  decodeBase58,
  encodeBase58
} from "./chunk-SSJ5XBYN.mjs";
import {
  encodeBase64UrlSafe
} from "./chunk-IX5UPKFA.mjs";
import {
  EncodingTypes
} from "./chunk-VA3TULOQ.mjs";

// src/encoding.ts
var UnsupportedEncodingError = class extends Error {
  constructor(encoding) {
    super(`Encoding [${encoding}] not supported`);
  }
};
function decode(encoding, src) {
  switch (encoding.toLowerCase()) {
    case EncodingTypes.Base58:
      return decodeBase58(src);
    case EncodingTypes.Hex:
      return decodeHex(src);
    case EncodingTypes.Hex0xPrefix:
      return decodeHexZeroX(src);
    case EncodingTypes.Utf8:
      return decodeUtf8(src);
    case EncodingTypes.Base32:
      return decodeBase32(src);
    case EncodingTypes.HexAny:
      return decodeHexAny(src);
    default:
      throw new UnsupportedEncodingError(encoding);
  }
}
function encode(encoding, src) {
  switch (encoding.toLowerCase()) {
    case EncodingTypes.Base58:
      return encodeBase58(src);
    case EncodingTypes.Hex:
      return encodeHex(src);
    case EncodingTypes.Hex0xPrefix:
      return encodeHexZeroX(src);
    case EncodingTypes.Base64:
      return encodeBase64UrlSafe(src);
    case EncodingTypes.Utf8:
      return encodeUtf8(src);
    case EncodingTypes.Base32:
      return encodeBase32(src);
    default:
      throw new UnsupportedEncodingError(encoding);
  }
}

export {
  decode,
  encode
};
