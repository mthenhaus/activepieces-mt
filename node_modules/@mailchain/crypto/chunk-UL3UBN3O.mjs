import {
  SECP256K1PrivateKey
} from "./chunk-VFHGLQC5.mjs";
import {
  SECP256K1PublicKey
} from "./chunk-ULGLISTA.mjs";
import {
  SECP256R1PrivateKey
} from "./chunk-YQRKWXRH.mjs";
import {
  SECP256R1PublicKey
} from "./chunk-XSRU2W5H.mjs";
import {
  ED25519PrivateKey
} from "./chunk-474QFQJC.mjs";
import {
  ED25519PublicKey
} from "./chunk-5SHWDSQB.mjs";
import {
  IdED25519,
  IdSECP256K1,
  IdSECP256R1
} from "./chunk-6E4UZ7KY.mjs";

// src/multikey/ids.ts
function idFromPublicKey(key) {
  switch (key.constructor) {
    case ED25519PublicKey:
      return IdED25519;
    case SECP256K1PublicKey:
      return IdSECP256K1;
    case SECP256R1PublicKey:
      return IdSECP256R1;
    default:
      throw RangeError("unknown public key type");
  }
}
function idFromPrivateKey(key) {
  switch (key.constructor) {
    case ED25519PrivateKey:
      return IdED25519;
    case SECP256K1PrivateKey:
      return IdSECP256K1;
    case SECP256R1PrivateKey:
      return IdSECP256R1;
    default:
      throw RangeError("unknown private key type");
  }
}
function publicKeyFromId(id, data) {
  switch (id) {
    case IdSECP256K1:
      return new SECP256K1PublicKey(data);
    case IdED25519:
      return new ED25519PublicKey(data);
    case IdSECP256R1:
      return new SECP256R1PublicKey(data);
    default:
      throw RangeError("unknown public key id");
  }
}
function privateKeyFromId(id, data) {
  switch (id) {
    case IdSECP256K1:
      return new SECP256K1PrivateKey(data);
    case IdED25519:
      return ED25519PrivateKey.fromSecretKey(data);
    case IdSECP256R1:
      return new SECP256R1PrivateKey(data);
    default:
      throw RangeError("unknown private key id");
  }
}

export {
  idFromPublicKey,
  idFromPrivateKey,
  publicKeyFromId,
  privateKeyFromId
};
