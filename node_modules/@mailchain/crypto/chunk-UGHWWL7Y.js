"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunkKJIHFHPMjs = require('./chunk-KJIHFHPM.js');


var _chunk22KUFCBVjs = require('./chunk-22KUFCBV.js');



var _chunkVGUHZP7Ujs = require('./chunk-VGUHZP7U.js');



var _chunkHWVQHADCjs = require('./chunk-HWVQHADC.js');





var _chunkBSMIECIGjs = require('./chunk-BSMIECIG.js');

// src/cipher/nacl/serialization.ts
function serializePublicKeyEncryptedContent(sealedBox, pubKey) {
  const out = new Uint8Array(sealedBox.length + pubKey.bytes.length + 2);
  out.set(new Uint8Array([_chunkVGUHZP7Ujs.NACLECDH]), 0);
  out.set(new Uint8Array([_chunkKJIHFHPMjs.idFromPublicKey.call(void 0, pubKey)]), 1);
  out.set(pubKey.bytes, 2);
  out.set(sealedBox, 2 + pubKey.bytes.length);
  return out;
}
function serializePrivateKeyEncryptedContent(sealedBox, keyId) {
  const out = new Uint8Array(sealedBox.length + 2);
  out.set(new Uint8Array([_chunkVGUHZP7Ujs.NACLSK]), 0);
  out.set(new Uint8Array([keyId]), 1);
  out.set(sealedBox, 2);
  return out;
}
function deserializePublicKeyEncryptedContent(input) {
  if (input[0] !== _chunkVGUHZP7Ujs.NACLECDH) {
    throw new Error("can not deserialize NaCl ECDH encrypted content");
  }
  if (input.length < 35) {
    throw new RangeError("cipher is too short");
  }
  const start = 2;
  let pubKeyEnd = 0;
  switch (input[1]) {
    case _chunkBSMIECIGjs.IdSECP256K1:
      pubKeyEnd = start + 33;
      return {
        pubKey: new (0, _chunk22KUFCBVjs.SECP256K1PublicKey)(input.slice(start, pubKeyEnd)),
        encryptedContent: input.slice(pubKeyEnd)
      };
    case _chunkBSMIECIGjs.IdED25519:
      pubKeyEnd = start + _chunkHWVQHADCjs.ED25519PublicKeyLen;
      return {
        pubKey: new (0, _chunkHWVQHADCjs.ED25519PublicKey)(input.slice(start, pubKeyEnd)),
        encryptedContent: input.slice(pubKeyEnd)
      };
    default:
      throw Error("unrecognized pubKeyID");
  }
}
function deserializePrivateKeyEncryptedContent(input) {
  if (input[0] !== _chunkVGUHZP7Ujs.NACLSK) {
    throw new Error("can not deserialize NaCl secret key encrypted content");
  }
  if (input.length < 3) {
    throw new RangeError("cipher is too short");
  }
  if (![_chunkBSMIECIGjs.IdSECP256K1, _chunkBSMIECIGjs.IdSR25519, _chunkBSMIECIGjs.IdED25519, _chunkBSMIECIGjs.IdNonSpecified].includes(input[1])) {
    throw new RangeError("unknown key type");
  }
  return { encryptedContent: input.slice(2), keyId: input[1] };
}






exports.serializePublicKeyEncryptedContent = serializePublicKeyEncryptedContent; exports.serializePrivateKeyEncryptedContent = serializePrivateKeyEncryptedContent; exports.deserializePublicKeyEncryptedContent = deserializePublicKeyEncryptedContent; exports.deserializePrivateKeyEncryptedContent = deserializePrivateKeyEncryptedContent;
