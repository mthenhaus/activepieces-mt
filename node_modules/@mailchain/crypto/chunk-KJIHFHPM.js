"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunk76M6HHBQjs = require('./chunk-76M6HHBQ.js');


var _chunk22KUFCBVjs = require('./chunk-22KUFCBV.js');


var _chunkV2FXIFIXjs = require('./chunk-V2FXIFIX.js');


var _chunkCAC4ESOMjs = require('./chunk-CAC4ESOM.js');


var _chunkFKBKPFXUjs = require('./chunk-FKBKPFXU.js');


var _chunkHWVQHADCjs = require('./chunk-HWVQHADC.js');




var _chunkBSMIECIGjs = require('./chunk-BSMIECIG.js');

// src/multikey/ids.ts
function idFromPublicKey(key) {
  switch (key.constructor) {
    case _chunkHWVQHADCjs.ED25519PublicKey:
      return _chunkBSMIECIGjs.IdED25519;
    case _chunk22KUFCBVjs.SECP256K1PublicKey:
      return _chunkBSMIECIGjs.IdSECP256K1;
    case _chunkCAC4ESOMjs.SECP256R1PublicKey:
      return _chunkBSMIECIGjs.IdSECP256R1;
    default:
      throw RangeError("unknown public key type");
  }
}
function idFromPrivateKey(key) {
  switch (key.constructor) {
    case _chunkFKBKPFXUjs.ED25519PrivateKey:
      return _chunkBSMIECIGjs.IdED25519;
    case _chunk76M6HHBQjs.SECP256K1PrivateKey:
      return _chunkBSMIECIGjs.IdSECP256K1;
    case _chunkV2FXIFIXjs.SECP256R1PrivateKey:
      return _chunkBSMIECIGjs.IdSECP256R1;
    default:
      throw RangeError("unknown private key type");
  }
}
function publicKeyFromId(id, data) {
  switch (id) {
    case _chunkBSMIECIGjs.IdSECP256K1:
      return new (0, _chunk22KUFCBVjs.SECP256K1PublicKey)(data);
    case _chunkBSMIECIGjs.IdED25519:
      return new (0, _chunkHWVQHADCjs.ED25519PublicKey)(data);
    case _chunkBSMIECIGjs.IdSECP256R1:
      return new (0, _chunkCAC4ESOMjs.SECP256R1PublicKey)(data);
    default:
      throw RangeError("unknown public key id");
  }
}
function privateKeyFromId(id, data) {
  switch (id) {
    case _chunkBSMIECIGjs.IdSECP256K1:
      return new (0, _chunk76M6HHBQjs.SECP256K1PrivateKey)(data);
    case _chunkBSMIECIGjs.IdED25519:
      return _chunkFKBKPFXUjs.ED25519PrivateKey.fromSecretKey(data);
    case _chunkBSMIECIGjs.IdSECP256R1:
      return new (0, _chunkV2FXIFIXjs.SECP256R1PrivateKey)(data);
    default:
      throw RangeError("unknown private key id");
  }
}






exports.idFromPublicKey = idFromPublicKey; exports.idFromPrivateKey = idFromPrivateKey; exports.publicKeyFromId = publicKeyFromId; exports.privateKeyFromId = privateKeyFromId;
