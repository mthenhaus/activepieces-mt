import {
  easySeal
} from "./chunk-JWOEA4SY.mjs";
import {
  serializePrivateKeyEncryptedContent
} from "./chunk-LDK7RPVV.mjs";
import {
  idFromPrivateKey
} from "./chunk-UL3UBN3O.mjs";
import {
  SECP256K1PrivateKey
} from "./chunk-VFHGLQC5.mjs";
import {
  ED25519PrivateKey
} from "./chunk-474QFQJC.mjs";
import {
  secureRandom
} from "./chunk-37TN3OTP.mjs";
import {
  __publicField
} from "./chunk-NHABU752.mjs";

// src/cipher/nacl/privateKeyEncrypter.ts
import ed2curve from "ed2curve";
var PrivateKeyEncrypter = class {
  constructor(privateKey, rand = secureRandom) {
    __publicField(this, "_rand");
    __publicField(this, "_secretKey");
    __publicField(this, "_keyId");
    this._rand = rand;
    this._keyId = idFromPrivateKey(privateKey);
    switch (privateKey.constructor) {
      case ED25519PrivateKey:
        this._secretKey = ed2curve.convertSecretKey(privateKey.bytes);
        break;
      case SECP256K1PrivateKey:
        this._secretKey = privateKey.bytes;
        break;
      default:
        throw RangeError("unknown private key type");
    }
  }
  static fromPrivateKey(key, rand = secureRandom) {
    return new this(key, rand);
  }
  async encrypt(input) {
    const sealedBox = easySeal(input, this._secretKey, this._rand);
    return serializePrivateKeyEncryptedContent(sealedBox, this._keyId);
  }
};

export {
  PrivateKeyEncrypter
};
