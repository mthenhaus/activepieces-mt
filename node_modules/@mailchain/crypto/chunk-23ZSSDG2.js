"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }


var _chunkFKBKPFXUjs = require('./chunk-FKBKPFXU.js');


var _chunkEMN3YRZAjs = require('./chunk-EMN3YRZA.js');


var _chunkXXPGZHWZjs = require('./chunk-XXPGZHWZ.js');

// src/cipher/ecdh/ed25519.ts
var _tweetnacl = require('tweetnacl'); var _tweetnacl2 = _interopRequireDefault(_tweetnacl);
var _ed2curve = require('ed2curve'); var _ed2curve2 = _interopRequireDefault(_ed2curve);
var ED25519KeyExchange = class {
  constructor(randomFunc = _chunkEMN3YRZAjs.secureRandom) {
    _chunkXXPGZHWZjs.__publicField.call(void 0, this, "randomFunc");
    this.randomFunc = randomFunc;
  }
  async EphemeralKey() {
    return _chunkFKBKPFXUjs.ED25519PrivateKey.generate(this.randomFunc);
  }
  async SharedSecret(privateKey, publicKey) {
    if (privateKey.publicKey.bytes.toString() === publicKey.bytes.toString()) {
      throw new Error("public key can not be from private key");
    }
    const publicKeyBytes = ED25519KeyExchange.publicKeyToCurve25519(publicKey);
    const privateKeyBytes = ED25519KeyExchange.privateKeyToCurve25519(_chunkFKBKPFXUjs.asED25519PrivateKey.call(void 0, privateKey));
    return _tweetnacl2.default.scalarMult(privateKeyBytes, publicKeyBytes);
  }
  static privateKeyToCurve25519(privateKey) {
    return _ed2curve2.default.convertSecretKey(privateKey.bytes);
  }
  static publicKeyToCurve25519(publicKey) {
    const output = _ed2curve2.default.convertPublicKey(publicKey.bytes);
    if (output === null) {
      throw new Error("invalid public key");
    }
    return output;
  }
};



exports.ED25519KeyExchange = ED25519KeyExchange;
