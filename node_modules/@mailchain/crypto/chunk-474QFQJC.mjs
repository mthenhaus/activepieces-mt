import {
  secureRandom
} from "./chunk-37TN3OTP.mjs";
import {
  ED25519PublicKey
} from "./chunk-5SHWDSQB.mjs";
import {
  KindED25519
} from "./chunk-6E4UZ7KY.mjs";
import {
  toSeed
} from "./chunk-RZGMZRFD.mjs";
import {
  __publicField
} from "./chunk-NHABU752.mjs";

// src/ed25519/private.ts
import nacl from "tweetnacl";
var ED25519PrivateKeyLength = 64;
var ED25519SeedLength = 32;
var ED25519PrivateKey = class {
  constructor(keyPair) {
    __publicField(this, "bytes");
    __publicField(this, "publicKey");
    __publicField(this, "curve", KindED25519);
    __publicField(this, "keyPair");
    this.keyPair = keyPair;
    this.bytes = this.keyPair.secretKey;
    this.publicKey = new ED25519PublicKey(this.keyPair.publicKey);
  }
  static fromSeed(seed) {
    if (seed.length !== ED25519SeedLength) {
      throw Error("seed must be 32 bytes");
    }
    return new this(nacl.sign.keyPair.fromSeed(seed));
  }
  static fromSecretKey(secretKey) {
    if (secretKey.length !== ED25519PrivateKeyLength) {
      throw Error("secret key must be 64 bytes");
    }
    return new this(nacl.sign.keyPair.fromSecretKey(secretKey));
  }
  static fromMnemonicPhrase(mnemonic, password = "") {
    return this.fromSeed(toSeed(mnemonic, password, ED25519SeedLength));
  }
  static generate(rand = secureRandom) {
    return this.fromSeed(rand(ED25519SeedLength));
  }
  async sign(message) {
    return nacl.sign.detached(message, this.keyPair.secretKey);
  }
};
function asED25519PrivateKey(key) {
  if (key.constructor !== ED25519PrivateKey) {
    throw new Error("key must be ed25519");
  }
  return key;
}

export {
  ED25519PrivateKeyLength,
  ED25519SeedLength,
  ED25519PrivateKey,
  asED25519PrivateKey
};
