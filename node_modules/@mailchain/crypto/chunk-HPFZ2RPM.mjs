import {
  fromPublicKey
} from "./chunk-KMCOY7PI.mjs";
import {
  easySeal
} from "./chunk-JWOEA4SY.mjs";
import {
  serializePublicKeyEncryptedContent
} from "./chunk-LDK7RPVV.mjs";
import {
  secureRandom
} from "./chunk-37TN3OTP.mjs";
import {
  __publicField
} from "./chunk-NHABU752.mjs";

// src/cipher/nacl/publicKeyEncrypter.ts
var PublicKeyEncrypter = class {
  constructor(keyEx, pubKey, rand = secureRandom) {
    __publicField(this, "_keyEx");
    __publicField(this, "_pubKey");
    __publicField(this, "_rand");
    this._rand = rand;
    this._keyEx = keyEx;
    this._pubKey = pubKey;
  }
  static FromPublicKey(key) {
    return new this(fromPublicKey(key), key);
  }
  async encrypt(input) {
    const ephemeralPrvKey = await this._keyEx.EphemeralKey();
    const sharedSecret = await this._keyEx.SharedSecret(ephemeralPrvKey, this._pubKey);
    const sealedBox = easySeal(input, sharedSecret, this._rand);
    return serializePublicKeyEncryptedContent(sealedBox, ephemeralPrvKey.publicKey);
  }
};

export {
  PublicKeyEncrypter
};
