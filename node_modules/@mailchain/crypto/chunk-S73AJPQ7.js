"use strict";Object.defineProperty(exports, "__esModule", {value: true});




var _chunkKJIHFHPMjs = require('./chunk-KJIHFHPM.js');

// src/multikey/bytes.ts
function publicKeyToBytes(key) {
  const out = new Uint8Array(key.bytes.length + 1);
  out[0] = _chunkKJIHFHPMjs.idFromPublicKey.call(void 0, key);
  out.set(key.bytes, 1);
  return out;
}
function publicKeyFromBytes(bytes) {
  if (bytes.length < 32 + 1) {
    throw Error("public key is too short to contain ID byte");
  }
  return _chunkKJIHFHPMjs.publicKeyFromId.call(void 0, bytes[0], new Uint8Array(bytes.slice(1)));
}
function privateKeyToBytes(key) {
  const out = new Uint8Array(key.bytes.length + 1);
  out[0] = _chunkKJIHFHPMjs.idFromPrivateKey.call(void 0, key);
  out.set(key.bytes, 1);
  return out;
}
function privateKeyFromBytes(bytes) {
  if (bytes.length < 32 + 1) {
    throw Error("private key is too short to contain ID byte");
  }
  return _chunkKJIHFHPMjs.privateKeyFromId.call(void 0, bytes[0], bytes.slice(1));
}






exports.publicKeyToBytes = publicKeyToBytes; exports.publicKeyFromBytes = publicKeyFromBytes; exports.privateKeyToBytes = privateKeyToBytes; exports.privateKeyFromBytes = privateKeyFromBytes;
