import {
  easyOpen
} from "./chunk-JWOEA4SY.mjs";
import {
  deserializePrivateKeyEncryptedContent
} from "./chunk-LDK7RPVV.mjs";
import {
  idFromPrivateKey
} from "./chunk-UL3UBN3O.mjs";
import {
  SECP256K1PrivateKey
} from "./chunk-VFHGLQC5.mjs";
import {
  ED25519PrivateKey
} from "./chunk-474QFQJC.mjs";
import {
  __publicField
} from "./chunk-NHABU752.mjs";

// src/cipher/nacl/privateKeyDecrypter.ts
import ed2curve from "ed2curve";
var PrivateKeyDecrypter = class {
  constructor(privateKey) {
    __publicField(this, "_secretKey");
    __publicField(this, "_keyId");
    this._keyId = idFromPrivateKey(privateKey);
    switch (privateKey.constructor) {
      case ED25519PrivateKey:
        this._secretKey = ed2curve.convertSecretKey(privateKey.bytes);
        break;
      case SECP256K1PrivateKey:
        this._secretKey = privateKey.bytes;
        break;
      default:
        throw RangeError("unknown private key type");
    }
  }
  static fromPrivateKey(key) {
    return new this(key);
  }
  async decrypt(input) {
    const secretData = deserializePrivateKeyEncryptedContent(input);
    if (this._keyId !== secretData.keyId) {
      throw Error("key id does not match supplied key");
    }
    return easyOpen(secretData.encryptedContent, this._secretKey);
  }
};

export {
  PrivateKeyDecrypter
};
