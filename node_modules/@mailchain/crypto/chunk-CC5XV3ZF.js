"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/cipher/nacl/secretbox.ts
var _tweetnacl = require('tweetnacl'); var _tweetnacl2 = _interopRequireDefault(_tweetnacl);
var nonceSize = 24;
var secretKeySize = 32;
function easySeal(message, secretKey, rand) {
  const messagePrivate = message instanceof Buffer ? new Uint8Array(message) : message;
  if (secretKey.length !== secretKeySize) {
    throw new RangeError("secret key must be 32 bytes");
  }
  const nonce = rand(nonceSize);
  const encrypted = _tweetnacl2.default.secretbox(messagePrivate, nonce, secretKey);
  const out = new Uint8Array(nonceSize + encrypted.length);
  out.set(nonce, 0);
  out.set(new Uint8Array(encrypted), nonceSize);
  return out;
}
function easyOpen(sealedBox, secretKey) {
  const sealedBoxPrivate = sealedBox instanceof Buffer ? new Uint8Array(sealedBox) : sealedBox;
  if (secretKey.length !== secretKeySize) {
    throw new RangeError("secret key must be 32 bytes");
  }
  if (sealedBoxPrivate.length < nonceSize) {
    throw new RangeError("secret box must be longer than nonce");
  }
  const nonce = sealedBoxPrivate.slice(0, nonceSize);
  const seal = sealedBoxPrivate.slice(nonceSize);
  const ret = _tweetnacl2.default.secretbox.open(seal, nonce, secretKey);
  if (ret === null) {
    throw new Error("secretbox: could not decrypt data with private key");
  }
  return ret;
}




exports.easySeal = easySeal; exports.easyOpen = easyOpen;
