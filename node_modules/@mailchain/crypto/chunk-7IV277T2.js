"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkCC5XV3ZFjs = require('./chunk-CC5XV3ZF.js');


var _chunkUGHWWL7Yjs = require('./chunk-UGHWWL7Y.js');


var _chunkKJIHFHPMjs = require('./chunk-KJIHFHPM.js');


var _chunk76M6HHBQjs = require('./chunk-76M6HHBQ.js');


var _chunkFKBKPFXUjs = require('./chunk-FKBKPFXU.js');


var _chunkXXPGZHWZjs = require('./chunk-XXPGZHWZ.js');

// src/cipher/nacl/privateKeyDecrypter.ts
var _ed2curve = require('ed2curve'); var _ed2curve2 = _interopRequireDefault(_ed2curve);
var PrivateKeyDecrypter = class {
  constructor(privateKey) {
    _chunkXXPGZHWZjs.__publicField.call(void 0, this, "_secretKey");
    _chunkXXPGZHWZjs.__publicField.call(void 0, this, "_keyId");
    this._keyId = _chunkKJIHFHPMjs.idFromPrivateKey.call(void 0, privateKey);
    switch (privateKey.constructor) {
      case _chunkFKBKPFXUjs.ED25519PrivateKey:
        this._secretKey = _ed2curve2.default.convertSecretKey(privateKey.bytes);
        break;
      case _chunk76M6HHBQjs.SECP256K1PrivateKey:
        this._secretKey = privateKey.bytes;
        break;
      default:
        throw RangeError("unknown private key type");
    }
  }
  static fromPrivateKey(key) {
    return new this(key);
  }
  async decrypt(input) {
    const secretData = _chunkUGHWWL7Yjs.deserializePrivateKeyEncryptedContent.call(void 0, input);
    if (this._keyId !== secretData.keyId) {
      throw Error("key id does not match supplied key");
    }
    return _chunkCC5XV3ZFjs.easyOpen.call(void 0, secretData.encryptedContent, this._secretKey);
  }
};



exports.PrivateKeyDecrypter = PrivateKeyDecrypter;
