"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunkX4UF3TJQjs = require('./chunk-X4UF3TJQ.js');



var _chunk7ODPDFK4js = require('./chunk-7ODPDFK4.js');


var _chunkLK4I32N2js = require('./chunk-LK4I32N2.js');


var _chunkISNWKD6Kjs = require('./chunk-ISNWKD6K.js');



var _chunkYLOVGC5Gjs = require('./chunk-YLOVGC5G.js');

// src/contentHandler.ts
async function buildMessageAndAttachments(messageParts, attachmentParts, ctx) {
  const builtMessageParts = await buildContentParts(messageParts, false, ctx);
  if (attachmentParts.length === 0) {
    if (typeof builtMessageParts === "string")
      return builtMessageParts;
    return {
      boundaryHeader: _chunkX4UF3TJQjs.contentTypeBoundaryHeader.call(void 0, "alternative", builtMessageParts.boundary),
      content: builtMessageParts.parts
    };
  }
  const builtAttachmentParts = await buildContentParts(attachmentParts, true, ctx);
  const mixedBoundaryLine = `--${builtAttachmentParts.boundary}`;
  let content = mixedBoundaryLine + _chunkYLOVGC5Gjs.CRLF;
  if (typeof builtMessageParts === "string") {
    content += builtMessageParts + _chunkYLOVGC5Gjs.CRLF;
  } else {
    const altHeader = _chunkX4UF3TJQjs.contentTypeBoundaryHeader.call(void 0, "alternative", builtMessageParts.boundary);
    content += await _chunk7ODPDFK4js.exportHeader.call(void 0, altHeader, ctx) + _chunkYLOVGC5Gjs.CRLF + _chunkYLOVGC5Gjs.CRLF;
    content += builtMessageParts.parts + _chunkYLOVGC5Gjs.CRLF;
  }
  content += builtAttachmentParts.parts;
  return { boundaryHeader: _chunkX4UF3TJQjs.contentTypeBoundaryHeader.call(void 0, "mixed", builtAttachmentParts.boundary), content };
}
async function buildContentParts(parts, forceMultipart, ctx) {
  const builtParts = await Promise.all(parts.map((p) => buildContentPart(p, ctx)));
  if (builtParts.length === 1 && !forceMultipart)
    return builtParts[0];
  const boundary = (await ctx.encodeBase64(await ctx.random(9))).toUpperCase();
  const boundaryLine = `--${boundary}`;
  const builtPartsStr = builtParts.reduce((acc, curr, i) => {
    acc += boundaryLine + _chunkYLOVGC5Gjs.CRLF;
    acc += curr + _chunkYLOVGC5Gjs.CRLF;
    if (i === builtParts.length - 1) {
      acc += boundaryLine;
    }
    return acc;
  }, "");
  return {
    boundary,
    parts: builtPartsStr
  };
}
async function buildContentPart({ content, headers }, ctx) {
  let result = await _chunk7ODPDFK4js.buildHeaders.call(void 0, headers.sort(_chunkISNWKD6Kjs.byHeaderOrder), ctx);
  result += _chunkYLOVGC5Gjs.CRLF + _chunkYLOVGC5Gjs.CRLF;
  const encodedContent = typeof content === "string" ? content : await ctx.encodeBase64(Uint8Array.from(content));
  result += _chunkLK4I32N2js.simpleHardFold.call(void 0, encodedContent, { lineLength: _chunkYLOVGC5Gjs.LINE_LENGTH_FOLD, encodingConsideration: "base64" });
  return result;
}





exports.buildMessageAndAttachments = buildMessageAndAttachments; exports.buildContentParts = buildContentParts; exports.buildContentPart = buildContentPart;
