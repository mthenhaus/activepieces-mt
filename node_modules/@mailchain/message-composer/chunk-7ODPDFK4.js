"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }




var _chunkAFNVAIH6js = require('./chunk-AFNVAIH6.js');




var _chunkLK4I32N2js = require('./chunk-LK4I32N2.js');


var _chunkGU522C63js = require('./chunk-GU522C63.js');




var _chunkYLOVGC5Gjs = require('./chunk-YLOVGC5G.js');

// src/headerHandler.ts
var _indexjs = require('date-fns/format/index.js'); var _indexjs2 = _interopRequireDefault(_indexjs);
var _indexjs3 = require('date-fns/locale/en-US/index.js'); var _indexjs4 = _interopRequireDefault(_indexjs3);
async function buildHeaders(headers, ctx) {
  const exportedHeaders = new Array();
  for (const header of headers) {
    const exportedHeader = await exportHeader(header, ctx);
    exportedHeaders.push(exportedHeader);
  }
  return exportedHeaders.join(_chunkYLOVGC5Gjs.CRLF);
}
async function exportHeader(header, ctx) {
  const headerValue = await exportHeaderValue(header, ctx);
  if (header.attrs == null || header.attrs.length === 0)
    return `${header.label}: ${headerValue}`;
  const headerAttrs = await exportHeaderAttributes(header.attrs, ctx);
  return `${header.label}: ${_chunkLK4I32N2js.contentAppendWithFolding.call(void 0, headerValue, headerAttrs, _chunkYLOVGC5Gjs.LINE_LENGTH_FOLD)}`;
}
async function exportHeaderValue(header, ctx) {
  if (_chunkAFNVAIH6js.isStringHeader.call(void 0, header))
    return exportStringHeader(header, ctx);
  if (_chunkAFNVAIH6js.isDateHeader.call(void 0, header))
    return exportDateHeader(header, ctx);
  if (_chunkAFNVAIH6js.isAddressHeader.call(void 0, header))
    return exportAddressHeader(header, ctx);
  if (_chunkAFNVAIH6js.isMessageIdHeader.call(void 0, header))
    return exportMessageIdHeader(header, ctx);
  throw new Error(`cannot export value for header [${header.label}]`);
}
async function exportHeaderAttributes(attrs, ctx) {
  return await Promise.all(
    attrs.map(async ([attrKey, attrValue]) => {
      const value = _chunkGU522C63js.hasOnlyPrintableUsAscii.call(void 0, attrValue) ? attrValue : `=?UTF-8?B?${await ctx.encodeBase64(await ctx.decodeUtf8(attrValue))}?=`;
      if (attrKey != null)
        return `${attrKey}="${value}"`;
      return `"${value}"`;
    })
  );
}
async function exportStringHeader(header, ctx) {
  if (_chunkGU522C63js.hasOnlyPrintableUsAscii.call(void 0, header.value)) {
    return _chunkLK4I32N2js.semanticLineFold.call(void 0, header.value, _chunkYLOVGC5Gjs.LINE_LENGTH_FOLD);
  }
  const utf8Array = await ctx.decodeUtf8(header.value);
  const base64Encoded = await ctx.encodeBase64(utf8Array);
  return _chunkLK4I32N2js.simpleHardFold.call(void 0, base64Encoded, {
    lineLength: _chunkYLOVGC5Gjs.LINE_LENGTH_FOLD,
    prefix: "=?UTF-8?B?",
    suffix: "?=",
    padNewLines: true,
    encodingConsideration: "base64"
  });
}
async function exportDateHeader(header, _ctx) {
  return _indexjs2.default.call(void 0, header.value, "EEE, dd MMM yyyy HH:mm:ss xxxx", { locale: _indexjs4.default });
}
async function exportAddressHeader(header, _ctx) {
  return header.value.map((r) => {
    return _optionalChain([r, 'access', _ => _.name, 'optionalAccess', _2 => _2.length]) ? `"${r.name}" <${r.address}>` : `<${r.address}>`;
  }).join(`,${_chunkYLOVGC5Gjs.CRLF}${_chunkYLOVGC5Gjs.HTAB}`);
}
async function exportMessageIdHeader(header, _ctx) {
  return header.value.ids.map((id) => id.startsWith("<") && id.endsWith(">") ? id : `<${id}>`).join(`${_chunkYLOVGC5Gjs.CRLF}${_chunkYLOVGC5Gjs.HTAB}`);
}










exports.buildHeaders = buildHeaders; exports.exportHeader = exportHeader; exports.exportHeaderValue = exportHeaderValue; exports.exportHeaderAttributes = exportHeaderAttributes; exports.exportStringHeader = exportStringHeader; exports.exportDateHeader = exportDateHeader; exports.exportAddressHeader = exportAddressHeader; exports.exportMessageIdHeader = exportMessageIdHeader;
