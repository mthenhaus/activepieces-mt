import {
  MailReceiver
} from "./chunk-XJAVYMPG.mjs";

// src/messageSync/messageSync.ts
import { encodeHex } from "@mailchain/encoding";
import axios from "axios";
var MessageSync = class {
  constructor(sdkConfig, receiverFactory, keyRing, mailboxOperations, axiosInstance = axios.create()) {
    this.sdkConfig = sdkConfig;
    this.receiverFactory = receiverFactory;
    this.keyRing = keyRing;
    this.mailboxOperations = mailboxOperations;
    this.axiosInstance = axiosInstance;
  }
  static create(sdkConfig, keyRing, mailboxOperations, axiosInstance = axios.create()) {
    return new MessageSync(sdkConfig, MailReceiver.create, keyRing, mailboxOperations, axiosInstance);
  }
  async sync(mailboxes) {
    return Promise.all(
      mailboxes.map(
        (mailbox) => this.syncMailbox(mailbox).catch((cause) => ({ status: "fail", mailbox, cause }))
      )
    );
  }
  async syncMailbox(mailbox) {
    const messagingKey = this.keyRing.addressBytesMessagingKey(
      mailbox.messagingKeyParams.address,
      mailbox.messagingKeyParams.protocol,
      mailbox.messagingKeyParams.nonce
    );
    return this.syncWithMessagingKey(mailbox, messagingKey);
  }
  async syncWithMessagingKey(mailbox, messagingKey) {
    const receiver = this.receiverFactory(this.sdkConfig, messagingKey, this.axiosInstance);
    const undeliveredMessages = await receiver.getUndelivered();
    const messages = [];
    for (const undeliveredMessage of undeliveredMessages) {
      if (undeliveredMessage.status !== "success") {
        console.warn("failed to get undelivered message", undeliveredMessage.cause);
        continue;
      }
      const savedMessages = await this.mailboxOperations.saveReceivedMessage({ receivedTransportPayload: undeliveredMessage.payload, userMailbox: mailbox }).catch((e) => {
        console.warn(
          `Failed saving received message with hash ${encodeHex(undeliveredMessage.deliveryRequestHash)}`,
          e
        );
        return void 0;
      });
      if (savedMessages && savedMessages.length > 0) {
        messages.push(...savedMessages);
        await receiver.confirmDelivery(undeliveredMessage.deliveryRequestHash).then(() => {
          console.debug(
            `Successfully confirmed delivery message hash ${encodeHex(
              undeliveredMessage.deliveryRequestHash
            )}`
          );
        }).catch(
          (e) => console.warn(
            `Failed saving received message with hash ${encodeHex(
              undeliveredMessage.deliveryRequestHash
            )}`,
            e
          )
        );
      }
    }
    return { status: "success", mailbox, messages };
  }
};

export {
  MessageSync
};
