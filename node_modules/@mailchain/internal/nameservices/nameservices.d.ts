import { PublicKey } from '@mailchain/crypto';
import { NameServiceAddress } from '@mailchain/addressing';
import { IdentityKeysApiInterface } from '@mailchain/api';
import { Configuration } from '../configuration.js';
import { IdentityKeys } from '../identityKeys/identityKeys.js';
import { UserMailbox } from '../user/types.js';

declare const PROTOCOLS_SUPPORTING_NAMESERVICE: readonly ["ethereum", "tezos", "solana"];
type ResolvedName = {
    kind: 'name' | 'token';
    address: NameServiceAddress;
    resolver?: string;
    metadata?: object;
};
declare class Nameservices {
    private readonly identityKeysApi;
    private readonly identityKeysService;
    private readonly mailchainAddressDomain;
    constructor(identityKeysApi: IdentityKeysApiInterface, identityKeysService: IdentityKeys, mailchainAddressDomain: string);
    static create(config: Configuration): Nameservices;
    reverseResolveNames(identityKey: PublicKey, kind?: ResolvedName['kind'][]): Promise<ResolvedName[]>;
    nameResolvesToMailbox(nsName: string, mailboxIdentityKey: PublicKey): Promise<NameServiceAddress | null>;
    tokenResolvesToMailbox(tokenId: string, contractAddress: string, mailbox: UserMailbox): Promise<NameServiceAddress | null>;
}

export { Nameservices, PROTOCOLS_SUPPORTING_NAMESERVICE, ResolvedName };
