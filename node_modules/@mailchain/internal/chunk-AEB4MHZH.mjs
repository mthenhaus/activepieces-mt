import {
  createECDHKeyBundle
} from "./chunk-UD2EPKQJ.mjs";
import {
  protocol
} from "./chunk-4IWBVVDK.mjs";

// src/transport/deliveryRequests/envelope.ts
import {
  secureRandom,
  PrivateKeyEncrypter,
  ED25519PrivateKey,
  privateKeyToBytes
} from "@mailchain/crypto";
async function createEnvelope(recipientMessagingKey, messageRootEncryptionKey, messageURI, rand = secureRandom) {
  const keyBundle = await createECDHKeyBundle(recipientMessagingKey, rand);
  const encrypter = PrivateKeyEncrypter.fromPrivateKey(ED25519PrivateKey.fromSeed(keyBundle.secret), rand);
  const encryptedMessageKey = await encrypter.encrypt(
    privateKeyToBytes(messageRootEncryptionKey.privateKey)
  );
  const encryptedMessageURI = await encrypter.encrypt(Buffer.from(messageURI, "utf8"));
  const payload = {
    encryptedMessageKey,
    encryptedMessageUri: encryptedMessageURI,
    ecdhKeyBundle: keyBundle.keyBundle
  };
  const errMsg = protocol.Envelope.verify(payload);
  if (errMsg)
    throw Error(errMsg);
  return protocol.Envelope.create(payload);
}

export {
  createEnvelope
};
