import { SignerWithPublicKey } from '@mailchain/crypto';
import { ProvidedMessagingKeyIncorrectError } from '@mailchain/signatures';
import { Configuration } from '../../configuration.js';
import { MailchainResult } from '../../mailchainResult.js';
import { R as ResolvedAddress, a as ResoleAddressesFailuresError, M as MessagingKeys } from '../../messagingKeys-f886bff1.js';
import { Distribution } from '../../transport/distribution/distribution.js';
import { MailData } from '../../transport/mail/types.js';
import { Payload } from '../../transport/payload/payload.js';
import { SenderVerifier } from '../../transport/verifier/sender.js';
import { PreflightCheckError } from '../errors.js';
import '@mailchain/addressing';
import '@mailchain/api';
import '../../errors/unexpected.js';
import '../../messagingKeys/errors.js';
import '../../messagingKeys/proof.js';
import 'axios';
import '../../messagingKeys/contractResolvers/resolver.js';
import '../../messagingKeys/contractResolvers/errors.js';
import '../../messagingKeys/verify.js';
import '../../transport/payload/headers.js';

type PrepareMailParams = {
    message: MailData;
    payloadPluginHeaders?: Record<string, unknown>;
    senderMessagingKey: SignerWithPublicKey;
};
type PreparedMail = {
    distributions: Distribution[];
    message: Payload;
    resolvedAddresses: Map<string, ResolvedAddress>;
};
type PrepareMailError = PreflightCheckError | ProvidedMessagingKeyIncorrectError | ResoleAddressesFailuresError;
declare class MailPreparer {
    private readonly messagingKeys;
    private readonly senderVerifier;
    constructor(messagingKeys: MessagingKeys, senderVerifier: SenderVerifier);
    static create(configuration: Configuration): MailPreparer;
    prepareMail(params: PrepareMailParams): Promise<MailchainResult<PreparedMail, PrepareMailError>>;
}

export { MailPreparer, PrepareMailError, PrepareMailParams, PreparedMail };
