import { SignerWithPublicKey } from '@mailchain/crypto';
import { ProvidedMessagingKeyIncorrectError } from '@mailchain/signatures';
import { Configuration } from '../../configuration.js';
import { MailchainResult } from '../../mailchainResult.js';
import { UnexpectedMailchainError } from '../../errors/unexpected.js';
import { g as ResolveManyAddressesError, M as MessagingKeys } from '../../messagingKeys-f886bff1.js';
import { SenderVerifier } from '../../transport/verifier/sender.js';
import { VerifiablePresentationRequest } from '../../verifiableCredentials/request/request.js';
import { S as SentPayloadDistributionRequests, d as DistributePayloadError, P as PayloadDistributor } from '../../index-f3cb9684.js';
import '@mailchain/addressing';
import '@mailchain/api';
import '../../messagingKeys/errors.js';
import '../../messagingKeys/proof.js';
import 'axios';
import '../../messagingKeys/contractResolvers/resolver.js';
import '../../messagingKeys/contractResolvers/errors.js';
import '../../messagingKeys/verify.js';
import '../../verifiableCredentials/payload.js';
import 'did-jwt-vc';
import 'did-jwt-vc/lib/types';
import '../../verifiableCredentials/did.js';
import '../../verifiableCredentials/termsOfUse.js';
import '../../verifiableCredentials/subject.js';
import '../deliveryRequests/deliveryRequests.js';
import '../../transport/distribution/distribution.js';
import '../../transport/payload/payload.js';
import '../../transport/payload/headers.js';
import '../payload/store.js';

type SentVerifiablePresentationRequest = {
    sentDeliveryRequests: SentPayloadDistributionRequests;
};
type SendVerifiablePresentationRequestError = ProvidedMessagingKeyIncorrectError | DistributePayloadError | UnexpectedMailchainError | ResolveManyAddressesError;
declare class VerifiablePresentationRequestSender {
    private readonly senderMessagingKey;
    private readonly messagingKeys;
    private readonly payloadDistributor;
    private readonly senderVerifier;
    constructor(senderMessagingKey: SignerWithPublicKey, messagingKeys: MessagingKeys, payloadDistributor: PayloadDistributor, senderVerifier: SenderVerifier);
    static fromSenderMessagingKey(senderMessagingKey: SignerWithPublicKey, configuration?: Configuration): VerifiablePresentationRequestSender;
    sendVerifiablePresentationRequest(params: VerifiablePresentationRequest): Promise<MailchainResult<SentVerifiablePresentationRequest, SendVerifiablePresentationRequestError>>;
}

export { SendVerifiablePresentationRequestError, SentVerifiablePresentationRequest, VerifiablePresentationRequestSender };
