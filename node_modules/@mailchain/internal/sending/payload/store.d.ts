import { ED25519ExtendedPrivateKey, SignerWithPublicKey } from '@mailchain/crypto';
import { TransportApiInterface } from '@mailchain/api';
import { Configuration } from '../../configuration.js';
import { MailchainResult } from '../../mailchainResult.js';
import { Payload } from '../../transport/payload/payload.js';
import '../../transport/payload/headers.js';

type StoredPayload = {
    payloadUri: string;
    payloadRootEncryptionKey: ED25519ExtendedPrivateKey;
};
type PreparePayloadParams = {
    payload: Payload;
};
declare class StorePayloadError extends Error {
    constructor(cause: Error);
}
declare class PayloadStorer {
    private readonly transportApi;
    constructor(transportApi: TransportApiInterface);
    static create(configuration: Configuration, accountKeySigner: SignerWithPublicKey): PayloadStorer;
    /**
     * Encrypt the payload with ephemeral key and deliver it to the storage nodes.
     * @returns the URL to get the message from the and ephemeral key used for the encryption of it
     */
    storePayload(payload: Payload): Promise<MailchainResult<StoredPayload, StorePayloadError>>;
}

export { PayloadStorer, PreparePayloadParams, StorePayloadError, StoredPayload };
