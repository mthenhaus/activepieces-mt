import { PublicKey, ED25519ExtendedPrivateKey, SignerWithPublicKey } from '@mailchain/crypto';
import { TransportApiInterface } from '@mailchain/api';
import { Configuration } from '../../configuration.js';
import { MailchainResult } from '../../mailchainResult.js';

declare class SomeDeliveryRequestsFailedError extends Error {
    readonly successes: Array<{
        params: SendDeliveryRequestParams;
        data: SentPayloadDistributionRequest;
    }>;
    readonly failures: Array<{
        params: SendDeliveryRequestParams;
        error: SendDeliveryRequestError;
    }>;
    constructor(successes: Array<{
        params: SendDeliveryRequestParams;
        data: SentPayloadDistributionRequest;
    }>, failures: Array<{
        params: SendDeliveryRequestParams;
        error: SendDeliveryRequestError;
    }>);
}
type SendManyDeliveryRequestError = SomeDeliveryRequestsFailedError;
type SentManyDeliveryRequests = SentPayloadDistributionRequest[];
type SendManyDeliveryRequestsParams = {
    recipients: PublicKey[];
    payloadUri: string;
    payloadRootEncryptionKey: ED25519ExtendedPrivateKey;
};
type SendDeliveryRequestParams = {
    recipientMessageKey: PublicKey;
    payloadUri: string;
    payloadRootEncryptionKey: ED25519ExtendedPrivateKey;
};
type SentPayloadDistributionRequest = {
    deliveryRequestId: string;
    recipientMessageKey: PublicKey;
};
type SendDeliveryRequestError = SendDeliveryRequestTransportError;
declare class SendDeliveryRequestTransportError extends Error {
    readonly params: SendDeliveryRequestParams;
    constructor(cause: Error, params: SendDeliveryRequestParams);
}
declare class DeliveryRequests {
    private readonly transportApi;
    constructor(transportApi: TransportApiInterface);
    static create(configuration: Configuration, sender: SignerWithPublicKey): DeliveryRequests;
    /**
     * Send the same payload delivery request to multiple recipients
     */
    sendManyDeliveryRequests(params: SendManyDeliveryRequestsParams): Promise<MailchainResult<SentManyDeliveryRequests, SendManyDeliveryRequestError>>;
    /**
     * Create delivery request for the recipient of the message providing the key used to encrypt the payload.
     *
     * @param recipientMessageKey the key of the message
     * @param messageUri the URL to get the message from
     * @param payloadRootEncryptionKey the root ephemeral key used to encrypt the Payload
     */
    sendDeliveryRequest(params: SendDeliveryRequestParams): Promise<MailchainResult<SentPayloadDistributionRequest, SendDeliveryRequestError>>;
}

export { DeliveryRequests, SendDeliveryRequestError, SendDeliveryRequestTransportError, SendManyDeliveryRequestError, SendManyDeliveryRequestsParams, SentManyDeliveryRequests, SentPayloadDistributionRequest, SomeDeliveryRequestsFailedError };
