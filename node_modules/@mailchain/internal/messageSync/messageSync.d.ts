import { KeyRing } from '@mailchain/keyring';
import { KeyRingDecrypter } from '@mailchain/keyring/functions';
import { AxiosInstance } from 'axios';
import { MailReceiver } from '../receiving/mail/mail.js';
import { Configuration } from '../configuration.js';
import { b as MailboxOperations } from '../index-0d80c229.js';
import { MessagePreview } from '../mailbox/types.js';
import { UserMailbox } from '../user/types.js';
import '../transport/payload/payload.js';
import '@mailchain/crypto';
import '../transport/payload/headers.js';
import '../receiving/payload/payload.js';
import '../receiving/deliveryRequests/deliveryRequests.js';
import '@mailchain/api';
import '../transport/payload/verifier.js';
import '../receiving/mailer/mailer.js';
import '../transport/mailer/payload.js';
import '../transport/mailer/content.js';
import '@mailchain/signatures';
import '../transport/mail/types.js';
import '../receiving/mailer/author.js';
import '../transport/verifier/sender.js';
import '../messagingKeys-f886bff1.js';
import '@mailchain/addressing';
import '../mailchainResult.js';
import '../errors/unexpected.js';
import '../messagingKeys/errors.js';
import '../messagingKeys/proof.js';
import '../messagingKeys/contractResolvers/resolver.js';
import '../messagingKeys/contractResolvers/errors.js';
import '../messagingKeys/verify.js';
import '../formatters/parse.js';
import '../mailboxRuleEngine/rule.js';
import '../identityKeys/identityKeys.js';
import '../mailbox/addressHasher.js';
import '../mailbox/addressIdentityKeyResolver.js';
import '../mailbox/messageCrypto.js';
import '../mailbox/messageId.js';
import '../mailbox/messageMailboxOwnerMatcher.js';
import '../mailbox/migrations.js';
import 'protobufjs';
import '../migration.js';
import '../mailbox/userMailboxHasher.js';

type SyncResultOk = {
    status: 'success';
    mailbox: UserMailbox;
    messages: MessagePreview[];
};
type SyncResultFailed = {
    status: 'fail';
    mailbox: UserMailbox;
    cause: Error;
};
type SyncResult = SyncResultOk | SyncResultFailed;
declare class MessageSync {
    private readonly sdkConfig;
    private readonly receiverFactory;
    private readonly keyRing;
    private readonly mailboxOperations;
    private readonly axiosInstance;
    constructor(sdkConfig: Configuration, receiverFactory: (typeof MailReceiver)['create'], keyRing: KeyRing, mailboxOperations: MailboxOperations, axiosInstance?: AxiosInstance);
    static create(sdkConfig: Configuration, keyRing: KeyRing, mailboxOperations: MailboxOperations, axiosInstance?: AxiosInstance): MessageSync;
    sync(mailboxes: UserMailbox[]): Promise<SyncResult[]>;
    private syncMailbox;
    syncWithMessagingKey(mailbox: UserMailbox, messagingKey: KeyRingDecrypter): Promise<SyncResult>;
}

export { MessageSync, SyncResult, SyncResultFailed, SyncResultOk };
