"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

var _chunkZIFF3FEHjs = require('./chunk-ZIFF3FEH.js');



var _chunkEHISW4C7js = require('./chunk-EHISW4C7.js');


var _chunkXXPGZHWZjs = require('./chunk-XXPGZHWZ.js');

// src/mailboxRuleEngine/mailchainUserBlocklist.ts
var _uniqjs = require('lodash/uniq.js'); var _uniqjs2 = _interopRequireDefault(_uniqjs);
var _MailchainUserBlocklistRule = class {
  constructor(userProfile) {
    this.userProfile = userProfile;
    _chunkXXPGZHWZjs.__publicField.call(void 0, this, "id", _MailchainUserBlocklistRule.id);
    _chunkXXPGZHWZjs.__publicField.call(void 0, this, "name", "User Blocklist");
  }
  static create(userProfile) {
    return new _MailchainUserBlocklistRule(userProfile);
  }
  isEnabled() {
    return Promise.resolve(true);
  }
  async condition() {
    const blocklistEntries = await this.getBlocklistEntries();
    return _chunkEHISW4C7js.conditionOperationOr.call(void 0, blocklistEntries.map((blockEntry) => _chunkEHISW4C7js.conditionIsFromAddress.call(void 0, blockEntry)));
  }
  async actions() {
    return Promise.resolve([_chunkZIFF3FEHjs.actionAddSystemLabel.call(void 0, "spam")]);
  }
  async addBlocklistEntry(blockEntry) {
    const newEntries = _uniqjs2.default.call(void 0, [...await this.getBlocklistEntries(), blockEntry]);
    await this.userProfile.setSetting(`${this.id}-data`, JSON.stringify(newEntries), {
      secure: true
    });
    return newEntries;
  }
  async removeBlocklistEntry(blockEntry) {
    const newEntries = (await this.getBlocklistEntries()).filter((entry) => entry !== blockEntry);
    await this.userProfile.setSetting(`${this.id}-data`, JSON.stringify(newEntries), {
      secure: true
    });
    return newEntries;
  }
  async getBlocklistEntries() {
    const items = await this.userProfile.getSetting(`${this.id}-data`);
    if (!_optionalChain([items, 'optionalAccess', _ => _.isSet]) || items.value == null)
      return [];
    return JSON.parse(items.value);
  }
};
var MailchainUserBlocklistRule = _MailchainUserBlocklistRule;
_chunkXXPGZHWZjs.__publicField.call(void 0, MailchainUserBlocklistRule, "id", "user-blocklist-rule");



exports.MailchainUserBlocklistRule = MailchainUserBlocklistRule;
