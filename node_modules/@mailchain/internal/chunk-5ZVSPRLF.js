"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunk3X76E44Hjs = require('./chunk-3X76E44H.js');


var _chunkXIZIHI7Rjs = require('./chunk-XIZIHI7R.js');


var _chunkIVVOMLHBjs = require('./chunk-IVVOMLHB.js');


var _chunkXXPGZHWZjs = require('./chunk-XXPGZHWZ.js');

// src/sending/distributor/distributor.ts
var CreateDistributionRequestsFailuresError = class extends Error {
  constructor(successes, failures) {
    super(`Not all distributions prepared correctly. Check the failed distributions to retry failed requests.`);
    this.successes = successes;
    this.failures = failures;
    _chunkXXPGZHWZjs.__publicField.call(void 0, this, "type", "create_distribution_requests_failures");
    _chunkXXPGZHWZjs.__publicField.call(void 0, this, "docs", "https://docs.mailchain.com/developer/errors/codes#create_distribution_requests_failures");
  }
};
var PayloadDistributor = class {
  constructor(payloadStorer, payloadDeliveryRequests) {
    this.payloadStorer = payloadStorer;
    this.payloadDeliveryRequests = payloadDeliveryRequests;
  }
  static create(configuration, sender) {
    return new PayloadDistributor(
      _chunk3X76E44Hjs.PayloadStorer.create(configuration, sender),
      _chunkXIZIHI7Rjs.PayloadDeliveryRequests.create(configuration, sender)
    );
  }
  async distributePayload(params) {
    const { data: distributionRequests, error: createDistributionRequestsError } = await this.createDistributionRequests(params.distributions);
    if (createDistributionRequestsError) {
      return { error: createDistributionRequestsError };
    }
    const { resolvedAddresses } = params;
    const { data: sentPayloadDistributionRequests, error: sendPayloadDistributionRequests } = await this.payloadDeliveryRequests.sendPayloadDistributionRequests({
      distributionRequests,
      resolvedAddresses
    });
    if (sendPayloadDistributionRequests) {
      return { error: sendPayloadDistributionRequests };
    }
    return {
      data: sentPayloadDistributionRequests
    };
  }
  async createDistributionRequests(distributions) {
    const createdDistributionsRequests = await Promise.all(
      distributions.map(async (distribution) => {
        const result = await this.payloadStorer.storePayload(distribution.payload);
        return {
          result: {
            data: { storedPayload: result.data, distribution },
            error: result.error
          },
          params: distribution
        };
      })
    );
    const { successes, failures } = _chunkIVVOMLHBjs.partitionMailchainResults.call(void 0, createdDistributionsRequests);
    if (failures.length > 0) {
      return {
        error: new CreateDistributionRequestsFailuresError(successes, failures)
      };
    }
    return {
      data: successes.map((success) => success.data)
    };
  }
};




exports.CreateDistributionRequestsFailuresError = CreateDistributionRequestsFailuresError; exports.PayloadDistributor = PayloadDistributor;
