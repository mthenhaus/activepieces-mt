import {
  SerializablePayloadHeadersImpl
} from "./chunk-74ZFRXKY.mjs";
import {
  deserialize,
  serialize
} from "./chunk-QUGOOV36.mjs";
import {
  decryptPayload
} from "./chunk-BQBCRATA.mjs";
import {
  encryptPayload
} from "./chunk-QOJVNNAP.mjs";
import {
  CHUNK_LENGTH_1MB
} from "./chunk-OD5QTNTX.mjs";

// src/mailbox/messageCrypto.ts
import { ED25519ExtendedPrivateKey } from "@mailchain/crypto";
function createMailchainMessageCrypto(keyRing) {
  const inboxKey = ED25519ExtendedPrivateKey.fromPrivateKey(keyRing.rootInboxKey());
  const headersSerializer = new SerializablePayloadHeadersImpl();
  const encrypt = async (payload) => {
    const headers = headersSerializer.serialize(payload.Headers);
    const encryptedPayload = await encryptPayload(headers, payload.Content, inboxKey, CHUNK_LENGTH_1MB);
    const serializedContent = serialize(encryptedPayload);
    return new Uint8Array(serializedContent);
  };
  const decrypt = async (serializedContent) => {
    const encryptedPayload = deserialize(Buffer.from(serializedContent));
    const { headers, content } = await decryptPayload(encryptedPayload, inboxKey);
    return {
      Content: content,
      Headers: headersSerializer.deserialize(headers)
    };
  };
  return { encrypt, decrypt };
}

export {
  createMailchainMessageCrypto
};
