"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/formatters/simpleMimeHeaderParser.ts
function simpleMimeHeaderParser(message) {
  const result = /* @__PURE__ */ new Map();
  const headersBlankLine = message.indexOf("\r\n\r\n");
  const headersPart = message.substring(0, headersBlankLine);
  const lines = headersPart.split("\r\n");
  let rawHeader = "";
  for (const line of lines) {
    if (/^\s/.test(line)) {
      rawHeader += " " + line.trimStart();
    } else {
      if (rawHeader.length > 0) {
        const [key, value] = processRawHeader(rawHeader);
        result.set(key, value);
      }
      rawHeader = line;
    }
  }
  if (rawHeader.length > 0) {
    const [key, value] = processRawHeader(rawHeader);
    result.set(key, value);
  }
  return result;
}
function processRawHeader(rawHeader) {
  const colonIndex = rawHeader.indexOf(":");
  if (colonIndex > 0) {
    const key = rawHeader.substring(0, colonIndex).trim();
    const value = rawHeader.substring(colonIndex + 1, rawHeader.length).trim();
    return [key, value];
  }
  throw new Error(`invalid header formatting [${rawHeader}]`);
}



exports.simpleMimeHeaderParser = simpleMimeHeaderParser;
