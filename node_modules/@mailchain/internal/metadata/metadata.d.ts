import { Metadata, AddressesApiInterface } from '@mailchain/api';
import { Configuration } from '../configuration.js';
import { MailchainResult } from '../mailchainResult.js';
import { c as ResolveAddressError } from '../messagingKeys-f886bff1.js';
import '@mailchain/addressing';
import '@mailchain/crypto';
import '@mailchain/signatures';
import '../errors/unexpected.js';
import '../messagingKeys/errors.js';
import '../messagingKeys/proof.js';
import 'axios';
import '../messagingKeys/contractResolvers/resolver.js';
import '../messagingKeys/contractResolvers/errors.js';
import '../messagingKeys/verify.js';

type AddressMetadataResult = MailchainResult<Metadata, ResolveAddressError>;
declare class MetaData {
    private readonly addressApi;
    private readonly mailchainAddressDomain;
    constructor(addressApi: AddressesApiInterface, mailchainAddressDomain: string);
    static create(configuration: Configuration): MetaData;
    /**
     * Get metadata for the given address.
     *
     * @param address Address to get metadata for.
     *
     * @returns A {@link Metadata for address} which may be a token or an image.
     *
     * @example
     * import { metadata } from '@mailchain/sdk';
     *
     * const addressMetadata = await metadata.addressMetadata(address);
     * console.log(resolvedAddress);
     *
     */
    addressMetadata(address: string): Promise<AddressMetadataResult>;
    private getAddressMetadata;
}

export { AddressMetadataResult, MetaData };
