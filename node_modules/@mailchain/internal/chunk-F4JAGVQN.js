"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunkFM4CFSM7js = require('./chunk-FM4CFSM7.js');


var _chunkX4KX43ERjs = require('./chunk-X4KX43ER.js');


var _chunkXXPGZHWZjs = require('./chunk-XXPGZHWZ.js');

// src/mailboxRuleEngine/mailboxRuleEngine.ts
var MailboxRuleEngine = class {
  constructor(rulesSource) {
    this.rulesSource = rulesSource;
    _chunkXXPGZHWZjs.__publicField.call(void 0, this, "_conditionHandlers", []);
    _chunkXXPGZHWZjs.__publicField.call(void 0, this, "_actionHandlers", []);
  }
  static create(rulesSource) {
    return new MailboxRuleEngine(rulesSource);
  }
  /**
   * Add a condition handler to the rule engine. Existing handlers with the same id will be replaced by the new handler.
   */
  addConditionHandler(...handlers) {
    for (const handler of handlers) {
      const existingHandlerIndex = this._conditionHandlers.findIndex((h) => h.id === handler.id);
      if (existingHandlerIndex > -1)
        this._conditionHandlers[existingHandlerIndex] = handler;
      else
        this._conditionHandlers.push(handler);
    }
  }
  /**
   * Add an action handler to the rule engine. Existing handlers with the same id will be replaced by the new handler.
   */
  addActionHandler(...handlers) {
    for (const handler of handlers) {
      const existingHandlerIndex = this._actionHandlers.findIndex((h) => h.id === handler.id);
      if (existingHandlerIndex > -1)
        this._actionHandlers[existingHandlerIndex] = handler;
      else
        this._actionHandlers.push(handler);
    }
  }
  /**
   * Apply rules to a message.
   * Rules are applied in order.
   * If a rule applies, the message is modified and the next rule is applied.
   * If no rules apply, the message is returned unmodified.
   *
   * @param params The message to apply rules to
   * @returns The message with rules applied
   */
  async apply(params) {
    const rules = await this.rulesSource();
    for (const rule of rules) {
      if (!await rule.isEnabled())
        continue;
      params = await this.mailboxRuleHandler(params, rule);
      if (rule.stopFurtherProcessing)
        break;
    }
    return params;
  }
  /**
   * Apply a single mailbox rule to a message. If the rule applies, the message is modified.
   *
   * @param params The message to apply rules to
   * @param rule The rule to apply
   * @returns The message with rule applied
   */
  async mailboxRuleHandler(params, rule) {
    const ruleCondition = await rule.condition();
    const conditionApplies = await _chunkFM4CFSM7js.conditionsRunner.call(void 0, params, ruleCondition, this._conditionHandlers);
    const ruleAction = await rule.actions();
    if (conditionApplies)
      return _chunkX4KX43ERjs.actionsRunner.call(void 0, params, ruleAction, this._actionHandlers);
    return params;
  }
};



exports.MailboxRuleEngine = MailboxRuleEngine;
