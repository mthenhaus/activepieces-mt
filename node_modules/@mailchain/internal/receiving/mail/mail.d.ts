import { KeyRingDecrypter } from '@mailchain/keyring';
import { AxiosInstance } from 'axios';
import { Payload } from '../../transport/payload/payload.js';
import { Configuration } from '../../configuration.js';
import { PayloadReceiver } from '../payload/payload.js';
import { MailerContentResolver } from '../mailer/mailer.js';
import { DeliveryRequests } from '../deliveryRequests/deliveryRequests.js';
import '@mailchain/crypto';
import '../../transport/payload/headers.js';
import '../../transport/payload/verifier.js';
import '@mailchain/api';
import '../../transport/mailer/payload.js';
import '../../transport/mailer/content.js';
import '@mailchain/signatures';
import '../../transport/mail/types.js';
import '../mailer/author.js';
import '../../transport/verifier/sender.js';
import '../../messagingKeys-f886bff1.js';
import '@mailchain/addressing';
import '../../mailchainResult.js';
import '../../errors/unexpected.js';
import '../../messagingKeys/errors.js';
import '../../messagingKeys/proof.js';
import '../../messagingKeys/contractResolvers/resolver.js';
import '../../messagingKeys/contractResolvers/errors.js';
import '../../messagingKeys/verify.js';

type ReceivedMail = ReceivedMailOk | ReceivedMailError;
/**
 * Success type for a mail that was received.
 */
type ReceivedMailOk = {
    status: 'success';
    /**
     * Payload of the mail.
     */
    payload: Payload;
    /**
     * Hash of delivery request.
     */
    deliveryRequestHash: Uint8Array;
};
/**
 * Error type for a mail that could not be received.
 */
type ReceivedMailError = {
    status: 'failure';
    /**
     * Reason the mail could not be received.
     */
    cause: Error;
};
/**
 * Receive mail from the Mailchain network.
 */
declare class MailReceiver {
    private readonly deliveryRequests;
    private readonly mailerReceiver;
    private readonly payloadReceiver;
    private readonly mailchainAddressDomain;
    constructor(deliveryRequests: DeliveryRequests, mailerReceiver: MailerContentResolver, payloadReceiver: PayloadReceiver, mailchainAddressDomain: string);
    static create(configuration: Configuration, receiverMessagingKeyDecrypter: KeyRingDecrypter, axiosInstance?: AxiosInstance): MailReceiver;
    /**
     * Confirm the delivery of a mail has been completed.
     * @param hash of the delivery request.
     */
    confirmDelivery(deliveryRequestHash: Uint8Array): Promise<void>;
    /**
     * Get all undelivered mail.
     * @returns the mail that has been received.
     */
    getUndelivered(): Promise<ReceivedMail[]>;
    private processReceivedPayload;
    /**
     * creates the mail content from the payload.
     * @param payload the decrypted payload received from the network.
     * @returns
     */
    private processReceivedPayloadData;
}

export { MailReceiver, ReceivedMail, ReceivedMailError, ReceivedMailOk };
