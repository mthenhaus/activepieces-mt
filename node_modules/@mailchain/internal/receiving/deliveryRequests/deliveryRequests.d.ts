import { TransportApiInterface } from '@mailchain/api';
import { ED25519ExtendedPrivateKey } from '@mailchain/crypto';
import { KeyRingDecrypter } from '@mailchain/keyring';
import { Configuration } from '../../configuration.js';

type UndeliveredDeliveryRequestSuccess = {
    status: 'success';
    payloadRootEncryptionKey: ED25519ExtendedPrivateKey;
    payloadUri: string;
    deliveryRequestHash: Uint8Array;
};
type UndeliveredDeliveryRequestFailed = {
    status: 'failure';
    cause: Error;
    deliveryRequestHash: Uint8Array;
};
type UndeliveredDeliveryRequest = UndeliveredDeliveryRequestSuccess | UndeliveredDeliveryRequestFailed;
declare class DeliveryRequests {
    private readonly transportApi;
    private readonly messagingKey;
    constructor(transportApi: TransportApiInterface, messagingKey: KeyRingDecrypter);
    static create(configuration: Configuration, receiverMessagingKeyDecrypter: KeyRingDecrypter): DeliveryRequests;
    confirmDelivery(hash: Uint8Array): Promise<void>;
    getUndelivered(): Promise<UndeliveredDeliveryRequest[]>;
    private processDeliveryRequest;
}

export { DeliveryRequests, UndeliveredDeliveryRequest, UndeliveredDeliveryRequestFailed, UndeliveredDeliveryRequestSuccess };
