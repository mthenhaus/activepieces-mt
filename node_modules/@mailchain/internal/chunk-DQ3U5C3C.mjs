import {
  IdentityExpiredError,
  IdentityNotFoundError,
  IdentityProviderAddressUnsupportedError,
  IdentityProviderUnsupportedError
} from "./chunk-E5ONHO3D.mjs";
import {
  UnexpectedMailchainError
} from "./chunk-QQZCHFKV.mjs";

// src/metadata/metadata.ts
import {
  BadlyFormattedAddressError,
  checkAddressForErrors,
  IdentityProviderAddressInvalidError
} from "@mailchain/addressing";
import { AddressesApiFactory, createAxiosConfiguration } from "@mailchain/api";
import { isAxiosError } from "axios";
var MetaData = class {
  constructor(addressApi, mailchainAddressDomain) {
    this.addressApi = addressApi;
    this.mailchainAddressDomain = mailchainAddressDomain;
  }
  static create(configuration) {
    return new MetaData(
      AddressesApiFactory(createAxiosConfiguration(configuration.apiPath)),
      configuration.mailchainAddressDomain
    );
  }
  /**
   * Get metadata for the given address.
   *
   * @param address Address to get metadata for.
   *
   * @returns A {@link Metadata for address} which may be a token or an image.
   *
   * @example
   * import { metadata } from '@mailchain/sdk';
   *
   * const addressMetadata = await metadata.addressMetadata(address);
   * console.log(resolvedAddress);
   *
   */
  async addressMetadata(address) {
    const validateAddressError = checkAddressForErrors(address, this.mailchainAddressDomain);
    if (validateAddressError != null) {
      return { error: validateAddressError };
    }
    const { data, error } = await this.getAddressMetadata(address);
    if (error != null) {
      return { error };
    }
    return { data };
  }
  async getAddressMetadata(address) {
    try {
      const { data } = await this.addressApi.getAddressMetadata(address);
      return { data };
    } catch (e) {
      if (isAxiosError(e)) {
        switch (e.response?.data?.code) {
          case "identity_provider_unsupported":
            return {
              error: new IdentityProviderUnsupportedError()
            };
          case "identity_expired":
            return {
              error: new IdentityExpiredError()
            };
          case "identity_provider_address_unsupported":
            return {
              error: new IdentityProviderAddressUnsupportedError()
            };
          case "identity_not_found":
            return {
              error: new IdentityNotFoundError()
            };
          case "address_format_invalid":
          case "tld_unknown":
            return {
              error: new BadlyFormattedAddressError()
            };
          case "identity_address_invalid":
            return {
              error: new IdentityProviderAddressInvalidError()
            };
        }
      }
      return {
        error: new UnexpectedMailchainError(`Failed to get metadata for address ${address}`, {
          cause: e
        })
      };
    }
  }
};

export {
  MetaData
};
