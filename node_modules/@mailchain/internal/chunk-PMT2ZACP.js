"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/transport/mailer/mailerProof.ts
var _crypto = require('@mailchain/crypto');
var _encoding = require('@mailchain/encoding');
var _canonicalize = require('canonicalize'); var _canonicalize2 = _interopRequireDefault(_canonicalize);
function createMailerProofBuffer(mailerProof) {
  const canonicalized = _canonicalize2.default.call(void 0, {
    params: {
      authorContentSignature: _encoding.encodeHex.call(void 0, mailerProof.params.authorContentSignature),
      expires: Math.round(mailerProof.params.expires.getTime()),
      mailerMessagingKey: _encoding.encodeHex.call(void 0, _crypto.publicKeyToBytes.call(void 0, mailerProof.params.mailerMessagingKey))
    },
    signature: _encoding.encodeHex.call(void 0, mailerProof.signature),
    version: mailerProof.version
  });
  if (!canonicalized) {
    throw new Error("content could not be canonicalized");
  }
  return canonicalized;
}
function parseMailerProofFromJSON(content) {
  const rawRawMailerProof = JSON.parse(content);
  if (!rawRawMailerProof.params) {
    throw new Error("mailerProof.params is required");
  }
  if (rawRawMailerProof.params.authorContentSignature === "") {
    throw new Error("authorContentSignature is required");
  }
  const authorContentSignature = _encoding.decodeHex.call(void 0, rawRawMailerProof.params.authorContentSignature);
  if (rawRawMailerProof.params.mailerMessagingKey === "") {
    throw new Error("mailerMessagingKey is required");
  }
  return {
    params: {
      expires: new Date(rawRawMailerProof.params.expires),
      mailerMessagingKey: _crypto.publicKeyFromBytes.call(void 0, _encoding.decodeHex.call(void 0, rawRawMailerProof.params.mailerMessagingKey)),
      authorContentSignature
    },
    signature: _encoding.decodeHex.call(void 0, rawRawMailerProof.signature),
    version: rawRawMailerProof.version
  };
}




exports.createMailerProofBuffer = createMailerProofBuffer; exports.parseMailerProofFromJSON = parseMailerProofFromJSON;
