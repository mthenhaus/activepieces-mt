import {
  actionAddSystemLabel
} from "./chunk-KRVGQNTU.mjs";
import {
  conditionIsFromAddress,
  conditionOperationOr
} from "./chunk-XFMYRCTF.mjs";
import {
  __publicField
} from "./chunk-NHABU752.mjs";

// src/mailboxRuleEngine/mailchainUserBlocklist.ts
import uniq from "lodash/uniq.js";
var _MailchainUserBlocklistRule = class {
  constructor(userProfile) {
    this.userProfile = userProfile;
    __publicField(this, "id", _MailchainUserBlocklistRule.id);
    __publicField(this, "name", "User Blocklist");
  }
  static create(userProfile) {
    return new _MailchainUserBlocklistRule(userProfile);
  }
  isEnabled() {
    return Promise.resolve(true);
  }
  async condition() {
    const blocklistEntries = await this.getBlocklistEntries();
    return conditionOperationOr(blocklistEntries.map((blockEntry) => conditionIsFromAddress(blockEntry)));
  }
  async actions() {
    return Promise.resolve([actionAddSystemLabel("spam")]);
  }
  async addBlocklistEntry(blockEntry) {
    const newEntries = uniq([...await this.getBlocklistEntries(), blockEntry]);
    await this.userProfile.setSetting(`${this.id}-data`, JSON.stringify(newEntries), {
      secure: true
    });
    return newEntries;
  }
  async removeBlocklistEntry(blockEntry) {
    const newEntries = (await this.getBlocklistEntries()).filter((entry) => entry !== blockEntry);
    await this.userProfile.setSetting(`${this.id}-data`, JSON.stringify(newEntries), {
      secure: true
    });
    return newEntries;
  }
  async getBlocklistEntries() {
    const items = await this.userProfile.getSetting(`${this.id}-data`);
    if (!items?.isSet || items.value == null)
      return [];
    return JSON.parse(items.value);
  }
};
var MailchainUserBlocklistRule = _MailchainUserBlocklistRule;
__publicField(MailchainUserBlocklistRule, "id", "user-blocklist-rule");

export {
  MailchainUserBlocklistRule
};
