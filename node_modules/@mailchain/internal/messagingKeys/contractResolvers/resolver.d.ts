import { ProtocolType } from '@mailchain/addressing';
import { ContractCall } from '@mailchain/api';
import { PublicKey } from '@mailchain/crypto';
import { MailchainResult } from '../../mailchainResult.js';
import { Proof } from '../proof.js';
import { MessagingKeyNotFoundInContractError, InvalidContractResponseError } from './errors.js';
import '@mailchain/signatures';

type ContractMessagingKey = {
    messagingKey: PublicKey;
    protocol: ProtocolType;
    proof: Proof;
};
type ContractMessagingKeyError = MessagingKeyNotFoundInContractError | InvalidContractResponseError;
type ContractCallResolveResult = MailchainResult<ContractMessagingKey, MessagingKeyNotFoundInContractError | InvalidContractResponseError>;
interface ContractCallMessagingKeyResolver {
    resolve(contract: ContractCall): Promise<ContractCallResolveResult>;
}
interface ContractCallLatestNonce {
    latestNonce(contract: ContractCall): Promise<number>;
}

export { ContractCallLatestNonce, ContractCallMessagingKeyResolver, ContractCallResolveResult, ContractMessagingKey, ContractMessagingKeyError };
