import { ProtocolNotSupportedError, ProtocolType } from '@mailchain/addressing';
import { AxiosInstance } from 'axios';
import { MessagingKeysApiInterface } from '@mailchain/api';
import { Configuration } from '../configuration.js';
import { MailchainResult } from '../mailchainResult.js';
import { UnexpectedMailchainError } from '../errors/unexpected.js';
import { ContractCallLatestNonce } from './contractResolvers/resolver.js';
import '@mailchain/crypto';
import './proof.js';
import '@mailchain/signatures';
import './contractResolvers/errors.js';

type GetMessagingKeyLatestNonceResult = MailchainResult<number, GetMessagingKeyLatestNonceError>;
type GetMessagingKeyLatestNonceError = ProtocolNotSupportedError | UnexpectedMailchainError;
declare class AddressNonce {
    private readonly messagingKeysApi;
    private readonly resolvers;
    constructor(messagingKeysApi: MessagingKeysApiInterface, resolvers: Map<ProtocolType, ContractCallLatestNonce>);
    static create(configuration: Configuration, axiosInstance?: AxiosInstance): AddressNonce;
    /**
     * Get the latest nonce for an address.
     *
     * @param address the protocol get the latest nonce for.
     * @param protocol where to find the address.
     * @returns The latest nonce for the given address.
     */
    getMessagingKeyLatestNonce(address: string, protocol: ProtocolType): Promise<GetMessagingKeyLatestNonceResult>;
}

export { AddressNonce, GetMessagingKeyLatestNonceError, GetMessagingKeyLatestNonceResult };
