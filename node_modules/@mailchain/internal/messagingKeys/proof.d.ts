import { ProtocolType } from '@mailchain/addressing';
import { GetMsgKeyResponseBody, ContractCall } from '@mailchain/api';
import { PublicKey } from '@mailchain/crypto';
import { KindEthereumPersonalMessage, KindTezos, KindRawED25519 } from '@mailchain/signatures';

declare function messagingKeyProofFromApi(response: GetMsgKeyResponseBody): MailchainRegistryMessagingKeyProof;
type MailchainRegistryMessagingKeyProof = {
    source: 'MailchainRegistry';
    identityKey: PublicKey;
    address: Uint8Array;
    protocol: ProtocolType;
    network: string;
    locale: string;
    messageVariant: string;
    nonce: number;
    signature: Uint8Array;
    signatureMethod: typeof KindEthereumPersonalMessage | typeof KindTezos | typeof KindRawED25519;
    messagingKey: PublicKey;
};
type ContractCallProof = {
    source: 'ContractCall';
    call: ContractCall;
};
type Proof = ContractCallProof | MailchainRegistryMessagingKeyProof;

export { ContractCallProof, MailchainRegistryMessagingKeyProof, Proof, messagingKeyProofFromApi };
