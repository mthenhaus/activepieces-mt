import { GetMessagingKeyLatestNonceError, AddressNonce } from './addressNonce.js';
import { AddressNotRegisteredError } from './errors.js';
import { c as ResolveAddressError, M as MessagingKeys } from '../messagingKeys-f886bff1.js';
import { PrivateKey } from '@mailchain/crypto';
import { KeyRing } from '@mailchain/keyring';
import { ProvidedMessagingKeyIncorrectError } from '@mailchain/signatures';
import { Configuration } from '../configuration.js';
import { MailchainResult } from '../mailchainResult.js';
import './proof.js';
import '@mailchain/addressing';
import 'axios';
import '@mailchain/api';
import '../errors/unexpected.js';
import './contractResolvers/resolver.js';
import './contractResolvers/errors.js';
import './verify.js';

type GetExportablePrivateMessagingKeyError = ResolveAddressError | GetMessagingKeyLatestNonceError | ProvidedMessagingKeyIncorrectError | AddressNotRegisteredError;
declare class PrivateMessagingKeys {
    private readonly messagingKeys;
    private readonly addressNonce;
    constructor(messagingKeys: MessagingKeys, addressNonce: AddressNonce);
    static create(config: Configuration): PrivateMessagingKeys;
    getExportablePrivateMessagingKey(address: string, keyRing: KeyRing): Promise<MailchainResult<PrivateKey, GetExportablePrivateMessagingKeyError>>;
}

export { GetExportablePrivateMessagingKeyError, PrivateMessagingKeys };
