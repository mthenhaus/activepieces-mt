"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunkWPXT6MG2js = require('./chunk-WPXT6MG2.js');

// src/transport/mailer/payload.ts
var _crypto = require('@mailchain/crypto');
var _encoding = require('@mailchain/encoding');
function isMailerHeaders(headers) {
  return headers.ContentType === "message/x.mailchain-mailer" && !Object.hasOwn(headers, "MailerContent");
}
function isMailerPayload(payload) {
  return isMailerHeaders(payload.Headers);
}
function isResolvedMailerHeaders(headers) {
  return headers.ContentType === "message/x.mailchain-mailer" && Object.hasOwn(headers, "MailerContent");
}
function isResolvedMailerPayload(payload) {
  return isResolvedMailerHeaders(payload.Headers);
}
async function createMailerPayload(mailerMessagingKey, mailerContent) {
  const mailerContentBuffer = Buffer.from(_chunkWPXT6MG2js.createContentBuffer.call(void 0, mailerContent));
  return {
    Headers: {
      Origin: mailerMessagingKey.publicKey,
      ContentSignature: await mailerMessagingKey.sign(mailerContentBuffer),
      Created: /* @__PURE__ */ new Date(),
      ContentLength: mailerContentBuffer.length,
      ContentType: "message/x.mailchain-mailer",
      ContentEncoding: _encoding.EncodingTypes.Base64,
      ContentEncryption: _crypto.KindNaClSecretKey
    },
    Content: mailerContentBuffer
  };
}







exports.isMailerHeaders = isMailerHeaders; exports.isMailerPayload = isMailerPayload; exports.isResolvedMailerHeaders = isResolvedMailerHeaders; exports.isResolvedMailerPayload = isResolvedMailerPayload; exports.createMailerPayload = createMailerPayload;
