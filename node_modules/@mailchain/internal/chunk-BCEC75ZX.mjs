import {
  MailerAuthorVerifier
} from "./chunk-6KQLSPPY.mjs";
import {
  isMailerPayload
} from "./chunk-QDOZM76B.mjs";
import {
  parseMailerContentFromJSON
} from "./chunk-5J52SPEE.mjs";
import {
  createMimeMessage
} from "./chunk-QJ4Z43TQ.mjs";

// src/receiving/mailer/mailer.ts
import { verifyMailerProof } from "@mailchain/signatures";
import axios from "axios";
import { decodeBase64, decodeUtf8, encodeUtf8 } from "@mailchain/encoding";
var MailerContentResolver = class {
  constructor(axiosInstance, sender) {
    this.axiosInstance = axiosInstance;
    this.sender = sender;
  }
  static create(configuration, axiosInstance = axios.create()) {
    return new MailerContentResolver(axiosInstance, MailerAuthorVerifier.create(configuration));
  }
  async get(payload) {
    if (!isMailerPayload(payload)) {
      throw new Error("invalid content type");
    }
    const mailerContent = parseMailerContentFromJSON(payload.Content.toString());
    if (!verifyMailerProof(mailerContent.authorMessagingKey, mailerContent.mailerProof)) {
      throw new Error("invalid mailer proof");
    }
    const response = await this.axiosInstance.get(mailerContent.contentUri, {
      responseType: "arraybuffer"
    });
    const decodedData = decodeBase64(response.data);
    if (!mailerContent.authorMessagingKey.verify(
      decodedData,
      mailerContent.mailerProof.params.authorContentSignature
    )) {
      throw new Error("invalid content signature");
    }
    const parsedMailerData = JSON.parse(encodeUtf8(decodedData));
    const processedContent = await processContent(mailerContent, parsedMailerData);
    const utf8EncodedContent = decodeUtf8(processedContent);
    const mailerPayload = {
      ...payload,
      Headers: { ...payload.Headers, MailerContent: mailerContent },
      Content: Buffer.from(utf8EncodedContent)
    };
    const senderOwnsFromAddress = await this.sender.verifyAuthorOwnsFromAddress(
      payload,
      Buffer.from(utf8EncodedContent)
    );
    if (!senderOwnsFromAddress) {
      throw new Error("sender does not match from address");
    }
    return mailerPayload;
  }
};
async function processContent(mailerContent, mailerData) {
  const { original } = await createMimeMessage(
    {
      blindCarbonCopyRecipients: [],
      carbonCopyRecipients: [],
      date: mailerContent.date,
      from: mailerContent.authorMailAddress,
      id: mailerContent.messageId,
      message: mailerData.html,
      plainTextMessage: mailerData.plainTextMessage,
      recipients: mailerContent.to,
      subject: mailerData.subject,
      replyTo: mailerData.replyTo
    },
    /* @__PURE__ */ new Map()
  );
  return original;
}

export {
  MailerContentResolver
};
