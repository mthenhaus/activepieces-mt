import { SignerWithPublicKey } from '@mailchain/crypto';
import { Configuration } from '../../configuration.js';
import { MailchainResult } from '../../mailchainResult.js';
import { AddressNotRegisteredError } from '../../messagingKeys/errors.js';
import { c as ResolveAddressError, M as MessagingKeys } from '../../messagingKeys-f886bff1.js';
import { CreateMailchainMessagingKeyIssuerError, MailchainMessagingKeyIssuer } from '../issuer.js';
import { VerifiablePresentationJWT } from '../jwt.js';
import '@mailchain/addressing';
import '@mailchain/api';
import '@mailchain/signatures';
import '../../errors/unexpected.js';
import '../../messagingKeys/proof.js';
import 'axios';
import '../../messagingKeys/contractResolvers/resolver.js';
import '../../messagingKeys/contractResolvers/errors.js';
import '../../messagingKeys/verify.js';
import 'did-jwt-vc';

type CreateVerifiableMailchainAddressOwnerError = CreateMailchainMessagingKeyIssuerError | AddressNotRegisteredError | ResolveAddressError;
type CreateVerifiableMailchainAddressOwnerParams = {
    /**
     * Recipient Mailchain address.
     */
    address: string;
    signer: SignerWithPublicKey;
    /**
     * Who is requesting the verifiable credential.
     */
    requester: string;
    /**
     * The actions that the holder is allowed to perform.
     * @example ['Authenticate', 'Join meeting']
     */
    actions: string[];
    resources: string[];
    options: {
        /**
         * @see {@link VerifiablePresentationRequest.requestId}
         */
        requestId: string;
        /**
         * The number of seconds from the current time that the credential will expire.
         */
        expiresIn?: number;
        /**
         * The date and time that the credential will expire.
         */
        expiresAt?: Date;
        nonce?: string;
    };
};
declare class MailchainAddressOwnershipIssuer {
    private readonly messagingKeys;
    private readonly mailchainMessagingKeyIssuer;
    constructor(messagingKeys: MessagingKeys, mailchainMessagingKeyIssuer: MailchainMessagingKeyIssuer);
    static create(configuration?: Configuration): MailchainAddressOwnershipIssuer;
    createVerifiableMailchainAddressOwnership(params: CreateVerifiableMailchainAddressOwnerParams): Promise<MailchainResult<VerifiablePresentationJWT, CreateVerifiableMailchainAddressOwnerError>>;
}
/**
 * Resolve the credential expiration date with the resolution being to date with the earliest expiration date.
 */
declare function resolveExpirationDate(issuanceDate: Date, expiresAt: Date | undefined, expiresIn: number | undefined): Date | undefined;

export { CreateVerifiableMailchainAddressOwnerError, CreateVerifiableMailchainAddressOwnerParams, MailchainAddressOwnershipIssuer, resolveExpirationDate };
