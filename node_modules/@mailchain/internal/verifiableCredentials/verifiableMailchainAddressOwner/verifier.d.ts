import { VerifiedPresentation } from 'did-jwt-vc';
import { Configuration } from '../../configuration.js';
import { MailchainResult } from '../../mailchainResult.js';
import { c as ResolveAddressError, R as ResolvedAddress, M as MessagingKeys } from '../../messagingKeys-f886bff1.js';
import { ValidationError } from '../../errors/validation.js';
import { MailchainDIDMessagingKeyResolver } from '../resolver.js';
import '@mailchain/addressing';
import '@mailchain/crypto';
import '@mailchain/api';
import '@mailchain/signatures';
import '../../errors/unexpected.js';
import '../../messagingKeys/errors.js';
import '../../messagingKeys/proof.js';
import 'axios';
import '../../messagingKeys/contractResolvers/resolver.js';
import '../../messagingKeys/contractResolvers/errors.js';
import '../../messagingKeys/verify.js';
import 'did-resolver';

type VerifyMailchainAddressOwnershipParams = {
    presentation: string;
    verifier: string;
    nonce?: string;
    resources: string[];
    actions: string[];
    address: string;
};
declare class VerificationError extends Error {
    constructor(cause?: Error);
}
type VerifyMailchainAddressOwnershipError = VerificationError | ValidationError | ResolveAddressError;
type VerifiedMailchainAddressOwner = {
    resolvedAddress: ResolvedAddress;
} & VerifiedPresentation;
declare class MailchainAddressOwnershipVerifier {
    private readonly mailchainDidResolver;
    private readonly messagingKeys;
    constructor(mailchainDidResolver: MailchainDIDMessagingKeyResolver, messagingKeys: MessagingKeys);
    static create(configuration?: Configuration): MailchainAddressOwnershipVerifier;
    verifyMailchainAddressOwnership(params: VerifyMailchainAddressOwnershipParams): Promise<MailchainResult<VerifiedMailchainAddressOwner, VerifyMailchainAddressOwnershipError>>;
}

export { MailchainAddressOwnershipVerifier, VerificationError, VerifiedMailchainAddressOwner, VerifyMailchainAddressOwnershipError, VerifyMailchainAddressOwnershipParams };
