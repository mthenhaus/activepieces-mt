import { SignerWithPublicKey } from '@mailchain/crypto';
import { ValidateAddressError } from '@mailchain/addressing';
import { ValidationError } from '../../errors/validation.js';
import { VerifiablePresentationRequest } from '../request/request.js';
import { Configuration } from '../../configuration.js';
import { MailchainResult } from '../../mailchainResult.js';
import { CreateMailchainMessagingKeyIssuerError } from '../issuer.js';
import { VerifiablePresentationJWT } from '../jwt.js';
import { MailchainAddressOwnershipIssuer } from './issuer.js';
import '../payload.js';
import 'did-jwt-vc';
import 'did-jwt-vc/lib/types';
import '../did.js';
import '../termsOfUse.js';
import '../subject.js';
import '@mailchain/signatures';
import '../../errors/unexpected.js';
import '../../messagingKeys-f886bff1.js';
import '@mailchain/api';
import '../../messagingKeys/errors.js';
import '../../messagingKeys/proof.js';
import 'axios';
import '../../messagingKeys/contractResolvers/resolver.js';
import '../../messagingKeys/contractResolvers/errors.js';
import '../../messagingKeys/verify.js';

type CreateVerifiableMailchainAddressOwnerFromRequestError = ValidateVerifiablePresentationRequestError | CreateMailchainMessagingKeyIssuerError;
declare class VerifiableMailchainAddressOwnerCreator {
    private readonly signer;
    private readonly mailchainAddressOwnershipIssuer;
    private readonly mailchainAddressDomain;
    constructor(signer: SignerWithPublicKey, mailchainAddressOwnershipIssuer: MailchainAddressOwnershipIssuer, mailchainAddressDomain: string);
    static create(signer: SignerWithPublicKey, configuration?: Configuration): VerifiableMailchainAddressOwnerCreator;
    /**
     * Creates a verifiable presentation JWT for a mailchain address owner.
     * @param request - The verifiable presentation request containing the necessary information to create the JWT.
     * @returns A promise that resolves to a MailchainResult containing either the verifiable presentation JWT or an error.
     */
    createVerifiableMailchainAddressOwner(request: VerifiablePresentationRequest): Promise<MailchainResult<VerifiablePresentationJWT, CreateVerifiableMailchainAddressOwnerFromRequestError>>;
}
type ValidateVerifiablePresentationRequestError = ValidationError | ValidateAddressError;
declare function validateVerifiablePresentationRequest(request: VerifiablePresentationRequest, mailchainAddressDomain: string): ValidateVerifiablePresentationRequestError | undefined;

export { CreateVerifiableMailchainAddressOwnerFromRequestError, ValidateVerifiablePresentationRequestError, VerifiableMailchainAddressOwnerCreator, validateVerifiablePresentationRequest };
