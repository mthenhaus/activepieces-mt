import { SignerWithPublicKey } from '@mailchain/crypto';
import { Issuer } from 'did-jwt-vc';
import { ProvidedMessagingKeyIncorrectError } from '@mailchain/signatures';
import { UnexpectedMailchainError } from '../errors/unexpected.js';
import { MailchainResult } from '../mailchainResult.js';
import { b as RegisteredResolvedAddress } from '../messagingKeys-f886bff1.js';
import '@mailchain/addressing';
import '@mailchain/api';
import '../configuration.js';
import '../messagingKeys/errors.js';
import '../messagingKeys/proof.js';
import 'axios';
import '../messagingKeys/contractResolvers/resolver.js';
import '../messagingKeys/contractResolvers/errors.js';
import '../messagingKeys/verify.js';

type CreateMailchainMessagingKeyIssuerError = UnexpectedMailchainError | ProvidedMessagingKeyIncorrectError;
type CreateIssuerFromResolvedAddress = {
    /**
     * Resolved address signer will be created for. Resolved address public key must match signer public key.
     */
    resolvedAddress: RegisteredResolvedAddress;
    /**
     * Signer must match resolved address public key. Used to sign issued credentials.
     */
    signer: SignerWithPublicKey;
};
declare class MailchainMessagingKeyIssuer {
    createIssuerFromResolvedAddress(params: CreateIssuerFromResolvedAddress): Promise<MailchainResult<Issuer, CreateMailchainMessagingKeyIssuerError>>;
}
declare function createIssuerFromSigner(mailchainAddress: string, signer: SignerWithPublicKey): Issuer;

export { CreateIssuerFromResolvedAddress, CreateMailchainMessagingKeyIssuerError, MailchainMessagingKeyIssuer, createIssuerFromSigner };
