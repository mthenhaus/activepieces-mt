// src/identityKeys/identityKeys.ts
import { formatAddress } from "@mailchain/addressing";
import { publicKeyFromBytes, publicKeyToBytes } from "@mailchain/crypto";
import Axios from "axios";
import {
  AddressesApiFactory,
  createAxiosConfiguration,
  IdentityKeysApiFactory
} from "@mailchain/api";
import { decodeHexZeroX, encodeHexZeroX } from "@mailchain/encoding";
var IdentityKeys = class {
  constructor(addressesApi, identityKeyApi) {
    this.addressesApi = addressesApi;
    this.identityKeyApi = identityKeyApi;
  }
  static create(config) {
    const axiosConfig = createAxiosConfiguration(config.apiPath);
    return new IdentityKeys(AddressesApiFactory(axiosConfig), IdentityKeysApiFactory(axiosConfig));
  }
  async getAddressIdentityKey(address, at) {
    return this.resolve(formatAddress(address, "mail"), at);
  }
  async resolve(address, at) {
    const atDate = at ? Math.round(at.getTime() / 1e3) : void 0;
    return this.addressesApi.getAddressIdentityKey(address, atDate).then(({ data }) => ({
      identityKey: publicKeyFromBytes(decodeHexZeroX(data.identityKey)),
      protocol: data.protocol
    })).catch((e) => {
      if (Axios.isAxiosError(e)) {
        if (e.response?.data.code === "identity_not_found") {
          return null;
        } else if (e.response?.status === 404) {
          return null;
        }
      }
      throw e;
    });
  }
  async reverse(identityKey) {
    const { addresses } = (await this.identityKeyApi.getIdentityKeyAddresses(encodeHexZeroX(publicKeyToBytes(identityKey)))).data;
    return addresses;
  }
};

export {
  IdentityKeys
};
