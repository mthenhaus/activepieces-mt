import {
  isActionAddSystemLabel,
  isActionRemoveSystemLabel
} from "./chunk-KRVGQNTU.mjs";

// src/mailboxRuleEngine/actionsHandler.ts
async function actionsRunner(params, actions, actionHandlers) {
  let outputParams = params;
  for (const action of actions) {
    for (const actionHandler of actionHandlers) {
      outputParams = await actionHandler.execute(outputParams, action);
    }
  }
  return outputParams;
}
function createAddSystemLabelActionHandler(mailboxOperations) {
  return {
    id: "addSystemLabel",
    execute: async (params, action) => {
      if (!isActionAddSystemLabel(action))
        return params;
      if (params.message.systemLabels.includes(action.value))
        return params;
      await mailboxOperations.modifySystemLabel(params.message.messageId, action.value, true);
      return {
        ...params,
        message: { ...params.message, systemLabels: [...params.message.systemLabels, action.value] }
      };
    }
  };
}
function createRemoveSystemLabelActionHandler(mailboxOperations) {
  return {
    id: "removeSystemLabel",
    execute: async (params, action) => {
      if (!isActionRemoveSystemLabel(action))
        return params;
      if (!params.message.systemLabels.includes(action.value))
        return params;
      await mailboxOperations.modifySystemLabel(params.message.messageId, action.value, false);
      return {
        ...params,
        message: {
          ...params.message,
          systemLabels: params.message.systemLabels.filter((l) => l !== action.value)
        }
      };
    }
  };
}
function defaultActionHandlers(mailboxOperations) {
  return [
    createAddSystemLabelActionHandler(mailboxOperations),
    createRemoveSystemLabelActionHandler(mailboxOperations)
  ];
}

export {
  actionsRunner,
  createAddSystemLabelActionHandler,
  createRemoveSystemLabelActionHandler,
  defaultActionHandlers
};
