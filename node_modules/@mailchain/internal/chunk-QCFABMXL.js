"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/sending/mail/convertSendMailParams.ts
var _crypto = require('@mailchain/crypto');
var _encoding = require('@mailchain/encoding');
function toMailData(params) {
  const mailDomain = params.from.split("@")[1];
  return {
    id: `${_encoding.encodeBase64.call(void 0, _crypto.secureRandom.call(void 0, 32))}@${mailDomain}`,
    date: /* @__PURE__ */ new Date(),
    subject: params.subject,
    from: createMailAddress(params.from),
    replyTo: params.replyTo ? createMailAddress(params.replyTo) : void 0,
    recipients: _nullishCoalesce(_optionalChain([params, 'access', _ => _.to, 'optionalAccess', _2 => _2.map, 'call', _3 => _3((to) => createMailAddress(to))]), () => ( [])),
    carbonCopyRecipients: _nullishCoalesce(_optionalChain([params, 'access', _4 => _4.cc, 'optionalAccess', _5 => _5.map, 'call', _6 => _6((cc) => createMailAddress(cc))]), () => ( [])),
    blindCarbonCopyRecipients: _nullishCoalesce(_optionalChain([params, 'access', _7 => _7.bcc, 'optionalAccess', _8 => _8.map, 'call', _9 => _9((bcc) => createMailAddress(bcc))]), () => ( [])),
    message: _nullishCoalesce(_optionalChain([params, 'access', _10 => _10.content, 'access', _11 => _11.html, 'optionalAccess', _12 => _12.toString, 'call', _13 => _13()]), () => ( "")),
    plainTextMessage: _nullishCoalesce(_optionalChain([params, 'access', _14 => _14.content, 'access', _15 => _15.text, 'optionalAccess', _16 => _16.toString, 'call', _17 => _17()]), () => ( ""))
  };
}
function createMailAddress(address) {
  const name = address.split("@")[0];
  return { name, address };
}
function fromMailData(mailData) {
  return {
    from: mailData.from.address,
    to: mailData.recipients.map((r) => r.address),
    cc: mailData.carbonCopyRecipients.map((r) => r.address),
    bcc: mailData.blindCarbonCopyRecipients.map((r) => r.address),
    subject: mailData.subject,
    content: {
      html: mailData.message,
      text: mailData.plainTextMessage
    }
  };
}





exports.toMailData = toMailData; exports.createMailAddress = createMailAddress; exports.fromMailData = fromMailData;
