import { PublicKey, Encrypter, Decrypter, SignerWithPublicKey } from '@mailchain/crypto';
import { PutUserSettingRequestBodyGroupEnum, Setting, UserApiInterface } from '@mailchain/api';
import { Configuration } from '../configuration.js';
import { UserMailboxMigrationRule } from './migrations.js';
import { UserMailbox } from './types.js';
import '../identityKeys/identityKeys.js';
import '@mailchain/addressing';
import '../nameservices/nameservices.js';
import 'protobufjs';
import '../migration.js';

declare class UserNotFoundError extends Error {
    constructor();
}
declare const GENERIC_SETTINGS_GROUP: "generic";
type SettingsGroup = PutUserSettingRequestBodyGroupEnum;
type NewUserMailbox = Omit<UserMailbox, 'id' | 'type'>;
interface UserProfile {
    mailboxes(): Promise<[UserMailbox, ...UserMailbox[]]>;
    addMailbox(mailbox: NewUserMailbox): Promise<UserMailbox>;
    updateMailbox(mailboxId: string, mailbox: NewUserMailbox): Promise<UserMailbox>;
    removeMailbox(mailboxId: string): Promise<void>;
    getSettings(group?: SettingsGroup): Promise<Map<string, Setting>>;
    setSetting(key: string, value: string, opts?: {
        group?: SettingsGroup;
        secure?: boolean;
    }): Promise<void>;
    getSetting(key: string): Promise<Setting | undefined>;
    deleteSetting(key: string): Promise<void>;
    getUsername(): Promise<{
        username: string;
        address: string;
    }>;
}
declare class MailchainUserProfile implements UserProfile {
    private readonly mailchainAddressDomain;
    private readonly userApi;
    private readonly accountIdentityKey;
    private readonly mailboxCrypto;
    private readonly settingsCrypto;
    private readonly migration;
    constructor(mailchainAddressDomain: string, userApi: UserApiInterface, accountIdentityKey: () => Promise<PublicKey>, mailboxCrypto: Encrypter & Decrypter, settingsCrypto: Encrypter & Decrypter, migration: UserMailboxMigrationRule);
    static create(config: Configuration, accountIdentityKey: SignerWithPublicKey, mailboxCrypto: Encrypter & Decrypter, settingsCrypto: Encrypter & Decrypter): MailchainUserProfile;
    getUsername(): Promise<{
        address: string;
        username: string;
    }>;
    setSetting(key: string, value: string, opts?: {
        group?: SettingsGroup;
        secure?: boolean;
    }): Promise<void>;
    getSetting(key: string): Promise<Setting | undefined>;
    getSettings(group?: SettingsGroup): Promise<Map<string, Setting>>;
    private handleSettingsItem;
    deleteSetting(key: string): Promise<void>;
    mailboxes(): Promise<[UserMailbox, ...UserMailbox[]]>;
    private accountMailbox;
    addMailbox(mailbox: NewUserMailbox): Promise<UserMailbox>;
    updateMailbox(mailboxId: string, mailbox: NewUserMailbox): Promise<UserMailbox>;
    removeMailbox(mailboxId: string): Promise<void>;
    private internalUpdateMailbox;
}

export { GENERIC_SETTINGS_GROUP, MailchainUserProfile, NewUserMailbox, SettingsGroup, UserNotFoundError, UserProfile };
