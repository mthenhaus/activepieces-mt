import {
  DeliveryRequests
} from "./chunk-OFHPABSY.mjs";
import {
  partitionMailchainResults
} from "./chunk-TVSW4CHH.mjs";
import {
  __publicField
} from "./chunk-NHABU752.mjs";

// src/sending/distributor/deliveryRequests.ts
import flatten from "lodash/flatten.js";
var SendPayloadDistributionRequestsFailuresError = class extends Error {
  constructor(successes, failures) {
    super(
      `Not all mail delivery requests were successfully sent. Check the failed delivery requests to retry failed requests.`
    );
    this.successes = successes;
    this.failures = failures;
    __publicField(this, "type", "send_payload_distribution_request_failures");
    __publicField(this, "docs", "https://docs.mailchain.com/developer/errors/codes#send_payload_distribution_request_failures");
  }
};
var PayloadDeliveryRequests = class {
  constructor(deliveryRequests) {
    this.deliveryRequests = deliveryRequests;
  }
  static create(configuration, sender) {
    return new PayloadDeliveryRequests(DeliveryRequests.create(configuration, sender));
  }
  /**
   * Send the prepared payloads to each recipient.
   * A single payload maybe be sent to multiple recipients in the case of multiple recipients.
   */
  async sendPayloadDistributionRequests(params) {
    const { distributionRequests, resolvedAddresses } = params;
    const sendResults = await Promise.all(
      distributionRequests.map(async (distributionRequest) => {
        const recipients = distributionRequest.distribution.recipients.map(
          (address) => resolvedAddresses.get(address).messagingKey
        );
        const sendManyDeliveryRequestsParams = {
          recipients,
          ...distributionRequest.storedPayload
        };
        const result = await this.deliveryRequests.sendManyDeliveryRequests(sendManyDeliveryRequestsParams);
        return {
          result,
          params: sendManyDeliveryRequestsParams
        };
      })
    );
    const { successes: successfulDeliveries, failures: failed } = partitionMailchainResults(sendResults);
    if (failed.length > 0) {
      return { error: new SendPayloadDistributionRequestsFailuresError(successfulDeliveries, failed) };
    }
    return {
      data: flatten(successfulDeliveries.map(({ data }) => data))
    };
  }
};

export {
  SendPayloadDistributionRequestsFailuresError,
  PayloadDeliveryRequests
};
