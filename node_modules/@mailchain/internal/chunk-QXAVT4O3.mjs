import {
  PayloadDistributor
} from "./chunk-VM5YUMIG.mjs";
import {
  toMailData
} from "./chunk-XG26HNGQ.mjs";
import {
  MailPreparer
} from "./chunk-7UGKATO3.mjs";
import {
  defaultConfiguration
} from "./chunk-TT2KNKAH.mjs";

// src/sending/mail/sender.ts
var MailSender = class {
  constructor(senderMessagingKey, mailPreparer, payloadDistributor) {
    this.senderMessagingKey = senderMessagingKey;
    this.mailPreparer = mailPreparer;
    this.payloadDistributor = payloadDistributor;
  }
  static fromSenderMessagingKey(senderMessagingKey, configuration = defaultConfiguration) {
    return new MailSender(
      senderMessagingKey,
      MailPreparer.create(configuration),
      PayloadDistributor.create(configuration, senderMessagingKey)
    );
  }
  /**
   * Send a mail to any blockchain or Mailchain address using the address Messaging Key.
   *
   * @param params {@link SendMailParams} - The parameters for sending a mail.
   * @returns
   */
  async sendMail(params) {
    const { data: preparedMail, error: prepareMailError } = await this.mailPreparer.prepareMail({
      message: toMailData(params),
      payloadPluginHeaders: params.payloadPluginHeaders,
      senderMessagingKey: this.senderMessagingKey
    });
    if (prepareMailError) {
      return { error: prepareMailError };
    }
    const { data: distributedMail, error: distributedMailError } = await this.payloadDistributor.distributePayload({
      distributions: preparedMail.distributions,
      resolvedAddresses: preparedMail.resolvedAddresses
    });
    if (distributedMailError) {
      return { error: distributedMailError };
    }
    return {
      data: {
        sentMailDeliveryRequests: distributedMail
      }
    };
  }
};

export {
  MailSender
};
