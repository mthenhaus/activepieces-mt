import {
  PayloadDistributor
} from "./chunk-VM5YUMIG.mjs";
import {
  createPayload
} from "./chunk-LOUXPEJW.mjs";
import {
  SenderVerifier
} from "./chunk-DIZUCS2B.mjs";
import {
  MessagingKeys
} from "./chunk-NK6CIHSE.mjs";
import {
  defaultConfiguration
} from "./chunk-TT2KNKAH.mjs";
import {
  UnexpectedMailchainError
} from "./chunk-QQZCHFKV.mjs";

// src/sending/verifiablePresentationRequest/sender.ts
import canonicalize from "canonicalize";
import { ProvidedMessagingKeyIncorrectError } from "@mailchain/signatures";
import { decodeUtf8 } from "@mailchain/encoding";
var VerifiablePresentationRequestSender = class {
  constructor(senderMessagingKey, messagingKeys, payloadDistributor, senderVerifier) {
    this.senderMessagingKey = senderMessagingKey;
    this.messagingKeys = messagingKeys;
    this.payloadDistributor = payloadDistributor;
    this.senderVerifier = senderVerifier;
  }
  static fromSenderMessagingKey(senderMessagingKey, configuration = defaultConfiguration) {
    return new VerifiablePresentationRequestSender(
      senderMessagingKey,
      MessagingKeys.create(configuration),
      PayloadDistributor.create(configuration, senderMessagingKey),
      SenderVerifier.create(configuration)
    );
  }
  async sendVerifiablePresentationRequest(params) {
    const canonicalized = canonicalize(params);
    if (!canonicalized) {
      return {
        error: new UnexpectedMailchainError("unable to create payload to send")
      };
    }
    const { to, from } = params;
    const isSenderMatching = await this.senderVerifier.verifySenderOwnsFromAddress(
      from,
      this.senderMessagingKey.publicKey
    );
    if (!isSenderMatching) {
      return { error: new ProvidedMessagingKeyIncorrectError("sender") };
    }
    const { data: resolvedAddresses, error: resolveAddressError } = await this.messagingKeys.resolveMany([
      from,
      to
    ]);
    if (resolveAddressError) {
      return { error: resolveAddressError };
    }
    const distribution = {
      recipients: [to],
      payload: await createPayload(
        this.senderMessagingKey,
        decodeUtf8(canonicalized),
        "application/vnd.mailchain.verified-credential-request"
      )
    };
    const { data: distributedMail, error: distributedMailError } = await this.payloadDistributor.distributePayload({
      distributions: [distribution],
      resolvedAddresses
    });
    if (distributedMailError) {
      return { error: distributedMailError };
    }
    return {
      data: {
        sentDeliveryRequests: distributedMail
      }
    };
  }
};

export {
  VerifiablePresentationRequestSender
};
