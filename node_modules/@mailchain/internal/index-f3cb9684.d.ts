import { SignerWithPublicKey } from '@mailchain/crypto';
import { Configuration } from './configuration.js';
import { MailchainResult } from './mailchainResult.js';
import { SentPayloadDistributionRequest, SendManyDeliveryRequestsParams, SentManyDeliveryRequests, SomeDeliveryRequestsFailedError, DeliveryRequests } from './sending/deliveryRequests/deliveryRequests.js';
import { R as ResolvedAddress } from './messagingKeys-f886bff1.js';
import { Distribution } from './transport/distribution/distribution.js';
import { StorePayloadError, StoredPayload, PayloadStorer } from './sending/payload/store.js';

type CreateDistributionRequestParams = Distribution;
declare class CreateDistributionRequestsFailuresError extends Error {
    readonly successes: Array<{
        params: CreateDistributionRequestParams;
        data: DistributionRequest;
    }>;
    readonly failures: Array<{
        params: CreateDistributionRequestParams;
        error: StorePayloadError;
    }>;
    readonly type = "create_distribution_requests_failures";
    readonly docs = "https://docs.mailchain.com/developer/errors/codes#create_distribution_requests_failures";
    constructor(successes: Array<{
        params: CreateDistributionRequestParams;
        data: DistributionRequest;
    }>, failures: Array<{
        params: CreateDistributionRequestParams;
        error: StorePayloadError;
    }>);
}
type CreateDistributionRequestsError = CreateDistributionRequestsFailuresError;
type DistributionRequest = {
    distribution: Distribution;
    storedPayload: StoredPayload;
};
type DistributionRequests = DistributionRequest[];
type DistributePayloadError = CreateDistributionRequestsError | SendPayloadDistributionRequestsFailuresError;
type DistributePayloadParams = {
    distributions: Distribution[];
    resolvedAddresses: Map<string, ResolvedAddress>;
};
type DistributedPayload = SentPayloadDistributionRequest[];
declare class PayloadDistributor {
    private readonly payloadStorer;
    private readonly payloadDeliveryRequests;
    constructor(payloadStorer: PayloadStorer, payloadDeliveryRequests: PayloadDeliveryRequests);
    static create(configuration: Configuration, sender: SignerWithPublicKey): PayloadDistributor;
    distributePayload(params: DistributePayloadParams): Promise<MailchainResult<DistributedPayload, DistributePayloadError>>;
    private createDistributionRequests;
}

type SentPayloadDistributionRequests = SentPayloadDistributionRequest[];
type SendPayloadDistributionRequestsError = SendPayloadDistributionRequestsFailuresError;
declare class SendPayloadDistributionRequestsFailuresError extends Error {
    readonly successes: Array<{
        params: SendManyDeliveryRequestsParams;
        data: SentManyDeliveryRequests;
    }>;
    readonly failures: Array<{
        params: SendManyDeliveryRequestsParams;
        error: SomeDeliveryRequestsFailedError;
    }>;
    readonly type = "send_payload_distribution_request_failures";
    readonly docs = "https://docs.mailchain.com/developer/errors/codes#send_payload_distribution_request_failures";
    constructor(successes: Array<{
        params: SendManyDeliveryRequestsParams;
        data: SentManyDeliveryRequests;
    }>, failures: Array<{
        params: SendManyDeliveryRequestsParams;
        error: SomeDeliveryRequestsFailedError;
    }>);
}
type SendPayloadDistributionRequestsParams = {
    distributionRequests: DistributionRequest[];
    resolvedAddresses: Map<string, ResolvedAddress>;
};
declare class PayloadDeliveryRequests {
    private readonly deliveryRequests;
    constructor(deliveryRequests: DeliveryRequests);
    static create(configuration: Configuration, sender: SignerWithPublicKey): PayloadDeliveryRequests;
    /**
     * Send the prepared payloads to each recipient.
     * A single payload maybe be sent to multiple recipients in the case of multiple recipients.
     */
    sendPayloadDistributionRequests(params: SendPayloadDistributionRequestsParams): Promise<MailchainResult<SentPayloadDistributionRequests, SendPayloadDistributionRequestsError>>;
}

export { CreateDistributionRequestParams as C, DistributionRequest as D, PayloadDistributor as P, SentPayloadDistributionRequests as S, CreateDistributionRequestsFailuresError as a, CreateDistributionRequestsError as b, DistributionRequests as c, DistributePayloadError as d, DistributePayloadParams as e, DistributedPayload as f, SendPayloadDistributionRequestsError as g, SendPayloadDistributionRequestsFailuresError as h, SendPayloadDistributionRequestsParams as i, PayloadDeliveryRequests as j };
