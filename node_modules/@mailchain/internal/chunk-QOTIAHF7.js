"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/identityKeys/identityKeys.ts
var _addressing = require('@mailchain/addressing');
var _crypto = require('@mailchain/crypto');
var _axios = require('axios'); var _axios2 = _interopRequireDefault(_axios);




var _api = require('@mailchain/api');
var _encoding = require('@mailchain/encoding');
var IdentityKeys = class {
  constructor(addressesApi, identityKeyApi) {
    this.addressesApi = addressesApi;
    this.identityKeyApi = identityKeyApi;
  }
  static create(config) {
    const axiosConfig = _api.createAxiosConfiguration.call(void 0, config.apiPath);
    return new IdentityKeys(_api.AddressesApiFactory.call(void 0, axiosConfig), _api.IdentityKeysApiFactory.call(void 0, axiosConfig));
  }
  async getAddressIdentityKey(address, at) {
    return this.resolve(_addressing.formatAddress.call(void 0, address, "mail"), at);
  }
  async resolve(address, at) {
    const atDate = at ? Math.round(at.getTime() / 1e3) : void 0;
    return this.addressesApi.getAddressIdentityKey(address, atDate).then(({ data }) => ({
      identityKey: _crypto.publicKeyFromBytes.call(void 0, _encoding.decodeHexZeroX.call(void 0, data.identityKey)),
      protocol: data.protocol
    })).catch((e) => {
      if (_axios2.default.isAxiosError(e)) {
        if (_optionalChain([e, 'access', _ => _.response, 'optionalAccess', _2 => _2.data, 'access', _3 => _3.code]) === "identity_not_found") {
          return null;
        } else if (_optionalChain([e, 'access', _4 => _4.response, 'optionalAccess', _5 => _5.status]) === 404) {
          return null;
        }
      }
      throw e;
    });
  }
  async reverse(identityKey) {
    const { addresses } = (await this.identityKeyApi.getIdentityKeyAddresses(_encoding.encodeHexZeroX.call(void 0, _crypto.publicKeyToBytes.call(void 0, identityKey)))).data;
    return addresses;
  }
};



exports.IdentityKeys = IdentityKeys;
