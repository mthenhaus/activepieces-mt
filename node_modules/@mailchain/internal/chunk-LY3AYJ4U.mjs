import {
  mailchainAddressDecentralizedIdentifier
} from "./chunk-MDSHIXSD.mjs";

// src/verifiableCredentials/issuer.ts
import { isPublicKeyEqual } from "@mailchain/crypto";
import { decodeUtf8, encodeBase64UrlSafe } from "@mailchain/encoding";
import { ProvidedMessagingKeyIncorrectError } from "@mailchain/signatures";
var MailchainMessagingKeyIssuer = class {
  async createIssuerFromResolvedAddress(params) {
    const { resolvedAddress, signer } = params;
    if (!isPublicKeyEqual(resolvedAddress.messagingKey, signer.publicKey)) {
      return {
        error: new ProvidedMessagingKeyIncorrectError("signer")
      };
    }
    return {
      data: createIssuerFromSigner(resolvedAddress.mailchainAddress, signer)
    };
  }
};
function createIssuerFromSigner(mailchainAddress, signer) {
  return {
    did: mailchainAddressDecentralizedIdentifier(mailchainAddress),
    alg: "Ed25519",
    signer: async (data) => {
      const dataBytes = typeof data === "string" ? decodeUtf8(data) : data;
      const signature = await signer.sign(dataBytes);
      return encodeBase64UrlSafe(signature);
    }
  };
}

export {
  MailchainMessagingKeyIssuer,
  createIssuerFromSigner
};
