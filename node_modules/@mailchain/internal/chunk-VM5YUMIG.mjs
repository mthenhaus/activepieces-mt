import {
  PayloadStorer
} from "./chunk-XVBK4RR7.mjs";
import {
  PayloadDeliveryRequests
} from "./chunk-UACPSPDI.mjs";
import {
  partitionMailchainResults
} from "./chunk-TVSW4CHH.mjs";
import {
  __publicField
} from "./chunk-NHABU752.mjs";

// src/sending/distributor/distributor.ts
var CreateDistributionRequestsFailuresError = class extends Error {
  constructor(successes, failures) {
    super(`Not all distributions prepared correctly. Check the failed distributions to retry failed requests.`);
    this.successes = successes;
    this.failures = failures;
    __publicField(this, "type", "create_distribution_requests_failures");
    __publicField(this, "docs", "https://docs.mailchain.com/developer/errors/codes#create_distribution_requests_failures");
  }
};
var PayloadDistributor = class {
  constructor(payloadStorer, payloadDeliveryRequests) {
    this.payloadStorer = payloadStorer;
    this.payloadDeliveryRequests = payloadDeliveryRequests;
  }
  static create(configuration, sender) {
    return new PayloadDistributor(
      PayloadStorer.create(configuration, sender),
      PayloadDeliveryRequests.create(configuration, sender)
    );
  }
  async distributePayload(params) {
    const { data: distributionRequests, error: createDistributionRequestsError } = await this.createDistributionRequests(params.distributions);
    if (createDistributionRequestsError) {
      return { error: createDistributionRequestsError };
    }
    const { resolvedAddresses } = params;
    const { data: sentPayloadDistributionRequests, error: sendPayloadDistributionRequests } = await this.payloadDeliveryRequests.sendPayloadDistributionRequests({
      distributionRequests,
      resolvedAddresses
    });
    if (sendPayloadDistributionRequests) {
      return { error: sendPayloadDistributionRequests };
    }
    return {
      data: sentPayloadDistributionRequests
    };
  }
  async createDistributionRequests(distributions) {
    const createdDistributionsRequests = await Promise.all(
      distributions.map(async (distribution) => {
        const result = await this.payloadStorer.storePayload(distribution.payload);
        return {
          result: {
            data: { storedPayload: result.data, distribution },
            error: result.error
          },
          params: distribution
        };
      })
    );
    const { successes, failures } = partitionMailchainResults(createdDistributionsRequests);
    if (failures.length > 0) {
      return {
        error: new CreateDistributionRequestsFailuresError(successes, failures)
      };
    }
    return {
      data: successes.map((success) => success.data)
    };
  }
};

export {
  CreateDistributionRequestsFailuresError,
  PayloadDistributor
};
