"use strict";Object.defineProperty(exports, "__esModule", {value: true});





var _chunkEHISW4C7js = require('./chunk-EHISW4C7.js');


var _chunkQOTIAHF7js = require('./chunk-QOTIAHF7.js');

// src/mailboxRuleEngine/conditionsHandler.ts
var _crypto = require('@mailchain/crypto');
var _addressing = require('@mailchain/addressing');
async function conditionsRunner(params, condition, conditionHandlers) {
  for (const conditionHandler of conditionHandlers) {
    const result = await conditionHandler.execute(
      params,
      condition,
      (checkCondition) => conditionsRunner(params, checkCondition, conditionHandlers)
    );
    if (result)
      return true;
  }
  return false;
}
var conditionIsFromAddressHandler = {
  id: "conditionIsFromAddressHandler",
  execute: async (params, condition) => {
    if (!_chunkEHISW4C7js.isConditionIsFromAddress.call(void 0, condition))
      return false;
    return _addressing.isSameAddress.call(void 0, params.message.from, condition.value);
  }
};
function createConditionIsFromIdentityHandler(identityKeys) {
  return {
    id: "conditionIsFromIdentityHandler",
    execute: async (params, condition) => {
      if (!_chunkEHISW4C7js.isConditionIsFromIdentity.call(void 0, condition))
        return false;
      const fromIdentityKey = await identityKeys.resolve(params.message.from);
      if (fromIdentityKey == null)
        return false;
      return _crypto.isPublicKeyEqual.call(void 0, fromIdentityKey.identityKey, condition.value);
    }
  };
}
var conditionOperationOrHandler = {
  id: "conditionOperationOrHandler",
  execute: async (_params, condition, checkCondition) => {
    if (!_chunkEHISW4C7js.isConditionOperationOr.call(void 0, condition))
      return false;
    for (const orCondition of condition.value) {
      if (await checkCondition(orCondition))
        return true;
    }
    return false;
  }
};
var conditionOperationAndHandler = {
  id: "conditionOperationAndHandler",
  execute: async (_params, condition, checkCondition) => {
    if (!_chunkEHISW4C7js.isConditionOperationAnd.call(void 0, condition))
      return false;
    for (const andCondition of condition.value) {
      if (!await checkCondition(andCondition))
        return false;
    }
    return true;
  }
};
var conditionOperationNotHandler = {
  id: "conditionOperationNotHandler",
  execute: async (_params, condition, checkCondition) => {
    if (!_chunkEHISW4C7js.isConditionOperationNot.call(void 0, condition))
      return false;
    return !await checkCondition(condition.value);
  }
};
function defaultConditionHandlers(sdkConfig) {
  return [
    conditionIsFromAddressHandler,
    createConditionIsFromIdentityHandler(_chunkQOTIAHF7js.IdentityKeys.create(sdkConfig)),
    conditionOperationOrHandler,
    conditionOperationAndHandler,
    conditionOperationNotHandler
  ];
}









exports.conditionsRunner = conditionsRunner; exports.conditionIsFromAddressHandler = conditionIsFromAddressHandler; exports.createConditionIsFromIdentityHandler = createConditionIsFromIdentityHandler; exports.conditionOperationOrHandler = conditionOperationOrHandler; exports.conditionOperationAndHandler = conditionOperationAndHandler; exports.conditionOperationNotHandler = conditionOperationNotHandler; exports.defaultConditionHandlers = defaultConditionHandlers;
