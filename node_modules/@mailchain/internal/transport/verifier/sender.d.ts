import { PublicKey } from '@mailchain/crypto';
import { Configuration } from '../../configuration.js';
import { M as MessagingKeys } from '../../messagingKeys-f886bff1.js';
import '@mailchain/addressing';
import '@mailchain/api';
import '@mailchain/signatures';
import '../../mailchainResult.js';
import '../../errors/unexpected.js';
import '../../messagingKeys/errors.js';
import '../../messagingKeys/proof.js';
import 'axios';
import '../../messagingKeys/contractResolvers/resolver.js';
import '../../messagingKeys/contractResolvers/errors.js';
import '../../messagingKeys/verify.js';

declare class SenderVerifier {
    private readonly messagingKeys;
    constructor(messagingKeys: MessagingKeys);
    static create(configuration: Configuration): SenderVerifier;
    /**
     *
     * @param fromAddress address that sent the mail. `From:` header in the mail.
     * @param senderMessagingKey public key of the sender.
     * @param at Date to resolve the sender messaging key. When no date is provided, the address resolves using the latest block.
     * @returns
     */
    verifySenderOwnsFromAddress(fromAddress: string, senderMessagingKey: PublicKey, at?: Date): Promise<boolean>;
}

export { SenderVerifier };
