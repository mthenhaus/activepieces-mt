"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/jwt/jwt.ts
var _encoding = require('@mailchain/encoding');
var _canonicalize = require('canonicalize'); var _canonicalize2 = _interopRequireDefault(_canonicalize);
function createPayloadSegment(payload) {
  const payloadWithExpiresClaim = payload;
  if (!payloadWithExpiresClaim.exp) {
    throw new Error("(exp) expires claim is required");
  }
  if (payloadWithExpiresClaim.exp === 0) {
    throw new Error("(exp) expires claim must have a value");
  }
  const canonicalizedPayload = _canonicalize2.default.call(void 0, payload);
  if (!canonicalizedPayload) {
    throw new Error("payload could not be canonicalized");
  }
  return _encoding.encodeBase64UrlSafe.call(void 0, _encoding.decodeUtf8.call(void 0, canonicalizedPayload));
}
async function signJWT(signer, payload) {
  const canonicalizedHeader = _canonicalize2.default.call(void 0, { alg: "EdDSA", typ: "JWT" });
  if (!canonicalizedHeader) {
    throw new Error("header could not be canonicalized");
  }
  const headerSegment = _encoding.encodeBase64UrlSafe.call(void 0, _encoding.decodeUtf8.call(void 0, canonicalizedHeader));
  const payloadSegment = createPayloadSegment(payload);
  const headerAndSegment = `${headerSegment}.${payloadSegment}`;
  const signedToken = await signer.sign(_encoding.decodeUtf8.call(void 0, headerAndSegment));
  const signatureSegment = _encoding.encodeBase64UrlSafe.call(void 0, signedToken);
  return `${headerAndSegment}.${signatureSegment}`;
}
async function verifyJWT(token, publicKey) {
  const [headerSegment, payloadSegment, signatureSegment] = token.split(".");
  if (!headerSegment || !payloadSegment || !signatureSegment) {
    return false;
  }
  const header = JSON.parse(_encoding.encodeUtf8.call(void 0, _encoding.decodeBase64UrlSafe.call(void 0, headerSegment)));
  if (header.alg !== "EdDSA") {
    return false;
  }
  const payload = JSON.parse(_encoding.encodeUtf8.call(void 0, _encoding.decodeBase64UrlSafe.call(void 0, payloadSegment)));
  if (!payload.exp) {
    return false;
  }
  if (payload.exp < Date.now() / 1e3) {
    return false;
  }
  const headerAndSegment = `${headerSegment}.${payloadSegment}`;
  const signature = _encoding.decodeBase64UrlSafe.call(void 0, signatureSegment);
  return publicKey.verify(_encoding.decodeUtf8.call(void 0, headerAndSegment), signature);
}





exports.createPayloadSegment = createPayloadSegment; exports.signJWT = signJWT; exports.verifyJWT = verifyJWT;
