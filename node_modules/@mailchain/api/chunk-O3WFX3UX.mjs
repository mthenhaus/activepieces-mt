// src/axios/token.ts
import { decodeUtf8, encodeBase64UrlSafe } from "@mailchain/encoding";
import isArrayBuffer from "lodash/isArrayBuffer.js";
import { sha3_256 } from "@noble/hashes/sha3";
function asBuffer(data) {
  if (data === void 0) {
    return void 0;
  } else if (Buffer.isBuffer(data)) {
    return data;
  } else if (isArrayBuffer(data)) {
    return Buffer.from(data);
  } else if (typeof data === "string") {
    return Buffer.from(decodeUtf8(data));
  } else if (toString.call(data) === "[object Uint8Array]") {
    return Buffer.from(data);
  }
  return Buffer.from(decodeUtf8(JSON.stringify(data)));
}
function createTokenPayload(url, method, data, expires) {
  const basePayload = {
    m: method.toUpperCase(),
    url: url.pathname,
    aud: url.host,
    exp: expires
  };
  const withQuery = url.search.length > 1 ? { ...basePayload, q: url.search.replace(/^\?/, "") } : basePayload;
  if (!["POST", "PUT", "PATCH"].some((m) => m === method.toUpperCase())) {
    return withQuery;
  }
  const buf = asBuffer(data);
  if (!buf) {
    return withQuery;
  }
  return {
    len: buf.length,
    bodyHash: encodeBase64UrlSafe(sha3_256(buf)),
    ...withQuery
  };
}

export {
  createTokenPayload
};
