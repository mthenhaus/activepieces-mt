import {
  ErrorUnsupportedKey
} from "./chunk-SWHBED45.mjs";
import {
  PrivateKeyCurveEnum,
  PublicKeyCurveEnum
} from "./chunk-GQNR4FJM.mjs";

// src/helpers/cryptoKeyToApiKey.ts
import { KindED25519, KindSECP256K1, KindSECP256R1 } from "@mailchain/crypto";
import { encodeHexZeroX } from "@mailchain/encoding";
function convertPublic(key) {
  switch (key.curve) {
    case KindED25519:
      return { curve: PublicKeyCurveEnum.Ed25519, value: encodeHexZeroX(key.bytes), encoding: "hex/0x-prefix" };
    case KindSECP256K1:
      return { curve: PublicKeyCurveEnum.Secp256k1, value: encodeHexZeroX(key.bytes), encoding: "hex/0x-prefix" };
    case KindSECP256R1:
      return { curve: PublicKeyCurveEnum.Secp256r1, value: encodeHexZeroX(key.bytes), encoding: "hex/0x-prefix" };
    default:
      throw new ErrorUnsupportedKey(key.curve);
  }
}
function convertPrivate(key) {
  switch (key.curve) {
    case KindED25519:
      return { curve: PrivateKeyCurveEnum.Ed25519, value: encodeHexZeroX(key.bytes), encoding: "hex/0x-prefix" };
    case KindSECP256K1:
      return {
        curve: PrivateKeyCurveEnum.Secp256k1,
        value: encodeHexZeroX(key.bytes),
        encoding: "hex/0x-prefix"
      };
    case KindSECP256R1:
      return {
        curve: PrivateKeyCurveEnum.Secp256r1,
        value: encodeHexZeroX(key.bytes),
        encoding: "hex/0x-prefix"
      };
    default:
      throw new ErrorUnsupportedKey(key.curve);
  }
}

export {
  convertPublic,
  convertPrivate
};
