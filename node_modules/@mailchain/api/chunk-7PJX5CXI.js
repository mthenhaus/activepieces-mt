"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/axios/token.ts
var _encoding = require('@mailchain/encoding');
var _isArrayBufferjs = require('lodash/isArrayBuffer.js'); var _isArrayBufferjs2 = _interopRequireDefault(_isArrayBufferjs);
var _sha3 = require('@noble/hashes/sha3');
function asBuffer(data) {
  if (data === void 0) {
    return void 0;
  } else if (Buffer.isBuffer(data)) {
    return data;
  } else if (_isArrayBufferjs2.default.call(void 0, data)) {
    return Buffer.from(data);
  } else if (typeof data === "string") {
    return Buffer.from(_encoding.decodeUtf8.call(void 0, data));
  } else if (toString.call(data) === "[object Uint8Array]") {
    return Buffer.from(data);
  }
  return Buffer.from(_encoding.decodeUtf8.call(void 0, JSON.stringify(data)));
}
function createTokenPayload(url, method, data, expires) {
  const basePayload = {
    m: method.toUpperCase(),
    url: url.pathname,
    aud: url.host,
    exp: expires
  };
  const withQuery = url.search.length > 1 ? { ...basePayload, q: url.search.replace(/^\?/, "") } : basePayload;
  if (!["POST", "PUT", "PATCH"].some((m) => m === method.toUpperCase())) {
    return withQuery;
  }
  const buf = asBuffer(data);
  if (!buf) {
    return withQuery;
  }
  return {
    len: buf.length,
    bodyHash: _encoding.encodeBase64UrlSafe.call(void 0, _sha3.sha3_256.call(void 0, buf)),
    ...withQuery
  };
}



exports.createTokenPayload = createTokenPayload;
