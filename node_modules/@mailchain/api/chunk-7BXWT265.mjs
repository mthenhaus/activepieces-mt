// src/jwt/jwt.ts
import { decodeBase64UrlSafe, decodeUtf8, encodeBase64UrlSafe, encodeUtf8 } from "@mailchain/encoding";
import canonicalize from "canonicalize";
function createPayloadSegment(payload) {
  const payloadWithExpiresClaim = payload;
  if (!payloadWithExpiresClaim.exp) {
    throw new Error("(exp) expires claim is required");
  }
  if (payloadWithExpiresClaim.exp === 0) {
    throw new Error("(exp) expires claim must have a value");
  }
  const canonicalizedPayload = canonicalize(payload);
  if (!canonicalizedPayload) {
    throw new Error("payload could not be canonicalized");
  }
  return encodeBase64UrlSafe(decodeUtf8(canonicalizedPayload));
}
async function signJWT(signer, payload) {
  const canonicalizedHeader = canonicalize({ alg: "EdDSA", typ: "JWT" });
  if (!canonicalizedHeader) {
    throw new Error("header could not be canonicalized");
  }
  const headerSegment = encodeBase64UrlSafe(decodeUtf8(canonicalizedHeader));
  const payloadSegment = createPayloadSegment(payload);
  const headerAndSegment = `${headerSegment}.${payloadSegment}`;
  const signedToken = await signer.sign(decodeUtf8(headerAndSegment));
  const signatureSegment = encodeBase64UrlSafe(signedToken);
  return `${headerAndSegment}.${signatureSegment}`;
}
async function verifyJWT(token, publicKey) {
  const [headerSegment, payloadSegment, signatureSegment] = token.split(".");
  if (!headerSegment || !payloadSegment || !signatureSegment) {
    return false;
  }
  const header = JSON.parse(encodeUtf8(decodeBase64UrlSafe(headerSegment)));
  if (header.alg !== "EdDSA") {
    return false;
  }
  const payload = JSON.parse(encodeUtf8(decodeBase64UrlSafe(payloadSegment)));
  if (!payload.exp) {
    return false;
  }
  if (payload.exp < Date.now() / 1e3) {
    return false;
  }
  const headerAndSegment = `${headerSegment}.${payloadSegment}`;
  const signature = decodeBase64UrlSafe(signatureSegment);
  return publicKey.verify(decodeUtf8(headerAndSegment), signature);
}

export {
  createPayloadSegment,
  signJWT,
  verifyJWT
};
