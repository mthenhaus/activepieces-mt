import {
  AddressIsEmptyError,
  AddressMustBeProtocolAddressError,
  ProtocolIsEmptyError
} from "./chunk-QFIG37GA.mjs";

// src/mailchain_msgkey.ts
import { encodeHexZeroX } from "@mailchain/encoding";
import { KindED25519, publicKeyToBytes, ErrorUnsupportedKey } from "@mailchain/crypto";
function mailchainProvidedMessagingKeyMessage(msgKey, address, protocol) {
  if (address.length === 0)
    throw new AddressIsEmptyError();
  if (protocol.length === 0)
    throw new ProtocolIsEmptyError();
  if (address.includes("@")) {
    throw new AddressMustBeProtocolAddressError();
  }
  switch (msgKey.curve) {
    case KindED25519:
      const encodedKey = encodeHexZeroX(publicKeyToBytes(msgKey));
      return new Uint8Array(
        Buffer.from(
          `Mailchain provided messaging key:
Address:${address}
Protocol:${protocol}
Key:${encodedKey}`
        )
      );
    default:
      throw new ErrorUnsupportedKey(msgKey.curve);
  }
}
function signMailchainProvidedMessagingKey(key, msgKey, address, protocol) {
  switch (key.curve) {
    case KindED25519:
      const msg = mailchainProvidedMessagingKeyMessage(msgKey, address, protocol);
      return key.sign(msg);
    default:
      throw new ErrorUnsupportedKey(key.curve);
  }
}
function verifyMailchainProvidedMessagingKey(key, msgKey, signature, address, protocol) {
  switch (key.curve) {
    case KindED25519:
      const msg = mailchainProvidedMessagingKeyMessage(msgKey, address, protocol);
      return key.verify(msg, signature);
    default:
      throw new ErrorUnsupportedKey(key.curve);
  }
}

export {
  mailchainProvidedMessagingKeyMessage,
  signMailchainProvidedMessagingKey,
  verifyMailchainProvidedMessagingKey
};
