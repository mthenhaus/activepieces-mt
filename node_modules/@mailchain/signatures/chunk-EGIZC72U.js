"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }


var _chunkCDQ22VJQjs = require('./chunk-CDQ22VJQ.js');

// src/mailer.ts
var _crypto = require('@mailchain/crypto');
var _encoding = require('@mailchain/encoding');
var _canonicalize = require('canonicalize'); var _canonicalize2 = _interopRequireDefault(_canonicalize);
function createMailerProofSigningData(mailerProofParams, version) {
  switch (version) {
    case "1.0":
      const canonicalized = _canonicalize2.default.call(void 0, {
        authorContentSignature: _encoding.encodeHex.call(void 0, mailerProofParams.authorContentSignature),
        expires: Math.round(mailerProofParams.expires.getTime() / 1e3),
        mailerMessagingKey: _encoding.encodeHex.call(void 0, _crypto.publicKeyToBytes.call(void 0, mailerProofParams.mailerMessagingKey))
      });
      if (!canonicalized) {
        throw new Error("content could not be canonicalized");
      }
      return canonicalized;
    default:
      throw new Error(`version ${version} is not supported`);
  }
}
async function signMailerProofParams(author, mailerProofParams, version) {
  return _chunkCDQ22VJQjs.signRawEd25519.call(void 0, author, _encoding.decodeUtf8.call(void 0, createMailerProofSigningData(mailerProofParams, version)));
}
async function createMailerProof(author, mailerProofParams, version) {
  const signature = await signMailerProofParams(author, mailerProofParams, version);
  return {
    params: mailerProofParams,
    signature,
    version
  };
}
async function verifyMailerProof(author, mailerProof) {
  return _chunkCDQ22VJQjs.verifyRawEd25519.call(void 0, 
    author,
    Buffer.from(createMailerProofSigningData(mailerProof.params, mailerProof.version)),
    mailerProof.signature
  );
}






exports.createMailerProofSigningData = createMailerProofSigningData; exports.signMailerProofParams = signMailerProofParams; exports.createMailerProof = createMailerProof; exports.verifyMailerProof = verifyMailerProof;
