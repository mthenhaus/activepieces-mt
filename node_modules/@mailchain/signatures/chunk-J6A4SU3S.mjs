import {
  getMessageHash
} from "./chunk-S45KIVEU.mjs";

// src/publickey/ethereum.ts
import { SECP256K1PublicKey } from "@mailchain/crypto";
import { encodeHex } from "@mailchain/encoding";
import isEqual from "lodash/isEqual.js";
import { ETHEREUM, addressFromPublicKey } from "@mailchain/addressing";
async function ethereumPublicKeyFromSignature(message, signature, expectedAddress) {
  const messageHash = await getMessageHash(message);
  const publicKey = await SECP256K1PublicKey.fromSignature(messageHash, signature);
  const address = await addressFromPublicKey(publicKey, ETHEREUM);
  if (!isEqual(address, expectedAddress)) {
    throw new Error(
      `inconsistent public key calculated, expected address "${encodeHex(
        expectedAddress
      )}" but actual is "${encodeHex(address)} (both hex encoded)"`
    );
  }
  return publicKey;
}

export {
  ethereumPublicKeyFromSignature
};
