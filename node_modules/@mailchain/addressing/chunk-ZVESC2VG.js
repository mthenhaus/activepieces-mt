"use strict";Object.defineProperty(exports, "__esModule", {value: true});


var _chunkOPDUNZOIjs = require('./chunk-OPDUNZOI.js');


var _chunkL7UXQ4P2js = require('./chunk-L7UXQ4P2.js');


var _chunkBAZMUWY4js = require('./chunk-BAZMUWY4.js');


var _chunkP66WQYVAjs = require('./chunk-P66WQYVA.js');


var _chunk7QWM3DS3js = require('./chunk-7QWM3DS3.js');



var _chunkQBWJRO3Pjs = require('./chunk-QBWJRO3P.js');





var _chunk7K2RPUW3js = require('./chunk-7K2RPUW3.js');

// src/checkAddressForErrors.ts
var DEFAULT_MAILCHAIN_DOMAIN = "mailchain.com";
function checkAddressForErrors(address, mailchainDomain = DEFAULT_MAILCHAIN_DOMAIN) {
  address = address.trim();
  if (!address.endsWith(`${mailchainDomain}`)) {
    return new (0, _chunkOPDUNZOIjs.BadlyFormattedAddressError)();
  }
  const parts = address.split("@");
  if (parts.length !== 2) {
    return new (0, _chunkOPDUNZOIjs.BadlyFormattedAddressError)();
  }
  const local = parts[0];
  const domain = parts[1];
  const domainParts = parts[1].split(".");
  if (domain === DEFAULT_MAILCHAIN_DOMAIN) {
    return validateMailchainProtocolAddress(local);
  } else if (domainParts.length === 3) {
    return validateIdentityProviderAddress(local, domainParts[0]);
  }
  return void 0;
}
function validateMailchainProtocolAddress(tldTrimmedAddress) {
  const mailchainAddressPattern = /^[a-zA-Z0-9-_]{2,20}$/;
  if (!mailchainAddressPattern.test(tldTrimmedAddress)) {
    return new (0, _chunkOPDUNZOIjs.IdentityProviderAddressInvalidError)();
  }
  return void 0;
}
function validateIdentityProviderAddress(address, identityProvider) {
  switch (identityProvider) {
    case _chunk7K2RPUW3js.ETHEREUM:
      if (!_chunkQBWJRO3Pjs.validateEthereumAddress.call(void 0, address) && !_chunkQBWJRO3Pjs.validateEthereumTokenOwnerAddress.call(void 0, address)) {
        return new (0, _chunkOPDUNZOIjs.IdentityProviderAddressInvalidError)();
      }
      break;
    case _chunk7K2RPUW3js.NEAR:
      if (!_chunkL7UXQ4P2js.validateNearAccountId.call(void 0, address)) {
        return new (0, _chunkOPDUNZOIjs.IdentityProviderAddressInvalidError)();
      }
      break;
    case _chunk7K2RPUW3js.TEZOS:
      if (!_chunk7QWM3DS3js.validateTezosAddress.call(void 0, address)) {
        return new (0, _chunkOPDUNZOIjs.IdentityProviderAddressInvalidError)();
      }
      break;
    case "filecoin":
      if (!_chunkBAZMUWY4js.validateFilecoinAddress.call(void 0, address)) {
        return new (0, _chunkOPDUNZOIjs.IdentityProviderAddressInvalidError)();
      }
      break;
    case _chunk7K2RPUW3js.SOLANA:
      if (!_chunkP66WQYVAjs.validateSolanaAddress.call(void 0, address)) {
        return new (0, _chunkOPDUNZOIjs.IdentityProviderAddressInvalidError)();
      }
      break;
  }
  return void 0;
}



exports.checkAddressForErrors = checkAddressForErrors;
