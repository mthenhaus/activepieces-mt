import {
  formatAddress
} from "./chunk-EDZVKNNH.mjs";
import {
  isMailchainAccountAddress
} from "./chunk-5DXGVNVQ.mjs";
import {
  createNameServiceAddress,
  parseNameServiceAddress
} from "./chunk-EDI5FTJ3.mjs";
import {
  parseWalletAddress
} from "./chunk-DGHYOYLZ.mjs";
import {
  decodeAddressByProtocol
} from "./chunk-UBQM5UAE.mjs";

// src/addressComparison.ts
function isSameAddress(a, b) {
  if (typeof a === "string")
    a = parseNameServiceAddress(a);
  if (typeof b === "string")
    b = parseNameServiceAddress(b);
  const isEqualFns = [
    domainAddressIsEqual,
    walletAddressIsEqual,
    mailchainAddressIsEqual,
    tokenAddressIsEqual,
    catchAllAddressIsEqual
  ];
  for (const isEqualFn of isEqualFns) {
    const result = isEqualFn(a, b);
    if (result !== void 0)
      return result;
  }
  throw new Error(`could not compare addresses ${formatAddress(a, "mail")} and ${formatAddress(b, "mail")}`);
}
var domainAddressIsEqual = (a, b) => {
  if (a.domain.toLowerCase() !== b.domain.toLowerCase())
    return false;
  return void 0;
};
var tokenAddressIsEqual = (a, b) => {
  const aWalletAddress = parseWalletAddress(a);
  const bWalletAddress = parseWalletAddress(b);
  if (!aWalletAddress && bWalletAddress)
    return false;
  if (aWalletAddress && !bWalletAddress)
    return false;
  if (!aWalletAddress || !bWalletAddress)
    return void 0;
  if (aWalletAddress.protocol !== bWalletAddress.protocol)
    return false;
  const aUsernameParts = a.username.split(".");
  const bUsernameParts = b.username.split(".");
  if (aUsernameParts.length !== bUsernameParts.length)
    return false;
  if (aUsernameParts.length !== 2 || bUsernameParts.length !== 2)
    return void 0;
  if (aUsernameParts[0] !== bUsernameParts[0])
    return false;
  return walletAddressIsEqual(
    createNameServiceAddress(aUsernameParts[1], a.domain),
    createNameServiceAddress(bUsernameParts[1], b.domain)
  );
};
var walletAddressIsEqual = (a, b) => {
  const aWalletAddress = parseWalletAddress(a);
  const bWalletAddress = parseWalletAddress(b);
  if (!aWalletAddress && bWalletAddress)
    return false;
  if (aWalletAddress && !bWalletAddress)
    return false;
  if (!aWalletAddress || !bWalletAddress)
    return void 0;
  if (aWalletAddress.protocol !== bWalletAddress.protocol)
    return false;
  try {
    const aDecoded = decodeAddressByProtocol(a.username, aWalletAddress.protocol).decoded;
    const bDecoded = decodeAddressByProtocol(b.username, bWalletAddress.protocol).decoded;
    return aDecoded.length === bDecoded.length && aDecoded.every((v, i) => v === bDecoded[i]);
  } catch (e) {
    return void 0;
  }
};
var mailchainAddressIsEqual = (a, b) => {
  const aIsMailchain = isMailchainAccountAddress(a);
  const bIsMailchain = isMailchainAccountAddress(b);
  if (!aIsMailchain && bIsMailchain)
    return false;
  if (aIsMailchain && !bIsMailchain)
    return false;
  if (!aIsMailchain || !bIsMailchain)
    return void 0;
  return a.username.toLowerCase() === b.username.toLowerCase();
};
var catchAllAddressIsEqual = (a, b) => {
  return a.username.toLowerCase() === b.username.toLowerCase();
};

export {
  isSameAddress
};
