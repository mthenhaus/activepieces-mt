import {
  createNameServiceAddress
} from "./chunk-EDI5FTJ3.mjs";
import {
  parseWalletAddress
} from "./chunk-DGHYOYLZ.mjs";
import {
  validateNearImplicitAccount
} from "./chunk-4HRTWHYX.mjs";
import {
  validateFilecoinAddress
} from "./chunk-MZRLAGO3.mjs";
import {
  validateSolanaAddress
} from "./chunk-X7CUXOZW.mjs";
import {
  validateTezosAddress
} from "./chunk-GGYP7UAT.mjs";
import {
  validateEthereumAddress
} from "./chunk-DGSHHA5W.mjs";
import {
  ETHEREUM,
  NEAR,
  TEZOS
} from "./chunk-53HGU7GY.mjs";

// src/addressPredicates.ts
function isMailchainAccountAddress(address) {
  const isMailchainUsername = address.username.match(/(^[a-zA-Z0-9][_\-a-zA-Z0-9]{0,18}[a-zA-Z0-9])$/) != null;
  const isJustMailchainDomain = address.domain.match(/^mailchain\.[a-z]+$/) != null;
  return isMailchainUsername && isJustMailchainDomain;
}
function isEthereumAddress(address) {
  const props = parseWalletAddress(address);
  if (props?.protocol !== ETHEREUM)
    return false;
  return validateEthereumAddress(address.username);
}
function isNearImplicitAccount(address) {
  const props = parseWalletAddress(address);
  if (props?.protocol !== NEAR)
    return false;
  return validateNearImplicitAccount(address.username);
}
function isTezosAddress(address) {
  const props = parseWalletAddress(address);
  if (props?.protocol !== TEZOS)
    return false;
  return validateTezosAddress(address.username);
}
function isFilecoinAddress(address) {
  const domainParts = address.domain.split(".");
  if (domainParts[0] !== "filecoin")
    return false;
  return validateFilecoinAddress(address.username);
}
function isTokenAddress(address) {
  const usernameParts = address.username.split(".");
  if (usernameParts.length !== 2)
    return false;
  const [tokenId, walletUsername] = usernameParts;
  if (/^\d+$/.test(tokenId) === false)
    return false;
  const walletAddress = createNameServiceAddress(walletUsername, address.domain);
  const walletProps = parseWalletAddress(walletAddress);
  if (!walletProps)
    return false;
  switch (walletProps.protocol) {
    case ETHEREUM:
      return validateEthereumAddress(walletUsername);
    default:
      return false;
  }
}
function isSolanaAddress(address) {
  const domainParts = address.domain.split(".");
  if (domainParts[0] !== "solana")
    return false;
  return validateSolanaAddress(address.username);
}

export {
  isMailchainAccountAddress,
  isEthereumAddress,
  isNearImplicitAccount,
  isTezosAddress,
  isFilecoinAddress,
  isTokenAddress,
  isSolanaAddress
};
