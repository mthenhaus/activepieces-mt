// src/protocols/ethereum/address.ts
import { KindSECP256K1 } from "@mailchain/crypto";
import { decodeHexZeroX } from "@mailchain/encoding";
async function addressFromPublicKey(publicKey) {
  if (publicKey.curve !== KindSECP256K1) {
    throw new Error(`public key must be ${KindSECP256K1}`);
  }
  const { computeAddress } = await import("@ethersproject/transactions");
  return decodeHexZeroX(computeAddress(publicKey.bytes));
}
function validateEthereumAddress(address) {
  return /^0x[a-fA-F0-9]{40}/.test(address);
}
function validateEthereumTokenOwnerAddress(address) {
  return /^[0-9]*.0x[a-fA-F0-9]{40}/.test(address);
}

export {
  addressFromPublicKey,
  validateEthereumAddress,
  validateEthereumTokenOwnerAddress
};
