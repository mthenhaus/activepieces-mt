export { isSameAddress } from './addressComparison.js';
export { formatAddress } from './addressFormatting.js';
export { addressFromPublicKey } from './addressFromPublicKey.js';
export { isEthereumAddress, isFilecoinAddress, isMailchainAccountAddress, isNearImplicitAccount, isSolanaAddress, isTezosAddress, isTokenAddress } from './addressPredicates.js';
export { ValidateAddressError, checkAddressForErrors } from './checkAddressForErrors.js';
export { decodeAddressByProtocol, encodeAddressByProtocol, encodingByProtocol } from './encoding.js';
export { BadlyFormattedAddressError, IdentityProviderAddressInvalidError } from './errors.js';
export { parseWalletAddress } from './parseWalletAddress.js';
export { ALGORAND, ALL_PROTOCOLS, ETHEREUM, EnabledBlockchainProtocol, MAILCHAIN, NEAR, ProtocolType, SOLANA, SUBSTRATE, TEZOS, isBlockchainProtocolEnabled } from './protocols/consts.js';
export { ProtocolNotSupportedError } from './protocols/errors.js';
export { NameServiceAddress as MailchainAddress, NameServiceAddress, createNameServiceAddress, isNameServiceAddress, parseNameServiceAddress } from './nameServiceAddress.js';
export { createWalletAddress } from './walletAddress.js';
import '@mailchain/crypto';
import '@mailchain/encoding';

declare const EthereumAlice: Uint8Array;
declare const EthereumBob: Uint8Array;

export { EthereumAlice, EthereumBob };
