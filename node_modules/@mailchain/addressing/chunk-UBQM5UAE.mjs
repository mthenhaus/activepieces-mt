import {
  casingByProtocol
} from "./chunk-XDKM2REL.mjs";
import {
  ALGORAND,
  ALL_PROTOCOLS,
  ETHEREUM,
  MAILCHAIN,
  NEAR,
  SOLANA,
  SUBSTRATE,
  TEZOS
} from "./chunk-53HGU7GY.mjs";

// src/encoding.ts
import { EncodingTypes, decode, encode } from "@mailchain/encoding";
function encodeAddressByProtocol(address, protocol) {
  const encoding = encodingByProtocol(protocol);
  const encoded = casingByProtocol(encode(encoding, address), protocol);
  return { encoded, encoding };
}
function decodeAddressByProtocol(address, protocol) {
  const encoding = encodingByProtocol(protocol);
  const decoded = decode(encoding, casingByProtocol(address, protocol));
  return { decoded, encoding };
}
function encodingByProtocol(protocol) {
  switch (protocol) {
    case ALGORAND:
      return EncodingTypes.Base32;
    case ETHEREUM:
      return EncodingTypes.Hex0xPrefix;
    case SUBSTRATE:
    case TEZOS:
    case SOLANA:
      return EncodingTypes.Base58;
    case MAILCHAIN:
    case NEAR:
      return EncodingTypes.Utf8;
    default:
      throw new Error(`unknown address encoding of [${protocol}]. Supported ${ALL_PROTOCOLS}.`);
  }
}

export {
  encodeAddressByProtocol,
  decodeAddressByProtocol,
  encodingByProtocol
};
