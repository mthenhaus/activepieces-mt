"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunk6IENTSWHjs = require('./chunk-6IENTSWH.js');


var _chunkKULIOUHZjs = require('./chunk-KULIOUHZ.js');



var _chunkE6OAXMPTjs = require('./chunk-E6OAXMPT.js');


var _chunkOS5AHDT5js = require('./chunk-OS5AHDT5.js');


var _chunkAXBYMAV7js = require('./chunk-AXBYMAV7.js');

// src/addressComparison.ts
function isSameAddress(a, b) {
  if (typeof a === "string")
    a = _chunkE6OAXMPTjs.parseNameServiceAddress.call(void 0, a);
  if (typeof b === "string")
    b = _chunkE6OAXMPTjs.parseNameServiceAddress.call(void 0, b);
  const isEqualFns = [
    domainAddressIsEqual,
    walletAddressIsEqual,
    mailchainAddressIsEqual,
    tokenAddressIsEqual,
    catchAllAddressIsEqual
  ];
  for (const isEqualFn of isEqualFns) {
    const result = isEqualFn(a, b);
    if (result !== void 0)
      return result;
  }
  throw new Error(`could not compare addresses ${_chunk6IENTSWHjs.formatAddress.call(void 0, a, "mail")} and ${_chunk6IENTSWHjs.formatAddress.call(void 0, b, "mail")}`);
}
var domainAddressIsEqual = (a, b) => {
  if (a.domain.toLowerCase() !== b.domain.toLowerCase())
    return false;
  return void 0;
};
var tokenAddressIsEqual = (a, b) => {
  const aWalletAddress = _chunkOS5AHDT5js.parseWalletAddress.call(void 0, a);
  const bWalletAddress = _chunkOS5AHDT5js.parseWalletAddress.call(void 0, b);
  if (!aWalletAddress && bWalletAddress)
    return false;
  if (aWalletAddress && !bWalletAddress)
    return false;
  if (!aWalletAddress || !bWalletAddress)
    return void 0;
  if (aWalletAddress.protocol !== bWalletAddress.protocol)
    return false;
  const aUsernameParts = a.username.split(".");
  const bUsernameParts = b.username.split(".");
  if (aUsernameParts.length !== bUsernameParts.length)
    return false;
  if (aUsernameParts.length !== 2 || bUsernameParts.length !== 2)
    return void 0;
  if (aUsernameParts[0] !== bUsernameParts[0])
    return false;
  return walletAddressIsEqual(
    _chunkE6OAXMPTjs.createNameServiceAddress.call(void 0, aUsernameParts[1], a.domain),
    _chunkE6OAXMPTjs.createNameServiceAddress.call(void 0, bUsernameParts[1], b.domain)
  );
};
var walletAddressIsEqual = (a, b) => {
  const aWalletAddress = _chunkOS5AHDT5js.parseWalletAddress.call(void 0, a);
  const bWalletAddress = _chunkOS5AHDT5js.parseWalletAddress.call(void 0, b);
  if (!aWalletAddress && bWalletAddress)
    return false;
  if (aWalletAddress && !bWalletAddress)
    return false;
  if (!aWalletAddress || !bWalletAddress)
    return void 0;
  if (aWalletAddress.protocol !== bWalletAddress.protocol)
    return false;
  try {
    const aDecoded = _chunkAXBYMAV7js.decodeAddressByProtocol.call(void 0, a.username, aWalletAddress.protocol).decoded;
    const bDecoded = _chunkAXBYMAV7js.decodeAddressByProtocol.call(void 0, b.username, bWalletAddress.protocol).decoded;
    return aDecoded.length === bDecoded.length && aDecoded.every((v, i) => v === bDecoded[i]);
  } catch (e) {
    return void 0;
  }
};
var mailchainAddressIsEqual = (a, b) => {
  const aIsMailchain = _chunkKULIOUHZjs.isMailchainAccountAddress.call(void 0, a);
  const bIsMailchain = _chunkKULIOUHZjs.isMailchainAccountAddress.call(void 0, b);
  if (!aIsMailchain && bIsMailchain)
    return false;
  if (aIsMailchain && !bIsMailchain)
    return false;
  if (!aIsMailchain || !bIsMailchain)
    return void 0;
  return a.username.toLowerCase() === b.username.toLowerCase();
};
var catchAllAddressIsEqual = (a, b) => {
  return a.username.toLowerCase() === b.username.toLowerCase();
};



exports.isSameAddress = isSameAddress;
