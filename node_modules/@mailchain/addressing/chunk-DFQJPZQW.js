"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunkGHT3H4ZFjs = require('./chunk-GHT3H4ZF.js');


var _chunkUV736ZKKjs = require('./chunk-UV736ZKK.js');


var _chunkZAAEECZBjs = require('./chunk-ZAAEECZB.js');





var _chunkKULIOUHZjs = require('./chunk-KULIOUHZ.js');


var _chunkE6OAXMPTjs = require('./chunk-E6OAXMPT.js');


var _chunkOS5AHDT5js = require('./chunk-OS5AHDT5.js');


var _chunkAXBYMAV7js = require('./chunk-AXBYMAV7.js');




var _chunk7K2RPUW3js = require('./chunk-7K2RPUW3.js');

// src/addressFormattingRule.ts
var humanMailchainAccount = (address) => {
  if (_chunkKULIOUHZjs.isMailchainAccountAddress.call(void 0, address)) {
    const domainParts = address.domain.split(".");
    return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, address.username, domainParts[0]);
  }
  return void 0;
};
var humanNearAddress = (address) => {
  const props = _chunkOS5AHDT5js.parseWalletAddress.call(void 0, address);
  if (props == null || props.protocol !== _chunk7K2RPUW3js.NEAR)
    return;
  const usernameParts = address.username.split(".");
  if (usernameParts.length == 1 && _chunkKULIOUHZjs.isNearImplicitAccount.call(void 0, {
    domain: address.domain,
    username: usernameParts[0]
  })) {
    return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, 
      [`${usernameParts[0].slice(0, 6)}...${usernameParts[0].slice(-4)}`, ...usernameParts.slice(1)].join("."),
      props.protocol
    );
  } else if (usernameParts.length >= 2 && _chunkKULIOUHZjs.isNearImplicitAccount.call(void 0, {
    domain: address.domain,
    username: usernameParts[0]
  }) && usernameParts[usernameParts.length - 1] !== "near") {
    return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, 
      [`${usernameParts[0].slice(0, 6)}...${usernameParts[0].slice(-4)}`, ...usernameParts.slice(1)].join("."),
      props.protocol
    );
  } else if (usernameParts.length >= 2 && usernameParts[usernameParts.length - 1] !== "near") {
    return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, address.username, props.protocol);
  }
  return address.username;
};
var humanTezosAddress = (address) => {
  if (!_chunkKULIOUHZjs.isTezosAddress.call(void 0, address))
    return void 0;
  return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, `${address.username.slice(0, 7)}...${address.username.slice(-4)}`, _chunk7K2RPUW3js.TEZOS);
};
var humanEthereumAddress = (address) => {
  if (!_chunkKULIOUHZjs.isEthereumAddress.call(void 0, address))
    return void 0;
  return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, `${address.username.slice(0, 6)}...${address.username.slice(-4)}`, _chunk7K2RPUW3js.ETHEREUM);
};
var humanWalletAddress = (address) => {
  const domainParts = address.domain.split(".");
  if (domainParts.length <= 2)
    return void 0;
  const props = _chunkOS5AHDT5js.parseWalletAddress.call(void 0, address);
  if (props == null)
    return void 0;
  try {
    _chunkAXBYMAV7js.decodeAddressByProtocol.call(void 0, address.username, props.protocol);
    return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, `${address.username.slice(0, 4)}...${address.username.slice(-4)}`, props.protocol);
  } catch (e) {
    return void 0;
  }
};
var humanNsAddress = (address) => {
  for (const desc of _chunkZAAEECZBjs.NAMESERVICE_DESCRIPTIONS) {
    const matchingNsDomain = _chunkUV736ZKKjs.matchesNameservice.call(void 0, address, desc);
    if (matchingNsDomain) {
      const nsDomainCollision = _chunkZAAEECZBjs.NAMESERVICE_DESCRIPTIONS.some(
        (nsd) => desc.name !== nsd.name && nsd.domains.includes(matchingNsDomain)
      );
      return nsDomainCollision ? `${address.username}@${desc.name}` : address.username;
    }
  }
  return void 0;
};
var humanTokenAddress = (address) => {
  const usernameParts = address.username.split(".");
  if (usernameParts.length !== 2)
    return void 0;
  const [tokenId, walletUsername] = usernameParts;
  if (/^\d+$/.test(tokenId) === false)
    return void 0;
  const walletAddress = _chunkE6OAXMPTjs.createNameServiceAddress.call(void 0, walletUsername, address.domain);
  const walletProps = _chunkOS5AHDT5js.parseWalletAddress.call(void 0, walletAddress);
  if (walletProps == null)
    return void 0;
  let walletAddressStr = void 0;
  switch (walletProps.protocol) {
    case _chunk7K2RPUW3js.ETHEREUM:
      walletAddressStr = humanEthereumAddress(walletAddress);
      break;
    case _chunk7K2RPUW3js.NEAR:
      walletAddressStr = humanNearAddress(walletAddress);
      break;
    case _chunk7K2RPUW3js.TEZOS:
      walletAddressStr = humanTezosAddress(walletAddress);
      break;
    default:
      return void 0;
  }
  if (walletAddressStr == null)
    return void 0;
  return `${tokenId}.${walletAddressStr}`;
};
var humanCatchAll = (address) => {
  const domainParts = address.domain.split(".");
  if (domainParts.length === 2) {
    return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, address.username, domainParts[0]);
  } else if (domainParts.length > 2) {
    const domainPartsToInclude = domainParts.slice(0, -2);
    return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, address.username, ...domainPartsToInclude);
  }
  return _chunkGHT3H4ZFjs.formatMailLike.call(void 0, address.username, address.domain);
};
var humanNameServiceFormatters = [
  humanMailchainAccount,
  humanNearAddress,
  humanTezosAddress,
  humanEthereumAddress,
  humanTokenAddress,
  humanNsAddress,
  humanWalletAddress,
  humanCatchAll
];



exports.humanNameServiceFormatters = humanNameServiceFormatters;
