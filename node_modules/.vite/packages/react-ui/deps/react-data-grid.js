import {
  clsx_default
} from "./chunk-MRXL75NW.js";
import {
  require_react_dom
} from "./chunk-XIMN75CZ.js";
import {
  require_jsx_runtime
} from "./chunk-F25ENYEQ.js";
import {
  require_react
} from "./chunk-GAIRWVJN.js";
import {
  __toESM
} from "./chunk-OL46QLBJ.js";

// ../../node_modules/react-data-grid/lib/bundle.js
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var import_jsx_runtime = __toESM(require_jsx_runtime());
function getColSpan(column, lastFrozenColumnIndex, args) {
  const colSpan = typeof column.colSpan === "function" ? column.colSpan(args) : 1;
  if (Number.isInteger(colSpan) && colSpan > 1 && (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)) {
    return colSpan;
  }
  return void 0;
}
function stopPropagation(event) {
  event.stopPropagation();
}
function scrollIntoView(element) {
  element == null ? void 0 : element.scrollIntoView({
    inline: "nearest",
    block: "nearest"
  });
}
function createCellEvent(event) {
  let defaultPrevented = false;
  const cellEvent = {
    ...event,
    preventGridDefault() {
      defaultPrevented = true;
    },
    isGridDefaultPrevented() {
      return defaultPrevented;
    }
  };
  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));
  return cellEvent;
}
var nonInputKeys = /* @__PURE__ */ new Set(["Unidentified", "Alt", "AltGraph", "CapsLock", "Control", "Fn", "FnLock", "Meta", "NumLock", "ScrollLock", "Shift", "Tab", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp", "End", "Home", "PageDown", "PageUp", "Insert", "ContextMenu", "Escape", "Pause", "Play", "PrintScreen", "F1", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12"]);
function isCtrlKeyHeldDown(e) {
  return (e.ctrlKey || e.metaKey) && e.key !== "Control";
}
function isDefaultCellInput(event) {
  const vKey = 86;
  if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;
  return !nonInputKeys.has(event.key);
}
function onEditorNavigation({
  key,
  target
}) {
  var _a;
  if (key === "Tab" && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {
    return ((_a = target.closest(".rdg-editor-container")) == null ? void 0 : _a.querySelectorAll("input, textarea, select").length) === 1;
  }
  return false;
}
var measuringCellClassname = "mlln6zg7-0-0-beta-47";
function renderMeasuringCells(viewportColumns) {
  return viewportColumns.map(({
    key,
    idx,
    minWidth,
    maxWidth
  }) => (0, import_jsx_runtime.jsx)("div", {
    className: measuringCellClassname,
    style: {
      gridColumnStart: idx + 1,
      minWidth,
      maxWidth
    },
    "data-measuring-cell-key": key
  }, key));
}
function isSelectedCellEditable({
  selectedPosition,
  columns,
  rows
}) {
  const column = columns[selectedPosition.idx];
  const row2 = rows[selectedPosition.rowIdx];
  return isCellEditableUtil(column, row2);
}
function isCellEditableUtil(column, row2) {
  return column.renderEditCell != null && (typeof column.editable === "function" ? column.editable(row2) : column.editable) !== false;
}
function getSelectedCellColSpan({
  rows,
  topSummaryRows,
  bottomSummaryRows,
  rowIdx,
  mainHeaderRowIdx,
  lastFrozenColumnIndex,
  column
}) {
  const topSummaryRowsCount = (topSummaryRows == null ? void 0 : topSummaryRows.length) ?? 0;
  if (rowIdx === mainHeaderRowIdx) {
    return getColSpan(column, lastFrozenColumnIndex, {
      type: "HEADER"
    });
  }
  if (topSummaryRows && rowIdx > mainHeaderRowIdx && rowIdx <= topSummaryRowsCount + mainHeaderRowIdx) {
    return getColSpan(column, lastFrozenColumnIndex, {
      type: "SUMMARY",
      row: topSummaryRows[rowIdx + topSummaryRowsCount]
    });
  }
  if (rowIdx >= 0 && rowIdx < rows.length) {
    const row2 = rows[rowIdx];
    return getColSpan(column, lastFrozenColumnIndex, {
      type: "ROW",
      row: row2
    });
  }
  if (bottomSummaryRows) {
    return getColSpan(column, lastFrozenColumnIndex, {
      type: "SUMMARY",
      row: bottomSummaryRows[rowIdx - rows.length]
    });
  }
  return void 0;
}
function getNextSelectedCellPosition({
  moveUp,
  moveNext,
  cellNavigationMode,
  columns,
  colSpanColumns,
  rows,
  topSummaryRows,
  bottomSummaryRows,
  minRowIdx,
  mainHeaderRowIdx,
  maxRowIdx,
  currentPosition: {
    idx: currentIdx,
    rowIdx: currentRowIdx
  },
  nextPosition,
  lastFrozenColumnIndex,
  isCellWithinBounds
}) {
  let {
    idx: nextIdx,
    rowIdx: nextRowIdx
  } = nextPosition;
  const columnsCount = columns.length;
  const setColSpan = (moveNext2) => {
    for (const column of colSpanColumns) {
      const colIdx = column.idx;
      if (colIdx > nextIdx) break;
      const colSpan = getSelectedCellColSpan({
        rows,
        topSummaryRows,
        bottomSummaryRows,
        rowIdx: nextRowIdx,
        mainHeaderRowIdx,
        lastFrozenColumnIndex,
        column
      });
      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {
        nextIdx = colIdx + (moveNext2 ? colSpan : 0);
        break;
      }
    }
  };
  const getParentRowIdx = (parent) => {
    return parent.level + mainHeaderRowIdx;
  };
  const setHeaderGroupColAndRowSpan = () => {
    if (moveNext) {
      const nextColumn = columns[nextIdx];
      let parent = nextColumn.parent;
      while (parent !== void 0) {
        const parentRowIdx = getParentRowIdx(parent);
        if (nextRowIdx === parentRowIdx) {
          nextIdx = parent.idx + parent.colSpan;
          break;
        }
        parent = parent.parent;
      }
    } else if (moveUp) {
      const nextColumn = columns[nextIdx];
      let parent = nextColumn.parent;
      let found = false;
      while (parent !== void 0) {
        const parentRowIdx = getParentRowIdx(parent);
        if (nextRowIdx >= parentRowIdx) {
          nextIdx = parent.idx;
          nextRowIdx = parentRowIdx;
          found = true;
          break;
        }
        parent = parent.parent;
      }
      if (!found) {
        nextIdx = currentIdx;
        nextRowIdx = currentRowIdx;
      }
    }
  };
  if (isCellWithinBounds(nextPosition)) {
    setColSpan(moveNext);
    if (nextRowIdx < mainHeaderRowIdx) {
      setHeaderGroupColAndRowSpan();
    }
  }
  if (cellNavigationMode === "CHANGE_ROW") {
    const isAfterLastColumn = nextIdx === columnsCount;
    const isBeforeFirstColumn = nextIdx === -1;
    if (isAfterLastColumn) {
      const isLastRow = nextRowIdx === maxRowIdx;
      if (!isLastRow) {
        nextIdx = 0;
        nextRowIdx += 1;
      }
    } else if (isBeforeFirstColumn) {
      const isFirstRow = nextRowIdx === minRowIdx;
      if (!isFirstRow) {
        nextRowIdx -= 1;
        nextIdx = columnsCount - 1;
      }
      setColSpan(false);
    }
  }
  if (nextRowIdx < mainHeaderRowIdx) {
    const nextColumn = columns[nextIdx];
    let parent = nextColumn.parent;
    const nextParentRowIdx = nextRowIdx;
    nextRowIdx = mainHeaderRowIdx;
    while (parent !== void 0) {
      const parentRowIdx = getParentRowIdx(parent);
      if (parentRowIdx >= nextParentRowIdx) {
        nextRowIdx = parentRowIdx;
        nextIdx = parent.idx;
      }
      parent = parent.parent;
    }
  }
  return {
    idx: nextIdx,
    rowIdx: nextRowIdx
  };
}
function canExitGrid({
  maxColIdx,
  minRowIdx,
  maxRowIdx,
  selectedPosition: {
    rowIdx,
    idx
  },
  shiftKey
}) {
  const atLastCellInRow = idx === maxColIdx;
  const atFirstCellInRow = idx === 0;
  const atLastRow = rowIdx === maxRowIdx;
  const atFirstRow = rowIdx === minRowIdx;
  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;
}
var cell = "cj343x07-0-0-beta-47";
var cellClassname = `rdg-cell ${cell}`;
var cellFrozen = "csofj7r7-0-0-beta-47";
var cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;
function getRowStyle(rowIdx) {
  return {
    "--rdg-grid-row-start": rowIdx
  };
}
function getHeaderCellStyle(column, rowIdx, rowSpan) {
  const gridRowEnd = rowIdx + 1;
  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;
  if (column.parent === void 0) {
    return {
      insetBlockStart: 0,
      gridRowStart: 1,
      gridRowEnd,
      paddingBlockStart
    };
  }
  return {
    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,
    gridRowStart: gridRowEnd - rowSpan,
    gridRowEnd,
    paddingBlockStart
  };
}
function getCellStyle(column, colSpan = 1) {
  const index = column.idx + 1;
  return {
    gridColumnStart: index,
    gridColumnEnd: index + colSpan,
    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : void 0
  };
}
function getCellClassname(column, ...extraClasses) {
  return clsx_default(cellClassname, ...extraClasses, column.frozen && cellFrozenClassname);
}
var {
  min,
  max,
  floor,
  sign,
  abs
} = Math;
function assertIsValidKeyGetter(keyGetter) {
  if (typeof keyGetter !== "function") {
    throw new Error("Please specify the rowKeyGetter prop to use selection");
  }
}
function clampColumnWidth(width, {
  minWidth,
  maxWidth
}) {
  width = max(width, minWidth);
  if (typeof maxWidth === "number" && maxWidth >= minWidth) {
    return min(width, maxWidth);
  }
  return width;
}
function getHeaderCellRowSpan(column, rowIdx) {
  return column.parent === void 0 ? rowIdx : column.level - column.parent.level;
}
var checkbox = "c1bn88vv7-0-0-beta-47";
var checkboxClassname = `rdg-checkbox-input ${checkbox}`;
function renderCheckbox({
  onChange,
  indeterminate,
  ...props
}) {
  function handleChange(e) {
    onChange(e.target.checked, e.nativeEvent.shiftKey);
  }
  return (0, import_jsx_runtime.jsx)("input", {
    ref: (el) => {
      if (el) {
        el.indeterminate = indeterminate === true;
      }
    },
    type: "checkbox",
    className: checkboxClassname,
    onChange: handleChange,
    ...props
  });
}
var groupCellContent = "g1s9ylgp7-0-0-beta-47";
var groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;
var caret = "cz54e4y7-0-0-beta-47";
var caretClassname = `rdg-caret ${caret}`;
function renderToggleGroup(props) {
  return (0, import_jsx_runtime.jsx)(ToggleGroup, {
    ...props
  });
}
function ToggleGroup({
  groupKey,
  isExpanded,
  tabIndex,
  toggleGroup
}) {
  function handleKeyDown({
    key
  }) {
    if (key === "Enter") {
      toggleGroup();
    }
  }
  const d = isExpanded ? "M1 1 L 7 7 L 13 1" : "M1 7 L 7 1 L 13 7";
  return (0, import_jsx_runtime.jsxs)("span", {
    className: groupCellContentClassname,
    tabIndex,
    onKeyDown: handleKeyDown,
    children: [groupKey, (0, import_jsx_runtime.jsx)("svg", {
      viewBox: "0 0 14 8",
      width: "14",
      height: "8",
      className: caretClassname,
      "aria-hidden": true,
      children: (0, import_jsx_runtime.jsx)("path", {
        d
      })
    })]
  });
}
function renderValue(props) {
  try {
    return props.row[props.column.key];
  } catch {
    return null;
  }
}
var DataGridDefaultRenderersContext = (0, import_react.createContext)(void 0);
var DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;
function useDefaultRenderers() {
  return (0, import_react.useContext)(DataGridDefaultRenderersContext);
}
function SelectCellFormatter({
  value,
  tabIndex,
  indeterminate,
  disabled,
  onChange,
  "aria-label": ariaLabel,
  "aria-labelledby": ariaLabelledBy
}) {
  const renderCheckbox2 = useDefaultRenderers().renderCheckbox;
  return renderCheckbox2({
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    tabIndex,
    indeterminate,
    disabled,
    checked: value,
    onChange
  });
}
var RowSelectionContext = (0, import_react.createContext)(void 0);
var RowSelectionProvider = RowSelectionContext.Provider;
var RowSelectionChangeContext = (0, import_react.createContext)(void 0);
var RowSelectionChangeProvider = RowSelectionChangeContext.Provider;
function useRowSelection() {
  const rowSelectionContext = (0, import_react.useContext)(RowSelectionContext);
  const rowSelectionChangeContext = (0, import_react.useContext)(RowSelectionChangeContext);
  if (rowSelectionContext === void 0 || rowSelectionChangeContext === void 0) {
    throw new Error("useRowSelection must be used within DataGrid cells");
  }
  return {
    isRowSelectionDisabled: rowSelectionContext.isRowSelectionDisabled,
    isRowSelected: rowSelectionContext.isRowSelected,
    onRowSelectionChange: rowSelectionChangeContext
  };
}
var HeaderRowSelectionContext = (0, import_react.createContext)(void 0);
var HeaderRowSelectionProvider = HeaderRowSelectionContext.Provider;
var HeaderRowSelectionChangeContext = (0, import_react.createContext)(void 0);
var HeaderRowSelectionChangeProvider = HeaderRowSelectionChangeContext.Provider;
function useHeaderRowSelection() {
  const headerRowSelectionContext = (0, import_react.useContext)(HeaderRowSelectionContext);
  const headerRowSelectionChangeContext = (0, import_react.useContext)(HeaderRowSelectionChangeContext);
  if (headerRowSelectionContext === void 0 || headerRowSelectionChangeContext === void 0) {
    throw new Error("useHeaderRowSelection must be used within DataGrid cells");
  }
  return {
    isIndeterminate: headerRowSelectionContext.isIndeterminate,
    isRowSelected: headerRowSelectionContext.isRowSelected,
    onRowSelectionChange: headerRowSelectionChangeContext
  };
}
var SELECT_COLUMN_KEY = "rdg-select-column";
function HeaderRenderer(props) {
  const {
    isIndeterminate,
    isRowSelected,
    onRowSelectionChange
  } = useHeaderRowSelection();
  return (0, import_jsx_runtime.jsx)(SelectCellFormatter, {
    "aria-label": "Select All",
    tabIndex: props.tabIndex,
    indeterminate: isIndeterminate,
    value: isRowSelected,
    onChange: (checked) => {
      onRowSelectionChange({
        checked: isIndeterminate ? false : checked
      });
    }
  });
}
function SelectFormatter(props) {
  const {
    isRowSelectionDisabled,
    isRowSelected,
    onRowSelectionChange
  } = useRowSelection();
  return (0, import_jsx_runtime.jsx)(SelectCellFormatter, {
    "aria-label": "Select",
    tabIndex: props.tabIndex,
    disabled: isRowSelectionDisabled,
    value: isRowSelected,
    onChange: (checked, isShiftClick) => {
      onRowSelectionChange({
        row: props.row,
        checked,
        isShiftClick
      });
    }
  });
}
function SelectGroupFormatter(props) {
  const {
    isRowSelected,
    onRowSelectionChange
  } = useRowSelection();
  return (0, import_jsx_runtime.jsx)(SelectCellFormatter, {
    "aria-label": "Select Group",
    tabIndex: props.tabIndex,
    value: isRowSelected,
    onChange: (checked) => {
      onRowSelectionChange({
        row: props.row,
        checked,
        isShiftClick: false
      });
    }
  });
}
var SelectColumn = {
  key: SELECT_COLUMN_KEY,
  name: "",
  width: 35,
  minWidth: 35,
  maxWidth: 35,
  resizable: false,
  sortable: false,
  frozen: true,
  renderHeaderCell(props) {
    return (0, import_jsx_runtime.jsx)(HeaderRenderer, {
      ...props
    });
  },
  renderCell(props) {
    return (0, import_jsx_runtime.jsx)(SelectFormatter, {
      ...props
    });
  },
  renderGroupCell(props) {
    return (0, import_jsx_runtime.jsx)(SelectGroupFormatter, {
      ...props
    });
  }
};
var DEFAULT_COLUMN_WIDTH = "auto";
var DEFAULT_COLUMN_MIN_WIDTH = 50;
function useCalculatedColumns({
  rawColumns,
  defaultColumnOptions,
  getColumnWidth,
  viewportWidth,
  scrollLeft,
  enableVirtualization
}) {
  const defaultWidth = (defaultColumnOptions == null ? void 0 : defaultColumnOptions.width) ?? DEFAULT_COLUMN_WIDTH;
  const defaultMinWidth = (defaultColumnOptions == null ? void 0 : defaultColumnOptions.minWidth) ?? DEFAULT_COLUMN_MIN_WIDTH;
  const defaultMaxWidth = (defaultColumnOptions == null ? void 0 : defaultColumnOptions.maxWidth) ?? void 0;
  const defaultCellRenderer = (defaultColumnOptions == null ? void 0 : defaultColumnOptions.renderCell) ?? renderValue;
  const defaultSortable = (defaultColumnOptions == null ? void 0 : defaultColumnOptions.sortable) ?? false;
  const defaultResizable = (defaultColumnOptions == null ? void 0 : defaultColumnOptions.resizable) ?? false;
  const defaultDraggable = (defaultColumnOptions == null ? void 0 : defaultColumnOptions.draggable) ?? false;
  const {
    columns,
    colSpanColumns,
    lastFrozenColumnIndex,
    headerRowsCount
  } = (0, import_react.useMemo)(() => {
    let lastFrozenColumnIndex2 = -1;
    let headerRowsCount2 = 1;
    const columns2 = [];
    collectColumns(rawColumns, 1);
    function collectColumns(rawColumns2, level, parent) {
      for (const rawColumn of rawColumns2) {
        if ("children" in rawColumn) {
          const calculatedColumnParent = {
            name: rawColumn.name,
            parent,
            idx: -1,
            colSpan: 0,
            level: 0,
            headerCellClass: rawColumn.headerCellClass
          };
          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);
          continue;
        }
        const frozen = rawColumn.frozen ?? false;
        const column = {
          ...rawColumn,
          parent,
          idx: 0,
          level: 0,
          frozen,
          width: rawColumn.width ?? defaultWidth,
          minWidth: rawColumn.minWidth ?? defaultMinWidth,
          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,
          sortable: rawColumn.sortable ?? defaultSortable,
          resizable: rawColumn.resizable ?? defaultResizable,
          draggable: rawColumn.draggable ?? defaultDraggable,
          renderCell: rawColumn.renderCell ?? defaultCellRenderer
        };
        columns2.push(column);
        if (frozen) {
          lastFrozenColumnIndex2++;
        }
        if (level > headerRowsCount2) {
          headerRowsCount2 = level;
        }
      }
    }
    columns2.sort(({
      key: aKey,
      frozen: frozenA
    }, {
      key: bKey,
      frozen: frozenB
    }) => {
      if (aKey === SELECT_COLUMN_KEY) return -1;
      if (bKey === SELECT_COLUMN_KEY) return 1;
      if (frozenA) {
        if (frozenB) return 0;
        return -1;
      }
      if (frozenB) return 1;
      return 0;
    });
    const colSpanColumns2 = [];
    columns2.forEach((column, idx) => {
      column.idx = idx;
      updateColumnParent(column, idx, 0);
      if (column.colSpan != null) {
        colSpanColumns2.push(column);
      }
    });
    return {
      columns: columns2,
      colSpanColumns: colSpanColumns2,
      lastFrozenColumnIndex: lastFrozenColumnIndex2,
      headerRowsCount: headerRowsCount2
    };
  }, [rawColumns, defaultWidth, defaultMinWidth, defaultMaxWidth, defaultCellRenderer, defaultResizable, defaultSortable, defaultDraggable]);
  const {
    templateColumns,
    layoutCssVars,
    totalFrozenColumnWidth,
    columnMetrics
  } = (0, import_react.useMemo)(() => {
    const columnMetrics2 = /* @__PURE__ */ new Map();
    let left = 0;
    let totalFrozenColumnWidth2 = 0;
    const templateColumns2 = [];
    for (const column of columns) {
      let width = getColumnWidth(column);
      if (typeof width === "number") {
        width = clampColumnWidth(width, column);
      } else {
        width = column.minWidth;
      }
      templateColumns2.push(`${width}px`);
      columnMetrics2.set(column, {
        width,
        left
      });
      left += width;
    }
    if (lastFrozenColumnIndex !== -1) {
      const columnMetric = columnMetrics2.get(columns[lastFrozenColumnIndex]);
      totalFrozenColumnWidth2 = columnMetric.left + columnMetric.width;
    }
    const layoutCssVars2 = {};
    for (let i = 0; i <= lastFrozenColumnIndex; i++) {
      const column = columns[i];
      layoutCssVars2[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics2.get(column).left}px`;
    }
    return {
      templateColumns: templateColumns2,
      layoutCssVars: layoutCssVars2,
      totalFrozenColumnWidth: totalFrozenColumnWidth2,
      columnMetrics: columnMetrics2
    };
  }, [getColumnWidth, columns, lastFrozenColumnIndex]);
  const [colOverscanStartIdx, colOverscanEndIdx] = (0, import_react.useMemo)(() => {
    if (!enableVirtualization) {
      return [0, columns.length - 1];
    }
    const viewportLeft = scrollLeft + totalFrozenColumnWidth;
    const viewportRight = scrollLeft + viewportWidth;
    const lastColIdx = columns.length - 1;
    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);
    if (viewportLeft >= viewportRight) {
      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];
    }
    let colVisibleStartIdx = firstUnfrozenColumnIdx;
    while (colVisibleStartIdx < lastColIdx) {
      const {
        left,
        width
      } = columnMetrics.get(columns[colVisibleStartIdx]);
      if (left + width > viewportLeft) {
        break;
      }
      colVisibleStartIdx++;
    }
    let colVisibleEndIdx = colVisibleStartIdx;
    while (colVisibleEndIdx < lastColIdx) {
      const {
        left,
        width
      } = columnMetrics.get(columns[colVisibleEndIdx]);
      if (left + width >= viewportRight) {
        break;
      }
      colVisibleEndIdx++;
    }
    const colOverscanStartIdx2 = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);
    const colOverscanEndIdx2 = min(lastColIdx, colVisibleEndIdx + 1);
    return [colOverscanStartIdx2, colOverscanEndIdx2];
  }, [columnMetrics, columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth, enableVirtualization]);
  return {
    columns,
    colSpanColumns,
    colOverscanStartIdx,
    colOverscanEndIdx,
    templateColumns,
    layoutCssVars,
    headerRowsCount,
    lastFrozenColumnIndex,
    totalFrozenColumnWidth
  };
}
function updateColumnParent(column, index, level) {
  if (level < column.level) {
    column.level = level;
  }
  if (column.parent !== void 0) {
    const {
      parent
    } = column;
    if (parent.idx === -1) {
      parent.idx = index;
    }
    parent.colSpan += 1;
    updateColumnParent(parent, index, level - 1);
  }
}
var useLayoutEffect = typeof window === "undefined" ? import_react.useEffect : import_react.useLayoutEffect;
function useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize) {
  const prevGridWidthRef = (0, import_react.useRef)(gridWidth);
  const columnsCanFlex = columns.length === viewportColumns.length;
  const ignorePreviouslyMeasuredColumns = columnsCanFlex && gridWidth !== prevGridWidthRef.current;
  const newTemplateColumns = [...templateColumns];
  const columnsToMeasure = [];
  for (const {
    key,
    idx,
    width
  } of viewportColumns) {
    if (typeof width === "string" && (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) && !resizedColumnWidths.has(key)) {
      newTemplateColumns[idx] = width;
      columnsToMeasure.push(key);
    }
  }
  const gridTemplateColumns = newTemplateColumns.join(" ");
  useLayoutEffect(() => {
    prevGridWidthRef.current = gridWidth;
    updateMeasuredWidths(columnsToMeasure);
  });
  function updateMeasuredWidths(columnsToMeasure2) {
    if (columnsToMeasure2.length === 0) return;
    setMeasuredColumnWidths((measuredColumnWidths2) => {
      const newMeasuredColumnWidths = new Map(measuredColumnWidths2);
      let hasChanges = false;
      for (const key of columnsToMeasure2) {
        const measuredWidth = measureColumnWidth(gridRef, key);
        hasChanges || (hasChanges = measuredWidth !== measuredColumnWidths2.get(key));
        if (measuredWidth === void 0) {
          newMeasuredColumnWidths.delete(key);
        } else {
          newMeasuredColumnWidths.set(key, measuredWidth);
        }
      }
      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths2;
    });
  }
  function handleColumnResize(column, nextWidth) {
    const {
      key: resizingKey
    } = column;
    const newTemplateColumns2 = [...templateColumns];
    const columnsToMeasure2 = [];
    for (const {
      key,
      idx,
      width
    } of viewportColumns) {
      if (resizingKey === key) {
        const width2 = typeof nextWidth === "number" ? `${nextWidth}px` : nextWidth;
        newTemplateColumns2[idx] = width2;
      } else if (columnsCanFlex && typeof width === "string" && !resizedColumnWidths.has(key)) {
        newTemplateColumns2[idx] = width;
        columnsToMeasure2.push(key);
      }
    }
    gridRef.current.style.gridTemplateColumns = newTemplateColumns2.join(" ");
    const measuredWidth = typeof nextWidth === "number" ? nextWidth : measureColumnWidth(gridRef, resizingKey);
    (0, import_react_dom.flushSync)(() => {
      setResizedColumnWidths((resizedColumnWidths2) => {
        const newResizedColumnWidths = new Map(resizedColumnWidths2);
        newResizedColumnWidths.set(resizingKey, measuredWidth);
        return newResizedColumnWidths;
      });
      updateMeasuredWidths(columnsToMeasure2);
    });
    onColumnResize == null ? void 0 : onColumnResize(column.idx, measuredWidth);
  }
  return {
    gridTemplateColumns,
    handleColumnResize
  };
}
function measureColumnWidth(gridRef, key) {
  var _a;
  const selector = `[data-measuring-cell-key="${CSS.escape(key)}"]`;
  const measuringCell = (_a = gridRef.current) == null ? void 0 : _a.querySelector(selector);
  return measuringCell == null ? void 0 : measuringCell.getBoundingClientRect().width;
}
function useGridDimensions() {
  const gridRef = (0, import_react.useRef)(null);
  const [inlineSize, setInlineSize] = (0, import_react.useState)(1);
  const [blockSize, setBlockSize] = (0, import_react.useState)(1);
  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = (0, import_react.useState)(0);
  useLayoutEffect(() => {
    const {
      ResizeObserver
    } = window;
    if (ResizeObserver == null) return;
    const {
      clientWidth,
      clientHeight,
      offsetWidth,
      offsetHeight
    } = gridRef.current;
    const {
      width,
      height
    } = gridRef.current.getBoundingClientRect();
    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;
    const initialWidth = width - offsetWidth + clientWidth;
    const initialHeight = height - initialHorizontalScrollbarHeight;
    setInlineSize(initialWidth);
    setBlockSize(initialHeight);
    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);
    const resizeObserver = new ResizeObserver((entries) => {
      const size = entries[0].contentBoxSize[0];
      const {
        clientHeight: clientHeight2,
        offsetHeight: offsetHeight2
      } = gridRef.current;
      (0, import_react_dom.flushSync)(() => {
        setInlineSize(size.inlineSize);
        setBlockSize(size.blockSize);
        setHorizontalScrollbarHeight(offsetHeight2 - clientHeight2);
      });
    });
    resizeObserver.observe(gridRef.current);
    return () => {
      resizeObserver.disconnect();
    };
  }, []);
  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight];
}
function useLatestFunc(fn) {
  const ref = (0, import_react.useRef)(fn);
  (0, import_react.useEffect)(() => {
    ref.current = fn;
  });
  const callbackFn = (0, import_react.useCallback)((...args) => {
    ref.current(...args);
  }, []);
  return fn ? callbackFn : fn;
}
function useRovingTabIndex(isSelected) {
  const [isChildFocused, setIsChildFocused] = (0, import_react.useState)(false);
  if (isChildFocused && !isSelected) {
    setIsChildFocused(false);
  }
  function onFocus(event) {
    if (event.target !== event.currentTarget) {
      setIsChildFocused(true);
    }
  }
  const isFocusable = isSelected && !isChildFocused;
  return {
    tabIndex: isFocusable ? 0 : -1,
    childTabIndex: isSelected ? 0 : -1,
    onFocus: isSelected ? onFocus : void 0
  };
}
function useViewportColumns({
  columns,
  colSpanColumns,
  rows,
  topSummaryRows,
  bottomSummaryRows,
  colOverscanStartIdx,
  colOverscanEndIdx,
  lastFrozenColumnIndex,
  rowOverscanStartIdx,
  rowOverscanEndIdx
}) {
  const startIdx = (0, import_react.useMemo)(() => {
    if (colOverscanStartIdx === 0) return 0;
    let startIdx2 = colOverscanStartIdx;
    const updateStartIdx = (colIdx, colSpan) => {
      if (colSpan !== void 0 && colIdx + colSpan > colOverscanStartIdx) {
        startIdx2 = colIdx;
        return true;
      }
      return false;
    };
    for (const column of colSpanColumns) {
      const colIdx = column.idx;
      if (colIdx >= startIdx2) break;
      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {
        type: "HEADER"
      }))) {
        break;
      }
      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {
        const row2 = rows[rowIdx];
        if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {
          type: "ROW",
          row: row2
        }))) {
          break;
        }
      }
      if (topSummaryRows != null) {
        for (const row2 of topSummaryRows) {
          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {
            type: "SUMMARY",
            row: row2
          }))) {
            break;
          }
        }
      }
      if (bottomSummaryRows != null) {
        for (const row2 of bottomSummaryRows) {
          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {
            type: "SUMMARY",
            row: row2
          }))) {
            break;
          }
        }
      }
    }
    return startIdx2;
  }, [rowOverscanStartIdx, rowOverscanEndIdx, rows, topSummaryRows, bottomSummaryRows, colOverscanStartIdx, lastFrozenColumnIndex, colSpanColumns]);
  return (0, import_react.useMemo)(() => {
    const viewportColumns = [];
    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {
      const column = columns[colIdx];
      if (colIdx < startIdx && !column.frozen) continue;
      viewportColumns.push(column);
    }
    return viewportColumns;
  }, [startIdx, colOverscanEndIdx, columns]);
}
function useViewportRows({
  rows,
  rowHeight,
  clientHeight,
  scrollTop,
  enableVirtualization
}) {
  const {
    totalRowHeight,
    gridTemplateRows,
    getRowTop,
    getRowHeight,
    findRowIdx
  } = (0, import_react.useMemo)(() => {
    if (typeof rowHeight === "number") {
      return {
        totalRowHeight: rowHeight * rows.length,
        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,
        getRowTop: (rowIdx) => rowIdx * rowHeight,
        getRowHeight: () => rowHeight,
        findRowIdx: (offset) => floor(offset / rowHeight)
      };
    }
    let totalRowHeight2 = 0;
    let gridTemplateRows2 = " ";
    const rowPositions = rows.map((row2) => {
      const currentRowHeight = rowHeight(row2);
      const position = {
        top: totalRowHeight2,
        height: currentRowHeight
      };
      gridTemplateRows2 += `${currentRowHeight}px `;
      totalRowHeight2 += currentRowHeight;
      return position;
    });
    const validateRowIdx = (rowIdx) => {
      return max(0, min(rows.length - 1, rowIdx));
    };
    return {
      totalRowHeight: totalRowHeight2,
      gridTemplateRows: gridTemplateRows2,
      getRowTop: (rowIdx) => rowPositions[validateRowIdx(rowIdx)].top,
      getRowHeight: (rowIdx) => rowPositions[validateRowIdx(rowIdx)].height,
      findRowIdx(offset) {
        let start = 0;
        let end = rowPositions.length - 1;
        while (start <= end) {
          const middle = start + floor((end - start) / 2);
          const currentOffset = rowPositions[middle].top;
          if (currentOffset === offset) return middle;
          if (currentOffset < offset) {
            start = middle + 1;
          } else if (currentOffset > offset) {
            end = middle - 1;
          }
          if (start > end) return end;
        }
        return 0;
      }
    };
  }, [rowHeight, rows]);
  let rowOverscanStartIdx = 0;
  let rowOverscanEndIdx = rows.length - 1;
  if (enableVirtualization) {
    const overscanThreshold = 4;
    const rowVisibleStartIdx = findRowIdx(scrollTop);
    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);
    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);
    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);
  }
  return {
    rowOverscanStartIdx,
    rowOverscanEndIdx,
    totalRowHeight,
    gridTemplateRows,
    getRowTop,
    getRowHeight,
    findRowIdx
  };
}
var cellDragHandle = "c1w9bbhr7-0-0-beta-47";
var cellDragHandleFrozenClassname = "c1creorc7-0-0-beta-47";
var cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;
function DragHandle({
  gridRowStart,
  rows,
  column,
  columnWidth,
  maxColIdx,
  isLastRow,
  selectedPosition,
  latestDraggedOverRowIdx,
  isCellEditable,
  onRowsChange,
  onFill,
  onClick,
  setDragging,
  setDraggedOverRowIdx
}) {
  const {
    idx,
    rowIdx
  } = selectedPosition;
  function handleMouseDown(event) {
    event.preventDefault();
    if (event.buttons !== 1) return;
    setDragging(true);
    window.addEventListener("mouseover", onMouseOver);
    window.addEventListener("mouseup", onMouseUp);
    function onMouseOver(event2) {
      if (event2.buttons !== 1) onMouseUp();
    }
    function onMouseUp() {
      window.removeEventListener("mouseover", onMouseOver);
      window.removeEventListener("mouseup", onMouseUp);
      setDragging(false);
      handleDragEnd();
    }
  }
  function handleDragEnd() {
    const overRowIdx = latestDraggedOverRowIdx.current;
    if (overRowIdx === void 0) return;
    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;
    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;
    updateRows(startRowIndex, endRowIndex);
    setDraggedOverRowIdx(void 0);
  }
  function handleDoubleClick(event) {
    event.stopPropagation();
    updateRows(rowIdx + 1, rows.length);
  }
  function updateRows(startRowIdx, endRowIdx) {
    const sourceRow = rows[rowIdx];
    const updatedRows = [...rows];
    const indexes = [];
    for (let i = startRowIdx; i < endRowIdx; i++) {
      if (isCellEditable({
        rowIdx: i,
        idx
      })) {
        const updatedRow = onFill({
          columnKey: column.key,
          sourceRow,
          targetRow: rows[i]
        });
        if (updatedRow !== rows[i]) {
          updatedRows[i] = updatedRow;
          indexes.push(i);
        }
      }
    }
    if (indexes.length > 0) {
      onRowsChange == null ? void 0 : onRowsChange(updatedRows, {
        indexes,
        column
      });
    }
  }
  function getStyle() {
    var _a;
    const colSpan = ((_a = column.colSpan) == null ? void 0 : _a.call(column, {
      type: "ROW",
      row: rows[rowIdx]
    })) ?? 1;
    const {
      insetInlineStart,
      ...style
    } = getCellStyle(column, colSpan);
    const marginEnd = "calc(var(--rdg-drag-handle-size) * -0.5 + 1px)";
    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;
    return {
      ...style,
      gridRowStart,
      marginInlineEnd: isLastColumn ? void 0 : marginEnd,
      marginBlockEnd: isLastRow ? void 0 : marginEnd,
      insetInlineStart: insetInlineStart ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)` : void 0
    };
  }
  return (0, import_jsx_runtime.jsx)("div", {
    style: getStyle(),
    className: clsx_default(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname),
    onClick,
    onMouseDown: handleMouseDown,
    onDoubleClick: handleDoubleClick
  });
}
var cellEditing = "cis5rrm7-0-0-beta-47";
function EditCell({
  column,
  colSpan,
  row: row2,
  rowIdx,
  onRowChange,
  closeEditor,
  onKeyDown,
  navigate
}) {
  var _a, _b, _c;
  const frameRequestRef = (0, import_react.useRef)(void 0);
  const commitOnOutsideClick = ((_a = column.editorOptions) == null ? void 0 : _a.commitOnOutsideClick) !== false;
  const commitOnOutsideMouseDown = useLatestFunc(() => {
    onClose(true, false);
  });
  (0, import_react.useEffect)(() => {
    if (!commitOnOutsideClick) return;
    function onWindowCaptureMouseDown() {
      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);
    }
    addEventListener("mousedown", onWindowCaptureMouseDown, {
      capture: true
    });
    return () => {
      removeEventListener("mousedown", onWindowCaptureMouseDown, {
        capture: true
      });
      cancelFrameRequest();
    };
  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);
  function cancelFrameRequest() {
    cancelAnimationFrame(frameRequestRef.current);
  }
  function handleKeyDown(event) {
    if (onKeyDown) {
      const cellEvent = createCellEvent(event);
      onKeyDown({
        mode: "EDIT",
        row: row2,
        column,
        rowIdx,
        navigate() {
          navigate(event);
        },
        onClose
      }, cellEvent);
      if (cellEvent.isGridDefaultPrevented()) return;
    }
    if (event.key === "Escape") {
      onClose();
    } else if (event.key === "Enter") {
      onClose(true);
    } else if (onEditorNavigation(event)) {
      navigate(event);
    }
  }
  function onClose(commitChanges = false, shouldFocusCell = true) {
    if (commitChanges) {
      onRowChange(row2, true, shouldFocusCell);
    } else {
      closeEditor(shouldFocusCell);
    }
  }
  function onEditorRowChange(row3, commitChangesAndFocus = false) {
    onRowChange(row3, commitChangesAndFocus, commitChangesAndFocus);
  }
  const {
    cellClass
  } = column;
  const className = getCellClassname(column, "rdg-editor-container", typeof cellClass === "function" ? cellClass(row2) : cellClass, !((_b = column.editorOptions) == null ? void 0 : _b.displayCellContent) && cellEditing);
  return (0, import_jsx_runtime.jsx)("div", {
    role: "gridcell",
    "aria-colindex": column.idx + 1,
    "aria-colspan": colSpan,
    "aria-selected": true,
    className,
    style: getCellStyle(column, colSpan),
    onKeyDown: handleKeyDown,
    onMouseDownCapture: cancelFrameRequest,
    children: column.renderEditCell != null && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [column.renderEditCell({
        column,
        row: row2,
        rowIdx,
        onRowChange: onEditorRowChange,
        onClose
      }), ((_c = column.editorOptions) == null ? void 0 : _c.displayCellContent) && column.renderCell({
        column,
        row: row2,
        rowIdx,
        isCellEditable: true,
        tabIndex: -1,
        onRowChange: onEditorRowChange
      })]
    })
  });
}
function GroupedColumnHeaderCell({
  column,
  rowIdx,
  isCellSelected,
  selectCell
}) {
  const {
    tabIndex,
    onFocus
  } = useRovingTabIndex(isCellSelected);
  const {
    colSpan
  } = column;
  const rowSpan = getHeaderCellRowSpan(column, rowIdx);
  const index = column.idx + 1;
  function onClick() {
    selectCell({
      idx: column.idx,
      rowIdx
    });
  }
  return (0, import_jsx_runtime.jsx)("div", {
    role: "columnheader",
    "aria-colindex": index,
    "aria-colspan": colSpan,
    "aria-rowspan": rowSpan,
    "aria-selected": isCellSelected,
    tabIndex,
    className: clsx_default(cellClassname, column.headerCellClass),
    style: {
      ...getHeaderCellStyle(column, rowIdx, rowSpan),
      gridColumnStart: index,
      gridColumnEnd: index + colSpan
    },
    onFocus,
    onClick,
    children: column.name
  });
}
var headerSortCellClassname = "h44jtk67-0-0-beta-47";
var headerSortName = "hcgkhxz7-0-0-beta-47";
var headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;
function renderHeaderCell({
  column,
  sortDirection,
  priority
}) {
  if (!column.sortable) return column.name;
  return (0, import_jsx_runtime.jsx)(SortableHeaderCell, {
    sortDirection,
    priority,
    children: column.name
  });
}
function SortableHeaderCell({
  sortDirection,
  priority,
  children
}) {
  const renderSortStatus2 = useDefaultRenderers().renderSortStatus;
  return (0, import_jsx_runtime.jsxs)("span", {
    className: headerSortCellClassname,
    children: [(0, import_jsx_runtime.jsx)("span", {
      className: headerSortNameClassname,
      children
    }), (0, import_jsx_runtime.jsx)("span", {
      children: renderSortStatus2({
        sortDirection,
        priority
      })
    })]
  });
}
var cellSortableClassname = "c6l2wv17-0-0-beta-47";
var cellResizable = "c1kqdw7y7-0-0-beta-47";
var cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;
var resizeHandleClassname = "r1y6ywlx7-0-0-beta-47";
var cellDraggableClassname = "rdg-cell-draggable";
var cellDragging = "c1bezg5o7-0-0-beta-47";
var cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;
var cellOver = "c1vc96037-0-0-beta-47";
var cellOverClassname = `rdg-cell-drag-over ${cellOver}`;
function HeaderCell({
  column,
  colSpan,
  rowIdx,
  isCellSelected,
  onColumnResize,
  onColumnsReorder,
  sortColumns,
  onSortColumnsChange,
  selectCell,
  shouldFocusGrid,
  direction,
  dragDropKey
}) {
  const [isDragging, setIsDragging] = (0, import_react.useState)(false);
  const [isOver, setIsOver] = (0, import_react.useState)(false);
  const isRtl = direction === "rtl";
  const rowSpan = getHeaderCellRowSpan(column, rowIdx);
  const {
    tabIndex,
    childTabIndex,
    onFocus
  } = useRovingTabIndex(isCellSelected);
  const sortIndex = sortColumns == null ? void 0 : sortColumns.findIndex((sort) => sort.columnKey === column.key);
  const sortColumn = sortIndex !== void 0 && sortIndex > -1 ? sortColumns[sortIndex] : void 0;
  const sortDirection = sortColumn == null ? void 0 : sortColumn.direction;
  const priority = sortColumn !== void 0 && sortColumns.length > 1 ? sortIndex + 1 : void 0;
  const ariaSort = sortDirection && !priority ? sortDirection === "ASC" ? "ascending" : "descending" : void 0;
  const {
    sortable,
    resizable,
    draggable
  } = column;
  const className = getCellClassname(column, column.headerCellClass, sortable && cellSortableClassname, resizable && cellResizableClassname, draggable && cellDraggableClassname, isDragging && cellDraggingClassname, isOver && cellOverClassname);
  const renderHeaderCell$1 = column.renderHeaderCell ?? renderHeaderCell;
  function onPointerDown(event) {
    if (event.pointerType === "mouse" && event.buttons !== 1) {
      return;
    }
    event.preventDefault();
    const {
      currentTarget,
      pointerId
    } = event;
    const headerCell = currentTarget.parentElement;
    const {
      right,
      left
    } = headerCell.getBoundingClientRect();
    const offset = isRtl ? event.clientX - left : right - event.clientX;
    let hasDoubleClicked = false;
    function onPointerMove(event2) {
      const {
        width,
        right: right2,
        left: left2
      } = headerCell.getBoundingClientRect();
      let newWidth = isRtl ? right2 + offset - event2.clientX : event2.clientX + offset - left2;
      newWidth = clampColumnWidth(newWidth, column);
      if (width > 0 && newWidth !== width) {
        onColumnResize(column, newWidth);
      }
    }
    function onDoubleClick() {
      hasDoubleClicked = true;
      onColumnResize(column, "max-content");
    }
    function onLostPointerCapture(event2) {
      if (!hasDoubleClicked) {
        onPointerMove(event2);
      }
      currentTarget.removeEventListener("pointermove", onPointerMove);
      currentTarget.removeEventListener("dblclick", onDoubleClick);
      currentTarget.removeEventListener("lostpointercapture", onLostPointerCapture);
    }
    currentTarget.setPointerCapture(pointerId);
    currentTarget.addEventListener("pointermove", onPointerMove);
    currentTarget.addEventListener("dblclick", onDoubleClick);
    currentTarget.addEventListener("lostpointercapture", onLostPointerCapture);
  }
  function onSort(ctrlClick) {
    if (onSortColumnsChange == null) return;
    const {
      sortDescendingFirst
    } = column;
    if (sortColumn === void 0) {
      const nextSort = {
        columnKey: column.key,
        direction: sortDescendingFirst ? "DESC" : "ASC"
      };
      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);
    } else {
      let nextSortColumn;
      if (sortDescendingFirst === true && sortDirection === "DESC" || sortDescendingFirst !== true && sortDirection === "ASC") {
        nextSortColumn = {
          columnKey: column.key,
          direction: sortDirection === "ASC" ? "DESC" : "ASC"
        };
      }
      if (ctrlClick) {
        const nextSortColumns = [...sortColumns];
        if (nextSortColumn) {
          nextSortColumns[sortIndex] = nextSortColumn;
        } else {
          nextSortColumns.splice(sortIndex, 1);
        }
        onSortColumnsChange(nextSortColumns);
      } else {
        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);
      }
    }
  }
  function onClick(event) {
    selectCell({
      idx: column.idx,
      rowIdx
    });
    if (sortable) {
      onSort(event.ctrlKey || event.metaKey);
    }
  }
  function handleFocus(event) {
    onFocus == null ? void 0 : onFocus(event);
    if (shouldFocusGrid) {
      selectCell({
        idx: 0,
        rowIdx
      });
    }
  }
  function onKeyDown(event) {
    if (event.key === " " || event.key === "Enter") {
      event.preventDefault();
      onSort(event.ctrlKey || event.metaKey);
    }
  }
  function onDragStart(event) {
    event.dataTransfer.setData(dragDropKey, column.key);
    event.dataTransfer.dropEffect = "move";
    setIsDragging(true);
  }
  function onDragEnd() {
    setIsDragging(false);
  }
  function onDragOver(event) {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
  }
  function onDrop(event) {
    setIsOver(false);
    if (event.dataTransfer.types.includes(dragDropKey.toLowerCase())) {
      const sourceKey = event.dataTransfer.getData(dragDropKey.toLowerCase());
      if (sourceKey !== column.key) {
        event.preventDefault();
        onColumnsReorder == null ? void 0 : onColumnsReorder(sourceKey, column.key);
      }
    }
  }
  function onDragEnter(event) {
    if (isEventPertinent(event)) {
      setIsOver(true);
    }
  }
  function onDragLeave(event) {
    if (isEventPertinent(event)) {
      setIsOver(false);
    }
  }
  let draggableProps;
  if (draggable) {
    draggableProps = {
      draggable: true,
      onDragStart,
      onDragEnd,
      onDragOver,
      onDragEnter,
      onDragLeave,
      onDrop
    };
  }
  return (0, import_jsx_runtime.jsxs)("div", {
    role: "columnheader",
    "aria-colindex": column.idx + 1,
    "aria-colspan": colSpan,
    "aria-rowspan": rowSpan,
    "aria-selected": isCellSelected,
    "aria-sort": ariaSort,
    tabIndex: shouldFocusGrid ? 0 : tabIndex,
    className,
    style: {
      ...getHeaderCellStyle(column, rowIdx, rowSpan),
      ...getCellStyle(column, colSpan)
    },
    onFocus: handleFocus,
    onClick,
    onKeyDown: sortable ? onKeyDown : void 0,
    ...draggableProps,
    children: [renderHeaderCell$1({
      column,
      sortDirection,
      priority,
      tabIndex: childTabIndex
    }), resizable && (0, import_jsx_runtime.jsx)("div", {
      className: resizeHandleClassname,
      onClick: stopPropagation,
      onPointerDown
    })]
  });
}
function isEventPertinent(event) {
  const relatedTarget = event.relatedTarget;
  return !event.currentTarget.contains(relatedTarget);
}
var row = "r1upfr807-0-0-beta-47";
var rowClassname = `rdg-row ${row}`;
var rowSelected = "r190mhd37-0-0-beta-47";
var rowSelectedClassname = "rdg-row-selected";
var rowSelectedWithFrozenCell = "r139qu9m7-0-0-beta-47";
var topSummaryRowClassname = "rdg-top-summary-row";
var bottomSummaryRowClassname = "rdg-bottom-summary-row";
var headerRow = "h10tskcx7-0-0-beta-47";
var headerRowClassname = `rdg-header-row ${headerRow}`;
function HeaderRow({
  rowIdx,
  columns,
  onColumnResize,
  onColumnsReorder,
  sortColumns,
  onSortColumnsChange,
  lastFrozenColumnIndex,
  selectedCellIdx,
  selectCell,
  shouldFocusGrid,
  direction
}) {
  const dragDropKey = (0, import_react.useId)();
  const cells = [];
  for (let index = 0; index < columns.length; index++) {
    const column = columns[index];
    const colSpan = getColSpan(column, lastFrozenColumnIndex, {
      type: "HEADER"
    });
    if (colSpan !== void 0) {
      index += colSpan - 1;
    }
    cells.push((0, import_jsx_runtime.jsx)(HeaderCell, {
      column,
      colSpan,
      rowIdx,
      isCellSelected: selectedCellIdx === column.idx,
      onColumnResize,
      onColumnsReorder,
      onSortColumnsChange,
      sortColumns,
      selectCell,
      shouldFocusGrid: shouldFocusGrid && index === 0,
      direction,
      dragDropKey
    }, column.key));
  }
  return (0, import_jsx_runtime.jsx)("div", {
    role: "row",
    "aria-rowindex": rowIdx,
    className: clsx_default(headerRowClassname, selectedCellIdx === -1 && rowSelectedClassname),
    children: cells
  });
}
var HeaderRow$1 = (0, import_react.memo)(HeaderRow);
function GroupedColumnHeaderRow({
  rowIdx,
  level,
  columns,
  selectedCellIdx,
  selectCell
}) {
  const cells = [];
  const renderedParents = /* @__PURE__ */ new Set();
  for (const column of columns) {
    let {
      parent
    } = column;
    if (parent === void 0) continue;
    while (parent.level > level) {
      if (parent.parent === void 0) break;
      parent = parent.parent;
    }
    if (parent.level === level && !renderedParents.has(parent)) {
      renderedParents.add(parent);
      const {
        idx
      } = parent;
      cells.push((0, import_jsx_runtime.jsx)(GroupedColumnHeaderCell, {
        column: parent,
        rowIdx,
        isCellSelected: selectedCellIdx === idx,
        selectCell
      }, idx));
    }
  }
  return (0, import_jsx_runtime.jsx)("div", {
    role: "row",
    "aria-rowindex": rowIdx,
    className: headerRowClassname,
    children: cells
  });
}
var GroupedColumnHeaderRow$1 = (0, import_react.memo)(GroupedColumnHeaderRow);
var cellCopied = "c6ra8a37-0-0-beta-47";
var cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;
var cellDraggedOver = "cq910m07-0-0-beta-47";
var cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;
function Cell({
  column,
  colSpan,
  isCellSelected,
  isCopied,
  isDraggedOver,
  row: row2,
  rowIdx,
  onClick,
  onDoubleClick,
  onContextMenu,
  onRowChange,
  selectCell,
  ...props
}) {
  const {
    tabIndex,
    childTabIndex,
    onFocus
  } = useRovingTabIndex(isCellSelected);
  const {
    cellClass
  } = column;
  const className = getCellClassname(column, typeof cellClass === "function" ? cellClass(row2) : cellClass, isCopied && cellCopiedClassname, isDraggedOver && cellDraggedOverClassname);
  const isEditable = isCellEditableUtil(column, row2);
  function selectCellWrapper(openEditor) {
    selectCell({
      rowIdx,
      idx: column.idx
    }, openEditor);
  }
  function handleClick(event) {
    if (onClick) {
      const cellEvent = createCellEvent(event);
      onClick({
        row: row2,
        column,
        selectCell: selectCellWrapper
      }, cellEvent);
      if (cellEvent.isGridDefaultPrevented()) return;
    }
    selectCellWrapper();
  }
  function handleContextMenu(event) {
    if (onContextMenu) {
      const cellEvent = createCellEvent(event);
      onContextMenu({
        row: row2,
        column,
        selectCell: selectCellWrapper
      }, cellEvent);
      if (cellEvent.isGridDefaultPrevented()) return;
    }
    selectCellWrapper();
  }
  function handleDoubleClick(event) {
    if (onDoubleClick) {
      const cellEvent = createCellEvent(event);
      onDoubleClick({
        row: row2,
        column,
        selectCell: selectCellWrapper
      }, cellEvent);
      if (cellEvent.isGridDefaultPrevented()) return;
    }
    selectCellWrapper(true);
  }
  function handleRowChange(newRow) {
    onRowChange(column, newRow);
  }
  return (0, import_jsx_runtime.jsx)("div", {
    role: "gridcell",
    "aria-colindex": column.idx + 1,
    "aria-colspan": colSpan,
    "aria-selected": isCellSelected,
    "aria-readonly": !isEditable || void 0,
    tabIndex,
    className,
    style: getCellStyle(column, colSpan),
    onClick: handleClick,
    onDoubleClick: handleDoubleClick,
    onContextMenu: handleContextMenu,
    onFocus,
    ...props,
    children: column.renderCell({
      column,
      row: row2,
      rowIdx,
      isCellEditable: isEditable,
      tabIndex: childTabIndex,
      onRowChange: handleRowChange
    })
  });
}
var Cell$1 = (0, import_react.memo)(Cell);
function Row({
  className,
  rowIdx,
  gridRowStart,
  selectedCellIdx,
  isRowSelectionDisabled,
  isRowSelected,
  copiedCellIdx,
  draggedOverCellIdx,
  lastFrozenColumnIndex,
  row: row2,
  viewportColumns,
  selectedCellEditor,
  onCellClick,
  onCellDoubleClick,
  onCellContextMenu,
  rowClass,
  setDraggedOverRowIdx,
  onMouseEnter,
  onRowChange,
  selectCell,
  ...props
}, ref) {
  const handleRowChange = useLatestFunc((column, newRow) => {
    onRowChange(column, rowIdx, newRow);
  });
  function handleDragEnter(event) {
    setDraggedOverRowIdx == null ? void 0 : setDraggedOverRowIdx(rowIdx);
    onMouseEnter == null ? void 0 : onMouseEnter(event);
  }
  className = clsx_default(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? "even" : "odd"}`, rowClass == null ? void 0 : rowClass(row2, rowIdx), className, selectedCellIdx === -1 && rowSelectedClassname);
  const cells = [];
  for (let index = 0; index < viewportColumns.length; index++) {
    const column = viewportColumns[index];
    const {
      idx
    } = column;
    const colSpan = getColSpan(column, lastFrozenColumnIndex, {
      type: "ROW",
      row: row2
    });
    if (colSpan !== void 0) {
      index += colSpan - 1;
    }
    const isCellSelected = selectedCellIdx === idx;
    if (isCellSelected && selectedCellEditor) {
      cells.push(selectedCellEditor);
    } else {
      cells.push((0, import_jsx_runtime.jsx)(Cell$1, {
        column,
        colSpan,
        row: row2,
        rowIdx,
        isCopied: copiedCellIdx === idx,
        isDraggedOver: draggedOverCellIdx === idx,
        isCellSelected,
        onClick: onCellClick,
        onDoubleClick: onCellDoubleClick,
        onContextMenu: onCellContextMenu,
        onRowChange: handleRowChange,
        selectCell
      }, column.key));
    }
  }
  const selectionValue = (0, import_react.useMemo)(() => ({
    isRowSelected,
    isRowSelectionDisabled
  }), [isRowSelectionDisabled, isRowSelected]);
  return (0, import_jsx_runtime.jsx)(RowSelectionProvider, {
    value: selectionValue,
    children: (0, import_jsx_runtime.jsx)("div", {
      role: "row",
      ref,
      className,
      onMouseEnter: handleDragEnter,
      style: getRowStyle(gridRowStart),
      ...props,
      children: cells
    })
  });
}
var RowComponent = (0, import_react.memo)((0, import_react.forwardRef)(Row));
var RowComponent$1 = RowComponent;
function defaultRenderRow(key, props) {
  return (0, import_jsx_runtime.jsx)(RowComponent, {
    ...props
  }, key);
}
function ScrollToCell({
  scrollToPosition: {
    idx,
    rowIdx
  },
  gridElement,
  setScrollToCellPosition
}) {
  const ref = (0, import_react.useRef)(null);
  useLayoutEffect(() => {
    scrollIntoView(ref.current);
  });
  useLayoutEffect(() => {
    function removeScrollToCell() {
      setScrollToCellPosition(null);
    }
    const observer = new IntersectionObserver(removeScrollToCell, {
      root: gridElement,
      threshold: 1
    });
    observer.observe(ref.current);
    return () => {
      observer.disconnect();
    };
  }, [gridElement, setScrollToCellPosition]);
  return (0, import_jsx_runtime.jsx)("div", {
    ref,
    style: {
      gridColumn: idx === void 0 ? "1/-1" : idx + 1,
      gridRow: rowIdx === void 0 ? "1/-1" : rowIdx + 2
    }
  });
}
var arrow = "a3ejtar7-0-0-beta-47";
var arrowClassname = `rdg-sort-arrow ${arrow}`;
function renderSortStatus({
  sortDirection,
  priority
}) {
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [renderSortIcon({
      sortDirection
    }), renderSortPriority({
      priority
    })]
  });
}
function renderSortIcon({
  sortDirection
}) {
  if (sortDirection === void 0) return null;
  return (0, import_jsx_runtime.jsx)("svg", {
    viewBox: "0 0 12 8",
    width: "12",
    height: "8",
    className: arrowClassname,
    "aria-hidden": true,
    children: (0, import_jsx_runtime.jsx)("path", {
      d: sortDirection === "ASC" ? "M0 8 6 0 12 8" : "M0 0 6 8 12 0"
    })
  });
}
function renderSortPriority({
  priority
}) {
  return priority;
}
var root = "rnvodz57-0-0-beta-47";
var rootClassname = `rdg ${root}`;
var viewportDragging = "vlqv91k7-0-0-beta-47";
var viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;
var focusSinkClassname = "f1lsfrzw7-0-0-beta-47";
var focusSinkHeaderAndSummaryClassname = "f1cte0lg7-0-0-beta-47";
var summaryCellClassname = "s8wc6fl7-0-0-beta-47";
function SummaryCell({
  column,
  colSpan,
  row: row2,
  rowIdx,
  isCellSelected,
  selectCell
}) {
  var _a;
  const {
    tabIndex,
    childTabIndex,
    onFocus
  } = useRovingTabIndex(isCellSelected);
  const {
    summaryCellClass
  } = column;
  const className = getCellClassname(column, summaryCellClassname, typeof summaryCellClass === "function" ? summaryCellClass(row2) : summaryCellClass);
  function onClick() {
    selectCell({
      rowIdx,
      idx: column.idx
    });
  }
  return (0, import_jsx_runtime.jsx)("div", {
    role: "gridcell",
    "aria-colindex": column.idx + 1,
    "aria-colspan": colSpan,
    "aria-selected": isCellSelected,
    tabIndex,
    className,
    style: getCellStyle(column, colSpan),
    onClick,
    onFocus,
    children: (_a = column.renderSummaryCell) == null ? void 0 : _a.call(column, {
      column,
      row: row2,
      tabIndex: childTabIndex
    })
  });
}
var SummaryCell$1 = (0, import_react.memo)(SummaryCell);
var summaryRow = "skuhp557-0-0-beta-47";
var topSummaryRow = "tf8l5ub7-0-0-beta-47";
var summaryRowClassname = `rdg-summary-row ${summaryRow}`;
function SummaryRow({
  rowIdx,
  gridRowStart,
  row: row2,
  viewportColumns,
  top,
  bottom,
  lastFrozenColumnIndex,
  selectedCellIdx,
  isTop,
  selectCell,
  "aria-rowindex": ariaRowIndex
}) {
  const cells = [];
  for (let index = 0; index < viewportColumns.length; index++) {
    const column = viewportColumns[index];
    const colSpan = getColSpan(column, lastFrozenColumnIndex, {
      type: "SUMMARY",
      row: row2
    });
    if (colSpan !== void 0) {
      index += colSpan - 1;
    }
    const isCellSelected = selectedCellIdx === column.idx;
    cells.push((0, import_jsx_runtime.jsx)(SummaryCell$1, {
      column,
      colSpan,
      row: row2,
      rowIdx,
      isCellSelected,
      selectCell
    }, column.key));
  }
  return (0, import_jsx_runtime.jsx)("div", {
    role: "row",
    "aria-rowindex": ariaRowIndex,
    className: clsx_default(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? "even" : "odd"}`, summaryRowClassname, isTop ? `${topSummaryRowClassname} ${topSummaryRow}` : bottomSummaryRowClassname, selectedCellIdx === -1 && rowSelectedClassname),
    style: {
      ...getRowStyle(gridRowStart),
      "--rdg-summary-row-top": top !== void 0 ? `${top}px` : void 0,
      "--rdg-summary-row-bottom": bottom !== void 0 ? `${bottom}px` : void 0
    },
    children: cells
  });
}
var SummaryRow$1 = (0, import_react.memo)(SummaryRow);
function DataGrid(props, ref) {
  const {
    columns: rawColumns,
    rows,
    topSummaryRows,
    bottomSummaryRows,
    rowKeyGetter,
    onRowsChange,
    rowHeight: rawRowHeight,
    headerRowHeight: rawHeaderRowHeight,
    summaryRowHeight: rawSummaryRowHeight,
    selectedRows,
    isRowSelectionDisabled,
    onSelectedRowsChange,
    sortColumns,
    onSortColumnsChange,
    defaultColumnOptions,
    onCellClick,
    onCellDoubleClick,
    onCellContextMenu,
    onCellKeyDown,
    onSelectedCellChange,
    onScroll,
    onColumnResize,
    onColumnsReorder,
    onFill,
    onCopy,
    onPaste,
    enableVirtualization: rawEnableVirtualization,
    renderers,
    className,
    style,
    rowClass,
    direction: rawDirection,
    role: rawRole,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    "aria-rowcount": rawAriaRowCount,
    "data-testid": testId
  } = props;
  const defaultRenderers = useDefaultRenderers();
  const role = rawRole ?? "grid";
  const rowHeight = rawRowHeight ?? 35;
  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === "number" ? rowHeight : 35);
  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === "number" ? rowHeight : 35);
  const renderRow = (renderers == null ? void 0 : renderers.renderRow) ?? (defaultRenderers == null ? void 0 : defaultRenderers.renderRow) ?? defaultRenderRow;
  const renderSortStatus$1 = (renderers == null ? void 0 : renderers.renderSortStatus) ?? (defaultRenderers == null ? void 0 : defaultRenderers.renderSortStatus) ?? renderSortStatus;
  const renderCheckbox$1 = (renderers == null ? void 0 : renderers.renderCheckbox) ?? (defaultRenderers == null ? void 0 : defaultRenderers.renderCheckbox) ?? renderCheckbox;
  const noRowsFallback = (renderers == null ? void 0 : renderers.noRowsFallback) ?? (defaultRenderers == null ? void 0 : defaultRenderers.noRowsFallback);
  const enableVirtualization = rawEnableVirtualization ?? true;
  const direction = rawDirection ?? "ltr";
  const [scrollTop, setScrollTop] = (0, import_react.useState)(0);
  const [scrollLeft, setScrollLeft] = (0, import_react.useState)(0);
  const [resizedColumnWidths, setResizedColumnWidths] = (0, import_react.useState)(() => /* @__PURE__ */ new Map());
  const [measuredColumnWidths, setMeasuredColumnWidths] = (0, import_react.useState)(() => /* @__PURE__ */ new Map());
  const [copiedCell, setCopiedCell] = (0, import_react.useState)(null);
  const [isDragging, setDragging] = (0, import_react.useState)(false);
  const [draggedOverRowIdx, setOverRowIdx] = (0, import_react.useState)(void 0);
  const [scrollToPosition, setScrollToPosition] = (0, import_react.useState)(null);
  const getColumnWidth = (0, import_react.useCallback)((column) => {
    return resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;
  }, [measuredColumnWidths, resizedColumnWidths]);
  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();
  const {
    columns,
    colSpanColumns,
    lastFrozenColumnIndex,
    headerRowsCount,
    colOverscanStartIdx,
    colOverscanEndIdx,
    templateColumns,
    layoutCssVars,
    totalFrozenColumnWidth
  } = useCalculatedColumns({
    rawColumns,
    defaultColumnOptions,
    getColumnWidth,
    scrollLeft,
    viewportWidth: gridWidth,
    enableVirtualization
  });
  const topSummaryRowsCount = (topSummaryRows == null ? void 0 : topSummaryRows.length) ?? 0;
  const bottomSummaryRowsCount = (bottomSummaryRows == null ? void 0 : bottomSummaryRows.length) ?? 0;
  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;
  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;
  const groupedColumnHeaderRowsCount = headerRowsCount - 1;
  const minRowIdx = -headerAndTopSummaryRowsCount;
  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;
  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;
  const [selectedPosition, setSelectedPosition] = (0, import_react.useState)(() => ({
    idx: -1,
    rowIdx: minRowIdx - 1,
    mode: "SELECT"
  }));
  const prevSelectedPosition = (0, import_react.useRef)(selectedPosition);
  const latestDraggedOverRowIdx = (0, import_react.useRef)(draggedOverRowIdx);
  const lastSelectedRowIdx = (0, import_react.useRef)(-1);
  const focusSinkRef = (0, import_react.useRef)(null);
  const shouldFocusCellRef = (0, import_react.useRef)(false);
  const isTreeGrid = role === "treegrid";
  const headerRowsHeight = headerRowsCount * headerRowHeight;
  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;
  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;
  const isSelectable = selectedRows != null && onSelectedRowsChange != null;
  const isRtl = direction === "rtl";
  const leftKey = isRtl ? "ArrowRight" : "ArrowLeft";
  const rightKey = isRtl ? "ArrowLeft" : "ArrowRight";
  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;
  const defaultGridComponents = (0, import_react.useMemo)(() => ({
    renderCheckbox: renderCheckbox$1,
    renderSortStatus: renderSortStatus$1
  }), [renderCheckbox$1, renderSortStatus$1]);
  const headerSelectionValue = (0, import_react.useMemo)(() => {
    let hasSelectedRow = false;
    let hasUnselectedRow = false;
    if (rowKeyGetter != null && selectedRows != null && selectedRows.size > 0) {
      for (const row2 of rows) {
        if (selectedRows.has(rowKeyGetter(row2))) {
          hasSelectedRow = true;
        } else {
          hasUnselectedRow = true;
        }
        if (hasSelectedRow && hasUnselectedRow) break;
      }
    }
    return {
      isRowSelected: hasSelectedRow && !hasUnselectedRow,
      isIndeterminate: hasSelectedRow && hasUnselectedRow
    };
  }, [rows, selectedRows, rowKeyGetter]);
  const {
    rowOverscanStartIdx,
    rowOverscanEndIdx,
    totalRowHeight,
    gridTemplateRows,
    getRowTop,
    getRowHeight,
    findRowIdx
  } = useViewportRows({
    rows,
    rowHeight,
    clientHeight,
    scrollTop,
    enableVirtualization
  });
  const viewportColumns = useViewportColumns({
    columns,
    colSpanColumns,
    colOverscanStartIdx,
    colOverscanEndIdx,
    lastFrozenColumnIndex,
    rowOverscanStartIdx,
    rowOverscanEndIdx,
    rows,
    topSummaryRows,
    bottomSummaryRows
  });
  const {
    gridTemplateColumns,
    handleColumnResize
  } = useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize);
  const minColIdx = isTreeGrid ? -1 : 0;
  const maxColIdx = columns.length - 1;
  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);
  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);
  const scrollHeight = headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;
  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);
  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);
  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);
  const onCellClickLatest = useLatestFunc(onCellClick);
  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);
  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);
  const selectHeaderRowLatest = useLatestFunc(selectHeaderRow);
  const selectRowLatest = useLatestFunc(selectRow);
  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);
  const selectCellLatest = useLatestFunc(selectCell);
  const selectHeaderCellLatest = useLatestFunc(({
    idx,
    rowIdx
  }) => {
    selectCell({
      rowIdx: minRowIdx + rowIdx - 1,
      idx
    });
  });
  useLayoutEffect(() => {
    if (!selectedCellIsWithinSelectionBounds || isSamePosition(selectedPosition, prevSelectedPosition.current)) {
      prevSelectedPosition.current = selectedPosition;
      return;
    }
    prevSelectedPosition.current = selectedPosition;
    if (selectedPosition.idx === -1) {
      focusSinkRef.current.focus({
        preventScroll: true
      });
      scrollIntoView(focusSinkRef.current);
    }
  });
  useLayoutEffect(() => {
    if (!shouldFocusCellRef.current) return;
    shouldFocusCellRef.current = false;
    focusCellOrCellContent();
  });
  (0, import_react.useImperativeHandle)(ref, () => ({
    element: gridRef.current,
    scrollToCell({
      idx,
      rowIdx
    }) {
      const scrollToIdx = idx !== void 0 && idx > lastFrozenColumnIndex && idx < columns.length ? idx : void 0;
      const scrollToRowIdx = rowIdx !== void 0 && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : void 0;
      if (scrollToIdx !== void 0 || scrollToRowIdx !== void 0) {
        setScrollToPosition({
          idx: scrollToIdx,
          rowIdx: scrollToRowIdx
        });
      }
    },
    selectCell
  }));
  const setDraggedOverRowIdx = (0, import_react.useCallback)((rowIdx) => {
    setOverRowIdx(rowIdx);
    latestDraggedOverRowIdx.current = rowIdx;
  }, []);
  function selectHeaderRow(args) {
    if (!onSelectedRowsChange) return;
    assertIsValidKeyGetter(rowKeyGetter);
    const newSelectedRows = new Set(selectedRows);
    for (const row2 of rows) {
      if ((isRowSelectionDisabled == null ? void 0 : isRowSelectionDisabled(row2)) === true) continue;
      const rowKey = rowKeyGetter(row2);
      if (args.checked) {
        newSelectedRows.add(rowKey);
      } else {
        newSelectedRows.delete(rowKey);
      }
    }
    onSelectedRowsChange(newSelectedRows);
  }
  function selectRow(args) {
    if (!onSelectedRowsChange) return;
    assertIsValidKeyGetter(rowKeyGetter);
    const {
      row: row2,
      checked,
      isShiftClick
    } = args;
    if ((isRowSelectionDisabled == null ? void 0 : isRowSelectionDisabled(row2)) === true) return;
    const newSelectedRows = new Set(selectedRows);
    const rowKey = rowKeyGetter(row2);
    const previousRowIdx = lastSelectedRowIdx.current;
    const rowIdx = rows.indexOf(row2);
    lastSelectedRowIdx.current = rowIdx;
    if (checked) {
      newSelectedRows.add(rowKey);
    } else {
      newSelectedRows.delete(rowKey);
    }
    if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx && previousRowIdx < rows.length) {
      const step = sign(rowIdx - previousRowIdx);
      for (let i = previousRowIdx + step; i !== rowIdx; i += step) {
        const row3 = rows[i];
        if ((isRowSelectionDisabled == null ? void 0 : isRowSelectionDisabled(row3)) === true) continue;
        if (checked) {
          newSelectedRows.add(rowKeyGetter(row3));
        } else {
          newSelectedRows.delete(rowKeyGetter(row3));
        }
      }
    }
    onSelectedRowsChange(newSelectedRows);
  }
  function handleKeyDown(event) {
    var _a;
    const {
      idx,
      rowIdx,
      mode
    } = selectedPosition;
    if (mode === "EDIT") return;
    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {
      const row2 = rows[rowIdx];
      const cellEvent = createCellEvent(event);
      onCellKeyDown({
        mode: "SELECT",
        row: row2,
        column: columns[idx],
        rowIdx,
        selectCell
      }, cellEvent);
      if (cellEvent.isGridDefaultPrevented()) return;
    }
    if (!(event.target instanceof Element)) return;
    const isCellEvent = event.target.closest(".rdg-cell") !== null;
    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;
    if (!isCellEvent && !isRowEvent) return;
    const {
      keyCode
    } = event;
    if (selectedCellIsWithinViewportBounds && (onPaste != null || onCopy != null) && isCtrlKeyHeldDown(event)) {
      const cKey = 67;
      const vKey = 86;
      if (keyCode === cKey) {
        if (((_a = window.getSelection()) == null ? void 0 : _a.isCollapsed) === false) return;
        handleCopy();
        return;
      }
      if (keyCode === vKey) {
        handlePaste();
        return;
      }
    }
    switch (event.key) {
      case "Escape":
        setCopiedCell(null);
        return;
      case "ArrowUp":
      case "ArrowDown":
      case "ArrowLeft":
      case "ArrowRight":
      case "Tab":
      case "Home":
      case "End":
      case "PageUp":
      case "PageDown":
        navigate(event);
        break;
      default:
        handleCellInput(event);
        break;
    }
  }
  function handleScroll(event) {
    const {
      scrollTop: scrollTop2,
      scrollLeft: scrollLeft2
    } = event.currentTarget;
    (0, import_react_dom.flushSync)(() => {
      setScrollTop(scrollTop2);
      setScrollLeft(abs(scrollLeft2));
    });
    onScroll == null ? void 0 : onScroll(event);
  }
  function updateRow(column, rowIdx, row2) {
    if (typeof onRowsChange !== "function") return;
    if (row2 === rows[rowIdx]) return;
    const updatedRows = [...rows];
    updatedRows[rowIdx] = row2;
    onRowsChange(updatedRows, {
      indexes: [rowIdx],
      column
    });
  }
  function commitEditorChanges() {
    if (selectedPosition.mode !== "EDIT") return;
    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);
  }
  function handleCopy() {
    const {
      idx,
      rowIdx
    } = selectedPosition;
    const sourceRow = rows[rowIdx];
    const sourceColumnKey = columns[idx].key;
    setCopiedCell({
      row: sourceRow,
      columnKey: sourceColumnKey
    });
    onCopy == null ? void 0 : onCopy({
      sourceRow,
      sourceColumnKey
    });
  }
  function handlePaste() {
    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {
      return;
    }
    const {
      idx,
      rowIdx
    } = selectedPosition;
    const targetColumn = columns[idx];
    const targetRow = rows[rowIdx];
    const updatedTargetRow = onPaste({
      sourceRow: copiedCell.row,
      sourceColumnKey: copiedCell.columnKey,
      targetRow,
      targetColumnKey: targetColumn.key
    });
    updateRow(targetColumn, rowIdx, updatedTargetRow);
  }
  function handleCellInput(event) {
    if (!selectedCellIsWithinViewportBounds) return;
    const row2 = rows[selectedPosition.rowIdx];
    const {
      key,
      shiftKey
    } = event;
    if (isSelectable && shiftKey && key === " ") {
      assertIsValidKeyGetter(rowKeyGetter);
      const rowKey = rowKeyGetter(row2);
      selectRow({
        row: row2,
        checked: !selectedRows.has(rowKey),
        isShiftClick: false
      });
      event.preventDefault();
      return;
    }
    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {
      setSelectedPosition(({
        idx,
        rowIdx
      }) => ({
        idx,
        rowIdx,
        mode: "EDIT",
        row: row2,
        originalRow: row2
      }));
    }
  }
  function isColIdxWithinSelectionBounds(idx) {
    return idx >= minColIdx && idx <= maxColIdx;
  }
  function isRowIdxWithinViewportBounds(rowIdx) {
    return rowIdx >= 0 && rowIdx < rows.length;
  }
  function isCellWithinSelectionBounds({
    idx,
    rowIdx
  }) {
    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);
  }
  function isCellWithinEditBounds({
    idx,
    rowIdx
  }) {
    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;
  }
  function isCellWithinViewportBounds({
    idx,
    rowIdx
  }) {
    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);
  }
  function isCellEditable(position) {
    return isCellWithinEditBounds(position) && isSelectedCellEditable({
      columns,
      rows,
      selectedPosition: position
    });
  }
  function selectCell(position, enableEditor) {
    if (!isCellWithinSelectionBounds(position)) return;
    commitEditorChanges();
    const row2 = rows[position.rowIdx];
    const samePosition = isSamePosition(selectedPosition, position);
    if (enableEditor && isCellEditable(position)) {
      setSelectedPosition({
        ...position,
        mode: "EDIT",
        row: row2,
        originalRow: row2
      });
    } else if (samePosition) {
      scrollIntoView(getCellToScroll(gridRef.current));
    } else {
      shouldFocusCellRef.current = true;
      setSelectedPosition({
        ...position,
        mode: "SELECT"
      });
    }
    if (onSelectedCellChange && !samePosition) {
      onSelectedCellChange({
        rowIdx: position.rowIdx,
        row: row2,
        column: columns[position.idx]
      });
    }
  }
  function getNextPosition(key, ctrlKey, shiftKey) {
    const {
      idx,
      rowIdx
    } = selectedPosition;
    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;
    switch (key) {
      case "ArrowUp":
        return {
          idx,
          rowIdx: rowIdx - 1
        };
      case "ArrowDown":
        return {
          idx,
          rowIdx: rowIdx + 1
        };
      case leftKey:
        return {
          idx: idx - 1,
          rowIdx
        };
      case rightKey:
        return {
          idx: idx + 1,
          rowIdx
        };
      case "Tab":
        return {
          idx: idx + (shiftKey ? -1 : 1),
          rowIdx
        };
      case "Home":
        if (isRowSelected) return {
          idx,
          rowIdx: minRowIdx
        };
        return {
          idx: 0,
          rowIdx: ctrlKey ? minRowIdx : rowIdx
        };
      case "End":
        if (isRowSelected) return {
          idx,
          rowIdx: maxRowIdx
        };
        return {
          idx: maxColIdx,
          rowIdx: ctrlKey ? maxRowIdx : rowIdx
        };
      case "PageUp": {
        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;
        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;
        return {
          idx,
          rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0
        };
      }
      case "PageDown": {
        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;
        const nextRowY = getRowTop(rowIdx) + clientHeight;
        return {
          idx,
          rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1
        };
      }
      default:
        return selectedPosition;
    }
  }
  function navigate(event) {
    const {
      key,
      shiftKey
    } = event;
    let cellNavigationMode = "NONE";
    if (key === "Tab") {
      if (canExitGrid({
        shiftKey,
        maxColIdx,
        minRowIdx,
        maxRowIdx,
        selectedPosition
      })) {
        commitEditorChanges();
        return;
      }
      cellNavigationMode = "CHANGE_ROW";
    }
    event.preventDefault();
    const ctrlKey = isCtrlKeyHeldDown(event);
    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);
    if (isSamePosition(selectedPosition, nextPosition)) return;
    const nextSelectedCellPosition = getNextSelectedCellPosition({
      moveUp: key === "ArrowUp",
      moveNext: key === rightKey || key === "Tab" && !shiftKey,
      columns,
      colSpanColumns,
      rows,
      topSummaryRows,
      bottomSummaryRows,
      minRowIdx,
      mainHeaderRowIdx,
      maxRowIdx,
      lastFrozenColumnIndex,
      cellNavigationMode,
      currentPosition: selectedPosition,
      nextPosition,
      isCellWithinBounds: isCellWithinSelectionBounds
    });
    selectCell(nextSelectedCellPosition);
  }
  function getDraggedOverCellIdx(currentRowIdx) {
    if (draggedOverRowIdx === void 0) return;
    const {
      rowIdx
    } = selectedPosition;
    const isDraggedOver = rowIdx < draggedOverRowIdx ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;
    return isDraggedOver ? selectedPosition.idx : void 0;
  }
  function focusCellOrCellContent() {
    const cell2 = getCellToScroll(gridRef.current);
    if (cell2 === null) return;
    scrollIntoView(cell2);
    const elementToFocus = cell2.querySelector('[tabindex="0"]') ?? cell2;
    elementToFocus.focus({
      preventScroll: true
    });
  }
  function renderDragHandle() {
    if (onFill == null || selectedPosition.mode === "EDIT" || !isCellWithinViewportBounds(selectedPosition)) {
      return;
    }
    const {
      idx,
      rowIdx
    } = selectedPosition;
    const column = columns[idx];
    if (column.renderEditCell == null || column.editable === false) {
      return;
    }
    const columnWidth = getColumnWidth(column);
    return (0, import_jsx_runtime.jsx)(DragHandle, {
      gridRowStart: headerAndTopSummaryRowsCount + rowIdx + 1,
      rows,
      column,
      columnWidth,
      maxColIdx,
      isLastRow: rowIdx === maxRowIdx,
      selectedPosition,
      isCellEditable,
      latestDraggedOverRowIdx,
      onRowsChange,
      onClick: focusCellOrCellContent,
      onFill,
      setDragging,
      setDraggedOverRowIdx
    });
  }
  function getCellEditor(rowIdx) {
    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === "SELECT") return;
    const {
      idx,
      row: row2
    } = selectedPosition;
    const column = columns[idx];
    const colSpan = getColSpan(column, lastFrozenColumnIndex, {
      type: "ROW",
      row: row2
    });
    const closeEditor = (shouldFocusCell) => {
      shouldFocusCellRef.current = shouldFocusCell;
      setSelectedPosition(({
        idx: idx2,
        rowIdx: rowIdx2
      }) => ({
        idx: idx2,
        rowIdx: rowIdx2,
        mode: "SELECT"
      }));
    };
    const onRowChange = (row3, commitChanges, shouldFocusCell) => {
      if (commitChanges) {
        (0, import_react_dom.flushSync)(() => {
          updateRow(column, selectedPosition.rowIdx, row3);
          closeEditor(shouldFocusCell);
        });
      } else {
        setSelectedPosition((position) => ({
          ...position,
          row: row3
        }));
      }
    };
    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {
      closeEditor(false);
    }
    return (0, import_jsx_runtime.jsx)(EditCell, {
      column,
      colSpan,
      row: row2,
      rowIdx,
      onRowChange,
      closeEditor,
      onKeyDown: onCellKeyDown,
      navigate
    }, column.key);
  }
  function getRowViewportColumns(rowIdx) {
    const selectedColumn = selectedPosition.idx === -1 ? void 0 : columns[selectedPosition.idx];
    if (selectedColumn !== void 0 && selectedPosition.rowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {
      return selectedPosition.idx > colOverscanEndIdx ? [...viewportColumns, selectedColumn] : [...viewportColumns.slice(0, lastFrozenColumnIndex + 1), selectedColumn, ...viewportColumns.slice(lastFrozenColumnIndex + 1)];
    }
    return viewportColumns;
  }
  function getViewportRows() {
    const rowElements = [];
    const {
      idx: selectedIdx,
      rowIdx: selectedRowIdx
    } = selectedPosition;
    const startRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx ? rowOverscanStartIdx - 1 : rowOverscanStartIdx;
    const endRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx ? rowOverscanEndIdx + 1 : rowOverscanEndIdx;
    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {
      const isRowOutsideViewport = viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;
      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;
      let rowColumns = viewportColumns;
      const selectedColumn = selectedIdx === -1 ? void 0 : columns[selectedIdx];
      if (selectedColumn !== void 0) {
        if (isRowOutsideViewport) {
          rowColumns = [selectedColumn];
        } else {
          rowColumns = getRowViewportColumns(rowIdx);
        }
      }
      const row2 = rows[rowIdx];
      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;
      let key = rowIdx;
      let isRowSelected = false;
      if (typeof rowKeyGetter === "function") {
        key = rowKeyGetter(row2);
        isRowSelected = (selectedRows == null ? void 0 : selectedRows.has(key)) ?? false;
      }
      rowElements.push(renderRow(key, {
        "aria-rowindex": headerAndTopSummaryRowsCount + rowIdx + 1,
        "aria-selected": isSelectable ? isRowSelected : void 0,
        rowIdx,
        row: row2,
        viewportColumns: rowColumns,
        isRowSelectionDisabled: (isRowSelectionDisabled == null ? void 0 : isRowSelectionDisabled(row2)) ?? false,
        isRowSelected,
        onCellClick: onCellClickLatest,
        onCellDoubleClick: onCellDoubleClickLatest,
        onCellContextMenu: onCellContextMenuLatest,
        rowClass,
        gridRowStart,
        copiedCellIdx: copiedCell !== null && copiedCell.row === row2 ? columns.findIndex((c) => c.key === copiedCell.columnKey) : void 0,
        selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : void 0,
        draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),
        setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : void 0,
        lastFrozenColumnIndex,
        onRowChange: handleFormatterRowChangeLatest,
        selectCell: selectCellLatest,
        selectedCellEditor: getCellEditor(rowIdx)
      }));
    }
    return rowElements;
  }
  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {
    setSelectedPosition({
      idx: -1,
      rowIdx: minRowIdx - 1,
      mode: "SELECT"
    });
    setDraggedOverRowIdx(void 0);
  }
  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;
  if (topSummaryRowsCount > 0) {
    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;
  }
  if (rows.length > 0) {
    templateRows += gridTemplateRows;
  }
  if (bottomSummaryRowsCount > 0) {
    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;
  }
  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;
  return (0, import_jsx_runtime.jsxs)("div", {
    role,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    "aria-multiselectable": isSelectable ? true : void 0,
    "aria-colcount": columns.length,
    "aria-rowcount": ariaRowCount,
    className: clsx_default(rootClassname, className, isDragging && viewportDraggingClassname),
    style: {
      ...style,
      scrollPaddingInlineStart: selectedPosition.idx > lastFrozenColumnIndex || (scrollToPosition == null ? void 0 : scrollToPosition.idx) !== void 0 ? `${totalFrozenColumnWidth}px` : void 0,
      scrollPaddingBlock: isRowIdxWithinViewportBounds(selectedPosition.rowIdx) || (scrollToPosition == null ? void 0 : scrollToPosition.rowIdx) !== void 0 ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${bottomSummaryRowsCount * summaryRowHeight}px` : void 0,
      gridTemplateColumns,
      gridTemplateRows: templateRows,
      "--rdg-header-row-height": `${headerRowHeight}px`,
      "--rdg-scroll-height": `${scrollHeight}px`,
      ...layoutCssVars
    },
    dir: direction,
    ref: gridRef,
    onScroll: handleScroll,
    onKeyDown: handleKeyDown,
    "data-testid": testId,
    children: [(0, import_jsx_runtime.jsxs)(DataGridDefaultRenderersProvider, {
      value: defaultGridComponents,
      children: [(0, import_jsx_runtime.jsx)(HeaderRowSelectionChangeProvider, {
        value: selectHeaderRowLatest,
        children: (0, import_jsx_runtime.jsxs)(HeaderRowSelectionProvider, {
          value: headerSelectionValue,
          children: [Array.from({
            length: groupedColumnHeaderRowsCount
          }, (_, index) => (0, import_jsx_runtime.jsx)(GroupedColumnHeaderRow$1, {
            rowIdx: index + 1,
            level: -groupedColumnHeaderRowsCount + index,
            columns: getRowViewportColumns(minRowIdx + index),
            selectedCellIdx: selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : void 0,
            selectCell: selectHeaderCellLatest
          }, index)), (0, import_jsx_runtime.jsx)(HeaderRow$1, {
            rowIdx: headerRowsCount,
            columns: getRowViewportColumns(mainHeaderRowIdx),
            onColumnResize: handleColumnResizeLatest,
            onColumnsReorder: onColumnsReorderLastest,
            sortColumns,
            onSortColumnsChange: onSortColumnsChangeLatest,
            lastFrozenColumnIndex,
            selectedCellIdx: selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : void 0,
            selectCell: selectHeaderCellLatest,
            shouldFocusGrid: !selectedCellIsWithinSelectionBounds,
            direction
          })]
        })
      }), rows.length === 0 && noRowsFallback ? noRowsFallback : (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
        children: [topSummaryRows == null ? void 0 : topSummaryRows.map((row2, rowIdx) => {
          const gridRowStart = headerRowsCount + 1 + rowIdx;
          const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;
          const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;
          const top = headerRowsHeight + summaryRowHeight * rowIdx;
          return (0, import_jsx_runtime.jsx)(SummaryRow$1, {
            "aria-rowindex": gridRowStart,
            rowIdx: summaryRowIdx,
            gridRowStart,
            row: row2,
            top,
            bottom: void 0,
            viewportColumns: getRowViewportColumns(summaryRowIdx),
            lastFrozenColumnIndex,
            selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : void 0,
            isTop: true,
            selectCell: selectCellLatest
          }, rowIdx);
        }), (0, import_jsx_runtime.jsx)(RowSelectionChangeProvider, {
          value: selectRowLatest,
          children: getViewportRows()
        }), bottomSummaryRows == null ? void 0 : bottomSummaryRows.map((row2, rowIdx) => {
          const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;
          const summaryRowIdx = rows.length + rowIdx;
          const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;
          const top = clientHeight > totalRowHeight ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx) : void 0;
          const bottom = top === void 0 ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx) : void 0;
          return (0, import_jsx_runtime.jsx)(SummaryRow$1, {
            "aria-rowindex": ariaRowCount - bottomSummaryRowsCount + rowIdx + 1,
            rowIdx: summaryRowIdx,
            gridRowStart,
            row: row2,
            top,
            bottom,
            viewportColumns: getRowViewportColumns(summaryRowIdx),
            lastFrozenColumnIndex,
            selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : void 0,
            isTop: false,
            selectCell: selectCellLatest
          }, rowIdx);
        })]
      })]
    }), renderDragHandle(), renderMeasuringCells(viewportColumns), isTreeGrid && (0, import_jsx_runtime.jsx)("div", {
      ref: focusSinkRef,
      tabIndex: isGroupRowFocused ? 0 : -1,
      className: clsx_default(focusSinkClassname, isGroupRowFocused && [rowSelected, lastFrozenColumnIndex !== -1 && rowSelectedWithFrozenCell], !isRowIdxWithinViewportBounds(selectedPosition.rowIdx) && focusSinkHeaderAndSummaryClassname),
      style: {
        gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1
      }
    }), scrollToPosition !== null && (0, import_jsx_runtime.jsx)(ScrollToCell, {
      scrollToPosition,
      setScrollToCellPosition: setScrollToPosition,
      gridElement: gridRef.current
    })]
  });
}
function getCellToScroll(gridEl) {
  return gridEl.querySelector(':scope > [role="row"] > [tabindex="0"]');
}
function isSamePosition(p1, p2) {
  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;
}
var DataGrid$1 = (0, import_react.forwardRef)(DataGrid);
function GroupCell({
  id,
  groupKey,
  childRows,
  isExpanded,
  isCellSelected,
  column,
  row: row2,
  groupColumnIndex,
  isGroupByColumn,
  toggleGroup: toggleGroupWrapper
}) {
  var _a;
  const {
    tabIndex,
    childTabIndex,
    onFocus
  } = useRovingTabIndex(isCellSelected);
  function toggleGroup() {
    toggleGroupWrapper(id);
  }
  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;
  return (0, import_jsx_runtime.jsx)("div", {
    role: "gridcell",
    "aria-colindex": column.idx + 1,
    "aria-selected": isCellSelected,
    tabIndex,
    className: getCellClassname(column),
    style: {
      ...getCellStyle(column),
      cursor: isLevelMatching ? "pointer" : "default"
    },
    onClick: isLevelMatching ? toggleGroup : void 0,
    onFocus,
    children: (!isGroupByColumn || isLevelMatching) && ((_a = column.renderGroupCell) == null ? void 0 : _a.call(column, {
      groupKey,
      childRows,
      column,
      row: row2,
      isExpanded,
      tabIndex: childTabIndex,
      toggleGroup
    }))
  }, column.key);
}
var GroupCell$1 = (0, import_react.memo)(GroupCell);
var groupRow = "g1yxluv37-0-0-beta-47";
var groupRowClassname = `rdg-group-row ${groupRow}`;
function GroupedRow({
  className,
  row: row2,
  rowIdx,
  viewportColumns,
  selectedCellIdx,
  isRowSelected,
  selectCell,
  gridRowStart,
  groupBy,
  toggleGroup,
  isRowSelectionDisabled,
  ...props
}) {
  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row2.level + 1 : row2.level;
  function handleSelectGroup() {
    selectCell({
      rowIdx,
      idx: -1
    });
  }
  const selectionValue = (0, import_react.useMemo)(() => ({
    isRowSelectionDisabled: false,
    isRowSelected
  }), [isRowSelected]);
  return (0, import_jsx_runtime.jsx)(RowSelectionProvider, {
    value: selectionValue,
    children: (0, import_jsx_runtime.jsx)("div", {
      role: "row",
      "aria-level": row2.level + 1,
      "aria-setsize": row2.setSize,
      "aria-posinset": row2.posInSet + 1,
      "aria-expanded": row2.isExpanded,
      className: clsx_default(rowClassname, groupRowClassname, `rdg-row-${rowIdx % 2 === 0 ? "even" : "odd"}`, className, selectedCellIdx === -1 && rowSelectedClassname),
      onClick: handleSelectGroup,
      style: getRowStyle(gridRowStart),
      ...props,
      children: viewportColumns.map((column) => (0, import_jsx_runtime.jsx)(GroupCell$1, {
        id: row2.id,
        groupKey: row2.groupKey,
        childRows: row2.childRows,
        isExpanded: row2.isExpanded,
        isCellSelected: selectedCellIdx === column.idx,
        column,
        row: row2,
        groupColumnIndex: idx,
        toggleGroup,
        isGroupByColumn: groupBy.includes(column.key)
      }, column.key))
    })
  });
}
var GroupedRow$1 = (0, import_react.memo)(GroupedRow);
function TreeDataGrid({
  columns: rawColumns,
  rows: rawRows,
  rowHeight: rawRowHeight,
  rowKeyGetter: rawRowKeyGetter,
  onCellKeyDown: rawOnCellKeyDown,
  onRowsChange,
  selectedRows: rawSelectedRows,
  onSelectedRowsChange: rawOnSelectedRowsChange,
  renderers,
  groupBy: rawGroupBy,
  rowGrouper,
  expandedGroupIds,
  onExpandedGroupIdsChange,
  ...props
}, ref) {
  var _a, _b, _c;
  const defaultRenderers = useDefaultRenderers();
  const rawRenderRow = (renderers == null ? void 0 : renderers.renderRow) ?? (defaultRenderers == null ? void 0 : defaultRenderers.renderRow) ?? defaultRenderRow;
  const headerAndTopSummaryRowsCount = 1 + (((_a = props.topSummaryRows) == null ? void 0 : _a.length) ?? 0);
  const isRtl = props.direction === "rtl";
  const leftKey = isRtl ? "ArrowRight" : "ArrowLeft";
  const rightKey = isRtl ? "ArrowLeft" : "ArrowRight";
  const toggleGroupLatest = useLatestFunc(toggleGroup);
  const {
    columns,
    groupBy
  } = (0, import_react.useMemo)(() => {
    const columns2 = [...rawColumns].sort(({
      key: aKey
    }, {
      key: bKey
    }) => {
      if (aKey === SELECT_COLUMN_KEY) return -1;
      if (bKey === SELECT_COLUMN_KEY) return 1;
      if (rawGroupBy.includes(aKey)) {
        if (rawGroupBy.includes(bKey)) {
          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);
        }
        return -1;
      }
      if (rawGroupBy.includes(bKey)) return 1;
      return 0;
    });
    const groupBy2 = [];
    for (const [index, column] of columns2.entries()) {
      if (rawGroupBy.includes(column.key)) {
        groupBy2.push(column.key);
        columns2[index] = {
          ...column,
          frozen: true,
          renderCell: () => null,
          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,
          editable: false
        };
      }
    }
    return {
      columns: columns2,
      groupBy: groupBy2
    };
  }, [rawColumns, rawGroupBy]);
  const [groupedRows, rowsCount] = (0, import_react.useMemo)(() => {
    if (groupBy.length === 0) return [void 0, rawRows.length];
    const groupRows = (rows2, [groupByKey, ...remainingGroupByKeys], startRowIndex) => {
      let groupRowsCount = 0;
      const groups = {};
      for (const [key, childRows] of Object.entries(rowGrouper(rows2, groupByKey))) {
        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0 ? [childRows, childRows.length] : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1);
        groups[key] = {
          childRows,
          childGroups,
          startRowIndex: startRowIndex + groupRowsCount
        };
        groupRowsCount += childRowsCount + 1;
      }
      return [groups, groupRowsCount];
    };
    return groupRows(rawRows, groupBy, 0);
  }, [groupBy, rowGrouper, rawRows]);
  const [rows, isGroupRow] = (0, import_react.useMemo)(() => {
    const allGroupRows = /* @__PURE__ */ new Set();
    if (!groupedRows) return [rawRows, isGroupRow2];
    const flattenedRows = [];
    const expandGroup = (rows2, parentId, level) => {
      if (isReadonlyArray(rows2)) {
        flattenedRows.push(...rows2);
        return;
      }
      Object.keys(rows2).forEach((groupKey, posInSet, keys) => {
        const id = parentId !== void 0 ? `${parentId}__${groupKey}` : groupKey;
        const isExpanded = expandedGroupIds.has(id);
        const {
          childRows,
          childGroups,
          startRowIndex
        } = rows2[groupKey];
        const groupRow2 = {
          id,
          parentId,
          groupKey,
          isExpanded,
          childRows,
          level,
          posInSet,
          startRowIndex,
          setSize: keys.length
        };
        flattenedRows.push(groupRow2);
        allGroupRows.add(groupRow2);
        if (isExpanded) {
          expandGroup(childGroups, id, level + 1);
        }
      });
    };
    expandGroup(groupedRows, void 0, 0);
    return [flattenedRows, isGroupRow2];
    function isGroupRow2(row2) {
      return allGroupRows.has(row2);
    }
  }, [expandedGroupIds, groupedRows, rawRows]);
  const rowHeight = (0, import_react.useMemo)(() => {
    if (typeof rawRowHeight === "function") {
      return (row2) => {
        if (isGroupRow(row2)) {
          return rawRowHeight({
            type: "GROUP",
            row: row2
          });
        }
        return rawRowHeight({
          type: "ROW",
          row: row2
        });
      };
    }
    return rawRowHeight;
  }, [isGroupRow, rawRowHeight]);
  const getParentRowAndIndex = (0, import_react.useCallback)((row2) => {
    const rowIdx = rows.indexOf(row2);
    for (let i = rowIdx - 1; i >= 0; i--) {
      const parentRow = rows[i];
      if (isGroupRow(parentRow) && (!isGroupRow(row2) || row2.parentId === parentRow.id)) {
        return [parentRow, i];
      }
    }
    return void 0;
  }, [isGroupRow, rows]);
  const rowKeyGetter = (0, import_react.useCallback)((row2) => {
    if (isGroupRow(row2)) {
      return row2.id;
    }
    if (typeof rawRowKeyGetter === "function") {
      return rawRowKeyGetter(row2);
    }
    const parentRowAndIndex = getParentRowAndIndex(row2);
    if (parentRowAndIndex !== void 0) {
      const {
        startRowIndex,
        childRows
      } = parentRowAndIndex[0];
      const groupIndex = childRows.indexOf(row2);
      return startRowIndex + groupIndex + 1;
    }
    return rows.indexOf(row2);
  }, [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]);
  const selectedRows = (0, import_react.useMemo)(() => {
    if (rawSelectedRows == null) return null;
    assertIsValidKeyGetter(rawRowKeyGetter);
    const selectedRows2 = new Set(rawSelectedRows);
    for (const row2 of rows) {
      if (isGroupRow(row2)) {
        const isGroupRowSelected = row2.childRows.every((cr) => rawSelectedRows.has(rawRowKeyGetter(cr)));
        if (isGroupRowSelected) {
          selectedRows2.add(row2.id);
        }
      }
    }
    return selectedRows2;
  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);
  function onSelectedRowsChange(newSelectedRows) {
    if (!rawOnSelectedRowsChange) return;
    assertIsValidKeyGetter(rawRowKeyGetter);
    const newRawSelectedRows = new Set(rawSelectedRows);
    for (const row2 of rows) {
      const key = rowKeyGetter(row2);
      if ((selectedRows == null ? void 0 : selectedRows.has(key)) && !newSelectedRows.has(key)) {
        if (isGroupRow(row2)) {
          for (const cr of row2.childRows) {
            newRawSelectedRows.delete(rawRowKeyGetter(cr));
          }
        } else {
          newRawSelectedRows.delete(key);
        }
      } else if (!(selectedRows == null ? void 0 : selectedRows.has(key)) && newSelectedRows.has(key)) {
        if (isGroupRow(row2)) {
          for (const cr of row2.childRows) {
            newRawSelectedRows.add(rawRowKeyGetter(cr));
          }
        } else {
          newRawSelectedRows.add(key);
        }
      }
    }
    rawOnSelectedRowsChange(newRawSelectedRows);
  }
  function handleKeyDown(args, event) {
    rawOnCellKeyDown == null ? void 0 : rawOnCellKeyDown(args, event);
    if (event.isGridDefaultPrevented()) return;
    if (args.mode === "EDIT") return;
    const {
      column,
      rowIdx,
      selectCell
    } = args;
    const idx = (column == null ? void 0 : column.idx) ?? -1;
    const row2 = rows[rowIdx];
    if (!isGroupRow(row2)) return;
    if (idx === -1 && (event.key === leftKey && row2.isExpanded || event.key === rightKey && !row2.isExpanded)) {
      event.preventDefault();
      event.preventGridDefault();
      toggleGroup(row2.id);
    }
    if (idx === -1 && event.key === leftKey && !row2.isExpanded && row2.level !== 0) {
      const parentRowAndIndex = getParentRowAndIndex(row2);
      if (parentRowAndIndex !== void 0) {
        event.preventGridDefault();
        selectCell({
          idx,
          rowIdx: parentRowAndIndex[1]
        });
      }
    }
    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {
      event.preventGridDefault();
    }
  }
  function handleRowsChange(updatedRows, {
    indexes,
    column
  }) {
    if (!onRowsChange) return;
    const updatedRawRows = [...rawRows];
    const rawIndexes = [];
    for (const index of indexes) {
      const rawIndex = rawRows.indexOf(rows[index]);
      updatedRawRows[rawIndex] = updatedRows[index];
      rawIndexes.push(rawIndex);
    }
    onRowsChange(updatedRawRows, {
      indexes: rawIndexes,
      column
    });
  }
  function toggleGroup(groupId) {
    const newExpandedGroupIds = new Set(expandedGroupIds);
    if (newExpandedGroupIds.has(groupId)) {
      newExpandedGroupIds.delete(groupId);
    } else {
      newExpandedGroupIds.add(groupId);
    }
    onExpandedGroupIdsChange(newExpandedGroupIds);
  }
  function renderRow(key, {
    row: row2,
    rowClass,
    onCellClick,
    onCellDoubleClick,
    onCellContextMenu,
    onRowChange,
    lastFrozenColumnIndex,
    copiedCellIdx,
    draggedOverCellIdx,
    setDraggedOverRowIdx,
    selectedCellEditor,
    ...rowProps
  }) {
    if (isGroupRow(row2)) {
      const {
        startRowIndex
      } = row2;
      return (0, import_jsx_runtime.jsx)(GroupedRow$1, {
        ...rowProps,
        "aria-rowindex": headerAndTopSummaryRowsCount + startRowIndex + 1,
        row: row2,
        groupBy,
        toggleGroup: toggleGroupLatest
      }, key);
    }
    let ariaRowIndex = rowProps["aria-rowindex"];
    const parentRowAndIndex = getParentRowAndIndex(row2);
    if (parentRowAndIndex !== void 0) {
      const {
        startRowIndex,
        childRows
      } = parentRowAndIndex[0];
      const groupIndex = childRows.indexOf(row2);
      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;
    }
    return rawRenderRow(key, {
      ...rowProps,
      "aria-rowindex": ariaRowIndex,
      row: row2,
      rowClass,
      onCellClick,
      onCellDoubleClick,
      onCellContextMenu,
      onRowChange,
      lastFrozenColumnIndex,
      copiedCellIdx,
      draggedOverCellIdx,
      setDraggedOverRowIdx,
      selectedCellEditor
    });
  }
  return (0, import_jsx_runtime.jsx)(DataGrid$1, {
    ...props,
    role: "treegrid",
    "aria-rowcount": rowsCount + 1 + (((_b = props.topSummaryRows) == null ? void 0 : _b.length) ?? 0) + (((_c = props.bottomSummaryRows) == null ? void 0 : _c.length) ?? 0),
    ref,
    columns,
    rows,
    rowHeight,
    rowKeyGetter,
    onRowsChange: handleRowsChange,
    selectedRows,
    onSelectedRowsChange,
    onCellKeyDown: handleKeyDown,
    renderers: {
      ...renderers,
      renderRow
    }
  });
}
function isReadonlyArray(arr) {
  return Array.isArray(arr);
}
var TreeDataGrid$1 = (0, import_react.forwardRef)(TreeDataGrid);
var textEditorInternalClassname = "t7vyx3i7-0-0-beta-47";
var textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;
function autoFocusAndSelect(input) {
  input == null ? void 0 : input.focus();
  input == null ? void 0 : input.select();
}
function textEditor({
  row: row2,
  column,
  onRowChange,
  onClose
}) {
  return (0, import_jsx_runtime.jsx)("input", {
    className: textEditorClassname,
    ref: autoFocusAndSelect,
    value: row2[column.key],
    onChange: (event) => onRowChange({
      ...row2,
      [column.key]: event.target.value
    }),
    onBlur: () => onClose(true, false)
  });
}
export {
  DataGridDefaultRenderersProvider,
  RowComponent$1 as Row,
  SELECT_COLUMN_KEY,
  SelectCellFormatter,
  SelectColumn,
  ToggleGroup,
  TreeDataGrid$1 as TreeDataGrid,
  DataGrid$1 as default,
  renderCheckbox,
  renderHeaderCell,
  renderSortIcon,
  renderSortPriority,
  renderToggleGroup,
  renderValue,
  textEditor,
  useHeaderRowSelection,
  useRowSelection
};
//# sourceMappingURL=react-data-grid.js.map
