{
  "version": 3,
  "sources": ["../../../../react-data-grid/src/utils/colSpanUtils.ts", "../../../../react-data-grid/src/utils/domUtils.ts", "../../../../react-data-grid/src/utils/eventUtils.ts", "../../../../react-data-grid/src/utils/keyboardUtils.ts", "../../../../react-data-grid/src/utils/renderMeasuringCells.tsx", "../../../../react-data-grid/src/utils/selectedCellUtils.ts", "../../../../react-data-grid/src/style/cell.ts", "../../../../react-data-grid/src/utils/styleUtils.ts", "../../../../react-data-grid/src/utils/index.ts", "../../../../react-data-grid/src/cellRenderers/renderCheckbox.tsx", "../../../../react-data-grid/src/cellRenderers/renderToggleGroup.tsx", "../../../../react-data-grid/src/cellRenderers/renderValue.tsx", "../../../../react-data-grid/src/DataGridDefaultRenderersProvider.ts", "../../../../react-data-grid/src/cellRenderers/SelectCellFormatter.tsx", "../../../../react-data-grid/src/hooks/useRowSelection.ts", "../../../../react-data-grid/src/Columns.tsx", "../../../../react-data-grid/src/hooks/useCalculatedColumns.ts", "../../../../react-data-grid/src/hooks/useLayoutEffect.ts", "../../../../react-data-grid/src/hooks/useColumnWidths.ts", "../../../../react-data-grid/src/hooks/useGridDimensions.ts", "../../../../react-data-grid/src/hooks/useLatestFunc.ts", "../../../../react-data-grid/src/hooks/useRovingTabIndex.ts", "../../../../react-data-grid/src/hooks/useViewportColumns.ts", "../../../../react-data-grid/src/hooks/useViewportRows.ts", "../../../../react-data-grid/src/DragHandle.tsx", "../../../../react-data-grid/src/EditCell.tsx", "../../../../react-data-grid/src/GroupedColumnHeaderCell.tsx", "../../../../react-data-grid/src/renderHeaderCell.tsx", "../../../../react-data-grid/src/HeaderCell.tsx", "../../../../react-data-grid/src/style/row.ts", "../../../../react-data-grid/src/HeaderRow.tsx", "../../../../react-data-grid/src/GroupedColumnHeaderRow.tsx", "../../../../react-data-grid/src/Cell.tsx", "../../../../react-data-grid/src/Row.tsx", "../../../../react-data-grid/src/ScrollToCell.tsx", "../../../../react-data-grid/src/sortStatus.tsx", "../../../../react-data-grid/src/style/core.ts", "../../../../react-data-grid/src/SummaryCell.tsx", "../../../../react-data-grid/src/SummaryRow.tsx", "../../../../react-data-grid/src/DataGrid.tsx", "../../../../react-data-grid/src/GroupCell.tsx", "../../../../react-data-grid/src/GroupRow.tsx", "../../../../react-data-grid/src/TreeDataGrid.tsx", "../../../../react-data-grid/src/editors/textEditor.tsx"],
  "sourcesContent": ["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n", "import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n", "import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n", "// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  const vKey = 86;\n  if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n", "import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n", "import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n", "import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    align-content: center;\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n\n    /* Add box-shadow on the last frozen cell */\n    &:nth-last-child(1 of &) {\n      box-shadow: var(--rdg-cell-frozen-box-shadow);\n    }\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n", "import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number): CSSProperties {\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen\n    },\n    ...extraClasses\n  );\n}\n", "import type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkbox = css`\n  @layer rdg.CheckboxInput {\n    display: block;\n    margin: auto;\n    inline-size: 20px;\n    block-size: 20px;\n\n    &:focus-visible {\n      outline: 2px solid var(--rdg-checkbox-focus-color);\n      outline-offset: -3px;\n    }\n\n    &:enabled {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox-input ${checkbox}`;\n\nexport function renderCheckbox({ onChange, indeterminate, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <input\n      ref={(el) => {\n        if (el) {\n          el.indeterminate = indeterminate === true;\n        }\n      }}\n      type=\"checkbox\"\n      className={checkboxClassname}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n", "import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n", "import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n", "import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby' | 'indeterminate' | 'onChange'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  indeterminate,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    indeterminate,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n", "import { createContext, useContext } from 'react';\n\nimport type { SelectHeaderRowEvent, SelectRowEvent } from '../types';\n\nexport interface RowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isRowSelectionDisabled: boolean;\n}\n\nconst RowSelectionContext = createContext<RowSelectionContextValue | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return {\n    isRowSelectionDisabled: rowSelectionContext.isRowSelectionDisabled,\n    isRowSelected: rowSelectionContext.isRowSelected,\n    onRowSelectionChange: rowSelectionChangeContext\n  };\n}\n\nexport interface HeaderRowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isIndeterminate: boolean;\n}\n\nconst HeaderRowSelectionContext = createContext<HeaderRowSelectionContextValue | undefined>(\n  undefined\n);\n\nexport const HeaderRowSelectionProvider = HeaderRowSelectionContext.Provider;\n\nconst HeaderRowSelectionChangeContext = createContext<\n  ((selectRowEvent: SelectHeaderRowEvent) => void) | undefined\n>(undefined);\n\nexport const HeaderRowSelectionChangeProvider = HeaderRowSelectionChangeContext.Provider;\n\nexport function useHeaderRowSelection() {\n  const headerRowSelectionContext = useContext(HeaderRowSelectionContext);\n  const headerRowSelectionChangeContext = useContext(HeaderRowSelectionChangeContext);\n\n  if (headerRowSelectionContext === undefined || headerRowSelectionChangeContext === undefined) {\n    throw new Error('useHeaderRowSelection must be used within DataGrid cells');\n  }\n\n  return {\n    isIndeterminate: headerRowSelectionContext.isIndeterminate,\n    isRowSelected: headerRowSelectionContext.isRowSelected,\n    onRowSelectionChange: headerRowSelectionChangeContext\n  };\n}\n", "import { useHeaderRowSelection, useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'rdg-select-column';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const { isIndeterminate, isRowSelected, onRowSelectionChange } = useHeaderRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      indeterminate={isIndeterminate}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ checked: isIndeterminate ? false : checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const { isRowSelectionDisabled, isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      disabled={isRowSelectionDisabled}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const { isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n", "import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultCellRenderer\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultCellRenderer,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n", "// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n", "import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement | null>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement | null>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current?.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n", "import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      const { clientHeight, offsetHeight } = gridRef.current!;\n\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight] as const;\n}\n", "import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n", "import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n", "import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n", "import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n", "import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  gridRowStart: number;\n  column: CalculatedColumn<R, SR>;\n  columnWidth: number | string;\n  maxColIdx: number;\n  isLastRow: boolean;\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onClick: () => void;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  const { idx, rowIdx } = selectedPosition;\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  function getStyle(): React.CSSProperties {\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n  }\n\n  return (\n    <div\n      style={getStyle()}\n      className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n      onClick={onClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n", "import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>(undefined);\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            rowIdx,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n", "import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport type { GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onClick={onClick}\n    >\n      {column.name}\n    </div>\n  );\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n", "import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  opacity: 0.5;\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  background-color: var(--rdg-header-draggable-background-color);\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  dragDropKey: string;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}: HeaderCellProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n    let hasDoubleClicked = false;\n\n    function onPointerMove(event: PointerEvent) {\n      const { width, right, left } = headerCell.getBoundingClientRect();\n      let newWidth = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      newWidth = clampColumnWidth(newWidth, column);\n      if (width > 0 && newWidth !== width) {\n        onColumnResize(column, newWidth);\n      }\n    }\n\n    function onDoubleClick() {\n      hasDoubleClicked = true;\n      onColumnResize(column, 'max-content');\n    }\n\n    function onLostPointerCapture(event: PointerEvent) {\n      // Handle final pointer position that may have been skipped by coalesced pointer move events.\n      // Skip move pointer handling if the user double-clicked.\n      if (!hasDoubleClicked) {\n        onPointerMove(event);\n      }\n\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('dblclick', onDoubleClick);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('dblclick', onDoubleClick);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    selectCell({ idx: column.idx, rowIdx });\n\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    // The dragDropKey is derived from the useId() hook, which can sometimes generate keys with uppercase letters.\n    // When setting data using event.dataTransfer.setData(), the key is automatically converted to lowercase in some browsers.\n    // To ensure consistent comparison, we normalize the dragDropKey to lowercase before checking its presence in the event's dataTransfer types.\n    // https://html.spec.whatwg.org/multipage/dnd.html#the-datatransfer-interface\n    if (event.dataTransfer.types.includes(dragDropKey.toLowerCase())) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey.toLowerCase());\n      if (sourceKey !== column.key) {\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let draggableProps: React.HTMLAttributes<HTMLDivElement> | undefined;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      /* events fired on the draggable target */\n      onDragStart,\n      onDragEnd,\n      /* events fired on the drop targets */\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        ...getCellStyle(column, colSpan)\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onKeyDown={sortable ? onKeyDown : undefined}\n      {...draggableProps}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        tabIndex: childTabIndex\n      })}\n\n      {resizable && (\n        <div\n          className={resizeHandleClassname}\n          onClick={stopPropagation}\n          onPointerDown={onPointerDown}\n        />\n      )}\n    </div>\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n", "import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      block-size: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n\nexport const topSummaryRowClassname = 'rdg-top-summary-row';\n\nexport const bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n", "import { memo, useId } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Position } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const dragDropKey = useId();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        dragDropKey={dragDropKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => React.JSX.Element;\n", "import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => React.JSX.Element;\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => React.JSX.Element;\n", "import { forwardRef, memo, useMemo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc, type RowSelectionContextValue } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    selectedCellIdx,\n    isRowSelectionDisabled,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelected, isRowSelectionDisabled }),\n    [isRowSelectionDisabled, isRowSelected]\n  );\n\n  return (\n    <RowSelectionProvider value={selectionValue}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => React.JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n", "import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n", "import { css } from '@linaria/core';\n\nimport { cell } from './cell';\nimport { bottomSummaryRowClassname, row, topSummaryRowClassname } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-color: #66afe9;\n    --rdg-font-size: 14px;\n    --rdg-cell-frozen-box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n\n    &:dir(rtl) {\n      --rdg-cell-frozen-box-shadow: -2px 0 5px -2px rgba(136, 136, 136, 0.3);\n    }\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n    accent-color: light-dark(hsl(207deg 100% 29%), hsl(207deg 100% 79%));\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n\n    > :nth-last-child(1 of .${topSummaryRowClassname}) {\n      > .${cell} {\n        border-block-end: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n\n    > :nth-child(1 of .${bottomSummaryRowClassname}) {\n      > .${cell} {\n        border-block-start: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => React.JSX.Element;\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport {\n  bottomSummaryRowClassname,\n  rowClassname,\n  rowSelectedClassname,\n  topSummaryRowClassname\n} from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [`${topSummaryRowClassname} ${topSummaryRow}`]: isTop,\n          [bottomSummaryRowClassname]: !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => React.JSX.Element;\n", "import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  HeaderRowSelectionChangeProvider,\n  HeaderRowSelectionProvider,\n  RowSelectionChangeProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows,\n  type HeaderRowSelectionContextValue\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectHeaderRowEvent,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable' | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly ColumnOrColumnGroup<NoInfer<R>, NoInfer<SR>>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: NoInfer<R>) => K>;\n  onRowsChange?: Maybe<(rows: NoInfer<R>[], data: RowsChangeData<NoInfer<R>, NoInfer<SR>>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: NoInfer<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Determines if row selection is disabled, per row */\n  isRowSelectionDisabled?: Maybe<(row: NoInfer<R>) => boolean>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<NoInfer<K>>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<NoInfer<R>, NoInfer<SR>>>;\n  onFill?: Maybe<(event: FillEvent<NoInfer<R>>) => NoInfer<R>>;\n  onCopy?: Maybe<(event: CopyEvent<NoInfer<R>>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<NoInfer<R>>) => NoInfer<R>>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  onCellKeyDown?: Maybe<\n    (args: CellKeyDownArgs<NoInfer<R>, NoInfer<SR>>, event: CellKeyboardEvent) => void\n  >;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<NoInfer<R>, NoInfer<SR>>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n  /** Called when a column is reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<NoInfer<R>, NoInfer<SR>>>;\n  rowClass?: Maybe<(row: NoInfer<R>, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    isRowSelectionDisabled,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return (\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width\n      );\n    },\n    [measuredColumnWidths, resizedColumnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const headerSelectionValue = useMemo((): HeaderRowSelectionContextValue => {\n    // no rows to select = explicitely unchecked\n    let hasSelectedRow = false;\n    let hasUnselectedRow = false;\n\n    if (rowKeyGetter != null && selectedRows != null && selectedRows.size > 0) {\n      for (const row of rows) {\n        if (selectedRows.has(rowKeyGetter(row))) {\n          hasSelectedRow = true;\n        } else {\n          hasUnselectedRow = true;\n        }\n\n        if (hasSelectedRow && hasUnselectedRow) break;\n      }\n    }\n\n    return {\n      isRowSelected: hasSelectedRow && !hasUnselectedRow,\n      isIndeterminate: hasSelectedRow && hasUnselectedRow\n    };\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight =\n    headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectHeaderRowLatest = useLatestFunc(selectHeaderRow);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current!.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    focusCellOrCellContent();\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectHeaderRow(args: SelectHeaderRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    const newSelectedRows = new Set(selectedRows);\n    for (const row of rows) {\n      if (isRowSelectionDisabled?.(row) === true) continue;\n      const rowKey = rowKeyGetter(row);\n      if (args.checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const { row, checked, isShiftClick } = args;\n    if (isRowSelectionDisabled?.(row) === true) return;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    const previousRowIdx = lastSelectedRowIdx.current;\n    const rowIdx = rows.indexOf(row);\n    lastSelectedRowIdx.current = rowIdx;\n\n    if (checked) {\n      newSelectedRows.add(rowKey);\n    } else {\n      newSelectedRows.delete(rowKey);\n    }\n\n    if (\n      isShiftClick &&\n      previousRowIdx !== -1 &&\n      previousRowIdx !== rowIdx &&\n      previousRowIdx < rows.length\n    ) {\n      const step = sign(rowIdx - previousRowIdx);\n      for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n        const row = rows[i];\n        if (isRowSelectionDisabled?.(row) === true) continue;\n        if (checked) {\n          newSelectedRows.add(rowKeyGetter(row));\n        } else {\n          newSelectedRows.delete(rowKeyGetter(row));\n        }\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event)\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        // copy highlighted text only\n        if (window.getSelection()?.isCollapsed === false) return;\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const row = rows[position.rowIdx];\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (enableEditor && isCellEditable(position)) {\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function focusCellOrCellContent() {\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  }\n\n  function renderDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const columnWidth = getColumnWidth(column);\n\n    return (\n      <DragHandle\n        gridRowStart={headerAndTopSummaryRowsCount + rowIdx + 1}\n        rows={rows}\n        column={column}\n        columnWidth={columnWidth}\n        maxColIdx={maxColIdx}\n        isLastRow={rowIdx === maxRowIdx}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onClick={focusCellOrCellContent}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelectionDisabled: isRowSelectionDisabled?.(row) ?? false,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-scroll-height': `${scrollHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <HeaderRowSelectionChangeProvider value={selectHeaderRowLatest}>\n          <HeaderRowSelectionProvider value={headerSelectionValue}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </HeaderRowSelectionProvider>\n        </HeaderRowSelectionChangeProvider>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + 1 + rowIdx;\n              const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  key={rowIdx}\n                  aria-rowindex={gridRowStart}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultRenderersProvider>\n\n      {renderDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => React.JSX.Element;\n", "import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\n\ninterface GroupCellProps<R, SR> {\n  id: string;\n  groupKey: unknown;\n  childRows: readonly R[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n  isExpanded: boolean;\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n  isGroupByColumn: boolean;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!isGroupByColumn || isLevelMatching) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => React.JSX.Element;\n", "import { memo, useMemo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, type RowSelectionContextValue } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { BaseRenderRowProps, GroupRow } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child, .${cellFrozen}),\n    > :nth-last-child(n + 2 of .${cellFrozen}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\ninterface GroupRowRendererProps<R, SR> extends BaseRenderRowProps<R, SR> {\n  row: GroupRow<R>;\n  groupBy: readonly string[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  groupBy,\n  toggleGroup,\n  isRowSelectionDisabled,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n\n  function handleSelectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelectionDisabled: false, isRowSelected }),\n    [isRowSelected]\n  );\n\n  return (\n    <RowSelectionProvider value={selectionValue}>\n      <div\n        role=\"row\"\n        aria-level={row.level + 1} // aria-level is 1-based\n        aria-setsize={row.setSize}\n        aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n        aria-expanded={row.isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          selectedCellIdx === -1 && rowSelectedClassname,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={row.id}\n            groupKey={row.groupKey}\n            childRows={row.childRows}\n            isExpanded={row.isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n            isGroupByColumn={groupBy.includes(column.key)}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(\n  props: GroupRowRendererProps<R, SR>\n) => React.JSX.Element;\n", "import { forwardRef, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\n\nimport { useLatestFunc } from './hooks';\nimport { assertIsValidKeyGetter, isCtrlKeyHeldDown } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  Column,\n  GroupRow,\n  Maybe,\n  Omit,\n  RenderRowProps,\n  RowHeightArgs,\n  RowsChangeData\n} from './types';\nimport { renderToggleGroup } from './cellRenderers';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport DataGrid from './DataGrid';\nimport type { DataGridHandle, DataGridProps } from './DataGrid';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\nimport GroupedRow from './GroupRow';\nimport { defaultRenderRow } from './Row';\n\nexport interface TreeDataGridProps<R, SR = unknown, K extends Key = Key>\n  extends Omit<\n    DataGridProps<R, SR, K>,\n    'columns' | 'role' | 'aria-rowcount' | 'rowHeight' | 'onFill' | 'isRowSelectionDisabled'\n  > {\n  columns: readonly Column<NoInfer<R>, NoInfer<SR>>[];\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<NoInfer<R>>) => number)>;\n  groupBy: readonly string[];\n  rowGrouper: (\n    rows: readonly NoInfer<R>[],\n    columnKey: string\n  ) => Record<string, readonly NoInfer<R>[]>;\n  expandedGroupIds: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange: (expandedGroupIds: Set<unknown>) => void;\n}\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\nfunction TreeDataGrid<R, SR, K extends Key>(\n  {\n    columns: rawColumns,\n    rows: rawRows,\n    rowHeight: rawRowHeight,\n    rowKeyGetter: rawRowKeyGetter,\n    onCellKeyDown: rawOnCellKeyDown,\n    onRowsChange,\n    selectedRows: rawSelectedRows,\n    onSelectedRowsChange: rawOnSelectedRowsChange,\n    renderers,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    ...props\n  }: TreeDataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  const { columns, groupBy } = useMemo(() => {\n    const columns = [...rawColumns].sort(({ key: aKey }, { key: bKey }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const groupBy: string[] = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n\n    return { columns, groupBy };\n  }, [rawColumns, rawGroupBy]);\n\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return (row: R | GroupRow<R>): number => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({ type: 'GROUP', row });\n        }\n        return rawRowHeight({ type: 'ROW', row });\n      };\n    }\n\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n\n  const getParentRowAndIndex = useCallback(\n    (row: R | GroupRow<R>) => {\n      const rowIdx = rows.indexOf(row);\n      for (let i = rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n          return [parentRow, i] as const;\n        }\n      }\n\n      return undefined;\n    },\n    [isGroupRow, rows]\n  );\n\n  const rowKeyGetter = useCallback(\n    (row: R | GroupRow<R>) => {\n      if (isGroupRow(row)) {\n        return row.id;\n      }\n\n      if (typeof rawRowKeyGetter === 'function') {\n        return rawRowKeyGetter(row);\n      }\n\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        const { startRowIndex, childRows } = parentRowAndIndex[0];\n        const groupIndex = childRows.indexOf(row);\n        return startRowIndex + groupIndex + 1;\n      }\n\n      return rows.indexOf(row);\n    },\n    [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]\n  );\n\n  const selectedRows = useMemo((): Maybe<ReadonlySet<Key>> => {\n    if (rawSelectedRows == null) return null;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const selectedRows = new Set<Key>(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        // select parent row if all the children are selected\n        const isGroupRowSelected = row.childRows.every((cr) =>\n          rawSelectedRows.has(rawRowKeyGetter(cr))\n        );\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n\n  function onSelectedRowsChange(newSelectedRows: Set<Key>) {\n    if (!rawOnSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // select all children if the parent row is selected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key as K);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // unselect all children if the parent row is unselected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key as K);\n        }\n      }\n    }\n\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n\n  function handleKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) return;\n    if (\n      idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((event.key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (event.key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({ idx, rowIdx: parentRowAndIndex[1] });\n      }\n    }\n\n    // Prevent copy/paste on group rows\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n\n  function handleRowsChange(updatedRows: R[], { indexes, column }: RowsChangeData<R, SR>) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes: number[] = [];\n    for (const index of indexes) {\n      const rawIndex = rawRows.indexOf(rows[index] as R);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    }\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n\n  function toggleGroup(groupId: unknown) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function renderRow(\n    key: Key,\n    {\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      ...rowProps\n    }: RenderRowProps<R, SR>\n  ) {\n    if (isGroupRow(row)) {\n      const { startRowIndex } = row;\n      return (\n        <GroupedRow\n          key={key}\n          {...rowProps}\n          aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1}\n          row={row}\n          groupBy={groupBy}\n          toggleGroup={toggleGroupLatest}\n        />\n      );\n    }\n\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const { startRowIndex, childRows } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor\n    });\n  }\n\n  return (\n    <DataGrid<R, SR, Key>\n      {...props}\n      role=\"treegrid\"\n      aria-rowcount={\n        rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0)\n      }\n      ref={ref}\n      columns={columns}\n      rows={rows as R[]} // TODO: check types\n      rowHeight={rowHeight}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={handleRowsChange}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      onCellKeyDown={handleKeyDown}\n      renderers={{\n        ...renderers,\n        renderRow\n      }}\n    />\n  );\n}\n\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport default forwardRef(TreeDataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: TreeDataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => React.JSX.Element;\n", "import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],
  "mappings": "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",
  "names": ["getColSpan", "column", "lastFrozenColumnIndex", "args", "colSpan", "Number", "isInteger", "frozen", "idx", "undefined", "stopPropagation", "event", "scrollIntoView", "element", "inline", "block", "createCellEvent", "defaultPrevented", "cellEvent", "preventGridDefault", "isGridDefaultPrevented", "Object", "setPrototypeOf", "getPrototypeOf", "nonInputKeys", "Set", "isCtrlKeyHeldDown", "e", "ctrlKey", "metaKey", "key", "isDefaultCellInput", "vKey", "keyCode", "has", "onEditorNavigation", "target", "HTMLInputElement", "HTMLTextAreaElement", "HTMLSelectElement", "closest", "querySelectorAll", "length", "measuringCellClassname", "renderMeasuringCells", "viewportColumns", "map", "minWidth", "maxWidth", "_jsx", "className", "style", "gridColumnStart", "isSelectedCellEditable", "selectedPosition", "columns", "rows", "row", "rowIdx", "isCellEditableUtil", "renderEditCell", "editable", "getSelectedCellColSpan", "topSummaryRows", "bottomSummaryRows", "mainHeaderRowIdx", "topSummaryRowsCount", "type", "getNextSelectedCellPosition", "moveUp", "moveNext", "cellNavigationMode", "colSpanColumns", "minRowIdx", "maxRowIdx", "currentPosition", "currentIdx", "currentRowIdx", "nextPosition", "isCellWithinBounds", "nextIdx", "nextRowIdx", "columnsCount", "setColSpan", "colIdx", "getParentRowIdx", "parent", "level", "setHeaderGroupColAndRowSpan", "nextColumn", "parentRowIdx", "found", "isAfterLastColumn", "isBeforeFirstColumn", "isLastRow", "isFirstRow", "nextParentRowIdx", "canExitGrid", "maxColIdx", "shiftKey", "atLastCellInRow", "atFirstCellInRow", "atLastRow", "atFirstRow", "cell", "cellClassname", "cellFrozen", "cellFrozenClassname", "getRowStyle", "getHeaderCellStyle", "rowSpan", "gridRowEnd", "paddingBlockStart", "insetBlockStart", "gridRowStart", "getCellStyle", "index", "gridColumnEnd", "insetInlineStart", "getCellClassname", "extraClasses", "clsx", "min", "max", "floor", "sign", "abs", "Math", "assertIsValidKeyGetter", "keyGetter", "Error", "clampColumnWidth", "width", "getHeaderCellRowSpan", "checkbox", "checkboxClassname", "renderCheckbox", "onChange", "indeterminate", "props", "handleChange", "checked", "nativeEvent", "ref", "el", "groupCellContent", "groupCellContentClassname", "caret", "caretClassname", "renderToggleGroup", "ToggleGroup", "groupKey", "isExpanded", "tabIndex", "toggleGroup", "handleKeyDown", "d", "_jsxs", "onKeyDown", "children", "viewBox", "height", "renderValue", "DataGridDefaultRenderersContext", "createContext", "DataGridDefaultRenderersProvider", "Provider", "useDefaultRenderers", "useContext", "SelectCellFormatter", "value", "disabled", "ariaLabel", "ariaLabelledBy", "RowSelectionContext", "RowSelectionProvider", "RowSelectionChangeContext", "RowSelectionChangeProvider", "useRowSelection", "rowSelectionContext", "rowSelectionChangeContext", "isRowSelectionDisabled", "isRowSelected", "onRowSelectionChange", "HeaderRowSelectionContext", "HeaderRowSelectionProvider", "HeaderRowSelectionChangeContext", "HeaderRowSelectionChangeProvider", "useHeaderRowSelection", "headerRowSelectionContext", "headerRowSelectionChangeContext", "isIndeterminate", "SELECT_COLUMN_KEY", "HeaderRenderer", "SelectFormatter", "isShiftClick", "SelectGroupFormatter", "SelectColumn", "name", "resizable", "sortable", "renderHeaderCell", "renderCell", "renderGroupCell", "DEFAULT_COLUMN_WIDTH", "DEFAULT_COLUMN_MIN_WIDTH", "useCalculatedColumns", "rawColumns", "defaultColumnOptions", "getColumnWidth", "viewportWidth", "scrollLeft", "enableVirtualization", "defaultWidth", "defaultMinWidth", "defaultMaxWidth", "defaultCellRenderer", "defaultSortable", "defaultResizable", "defaultDraggable", "draggable", "headerRowsCount", "useMemo", "collectColumns", "rawColumn", "calculatedColumnParent", "headerCellClass", "push", "sort", "aKey", "frozenA", "bKey", "frozenB", "forEach", "updateColumnParent", "templateColumns", "layoutCssVars", "totalFrozenColumnWidth", "columnMetrics", "Map", "left", "set", "columnMetric", "get", "i", "colOverscanStartIdx", "colOverscanEndIdx", "viewportLeft", "viewportRight", "lastColIdx", "firstUnfrozenColumnIdx", "colVisibleStartIdx", "colVisibleEndIdx", "useLayoutEffect", "window", "useEffect", "useOriginalLayoutEffect", "useColumnWidths", "gridRef", "gridWidth", "resizedColumnWidths", "measuredColumnWidths", "setResizedColumnWidths", "setMeasuredColumnWidths", "onColumnResize", "prevGridWidthRef", "useRef", "columnsCanFlex", "ignorePreviouslyMeasuredColumns", "current", "newTemplateColumns", "columnsToMeasure", "gridTemplateColumns", "join", "updateMeasuredWidths", "newMeasuredColumnWidths", "hasChanges", "measuredWidth", "measureColumnWidth", "delete", "handleColumnResize", "nextWidth", "resizingKey", "flushSync", "newResizedColumnWidths", "selector", "CSS", "escape", "measuringCell", "querySelector", "getBoundingClientRect", "useGridDimensions", "inlineSize", "setInlineSize", "useState", "blockSize", "setBlockSize", "horizontalScrollbarHeight", "setHorizontalScrollbarHeight", "ResizeObserver", "clientWidth", "clientHeight", "offsetWidth", "offsetHeight", "initialHorizontalScrollbarHeight", "initialWidth", "initialHeight", "resizeObserver", "entries", "size", "contentBoxSize", "observe", "disconnect", "useLatestFunc", "fn", "callbackFn", "useCallback", "useRovingTabIndex", "isSelected", "isChildFocused", "setIsChildFocused", "onFocus", "currentTarget", "isFocusable", "childTabIndex", "useViewportColumns", "rowOverscanStartIdx", "rowOverscanEndIdx", "startIdx", "updateStartIdx", "useViewportRows", "rowHeight", "scrollTop", "totalRowHeight", "gridTemplateRows", "getRowTop", "getRowHeight", "findRowIdx", "offset", "rowPositions", "currentRowHeight", "position", "top", "validateRowIdx", "start", "end", "middle", "currentOffset", "overscanThreshold", "rowVisibleStartIdx", "rowVisibleEndIdx", "cellDragHandle", "cellDragHandleFrozenClassname", "cellDragHandleClassname", "DragHandle", "columnWidth", "latestDraggedOverRowIdx", "isCellEditable", "onRowsChange", "onFill", "onClick", "setDragging", "setDraggedOverRowIdx", "handleMouseDown", "preventDefault", "buttons", "addEventListener", "onMouseOver", "onMouseUp", "removeEventListener", "handleDragEnd", "overRowIdx", "startRowIndex", "endRowIndex", "updateRows", "handleDoubleClick", "startRowIdx", "endRowIdx", "sourceRow", "updatedRows", "indexes", "updatedRow", "columnKey", "targetRow", "getStyle", "marginEnd", "isLastColumn", "marginInlineEnd", "marginBlockEnd", "onMouseDown", "onDoubleClick", "cellEditing", "EditCell", "onRowChange", "closeEditor", "navigate", "frameRequestRef", "commitOnOutsideClick", "editorOptions", "commitOnOutsideMouseDown", "onClose", "onWindowCaptureMouseDown", "requestAnimationFrame", "capture", "cancelFrameRequest", "cancelAnimationFrame", "mode", "commitChanges", "shouldFocusCell", "onEditorRowChange", "commitChangesAndFocus", "cellClass", "displayCellContent", "role", "onMouseDownCapture", "_Fragment", "GroupedColumnHeaderCell", "isCellSelected", "selectCell", "headerSortCellClassname", "headerSortName", "headerSortNameClassname", "sortDirection", "priority", "SortableHeaderCell", "renderSortStatus", "cellSortableClassname", "cellResizable", "cellResizableClassname", "resizeHandleClassname", "cellDraggableClassname", "cellDragging", "cellDraggingClassname", "cellOver", "cellOverClassname", "HeaderCell", "onColumnsReorder", "sortColumns", "onSortColumnsChange", "shouldFocusGrid", "direction", "dragDropKey", "isDragging", "setIsDragging", "isOver", "setIsOver", "isRtl", "sortIndex", "findIndex", "sortColumn", "ariaSort", "defaultRenderHeaderCell", "onPointerDown", "pointerType", "pointerId", "headerCell", "parentElement", "right", "clientX", "hasDoubleClicked", "onPointerMove", "newWidth", "onLostPointerCapture", "setPointerCapture", "onSort", "ctrlClick", "sortDescendingFirst", "nextSort", "nextSortColumn", "nextSortColumns", "splice", "handleFocus", "onDragStart", "dataTransfer", "setData", "dropEffect", "onDragEnd", "onDragOver", "onDrop", "types", "includes", "toLowerCase", "sourceKey", "getData", "onDragEnter", "isEventPertinent", "onDragLeave", "draggableProps", "relatedTarget", "contains", "rowClassname", "rowSelected", "rowSelectedClassname", "rowSelectedWithFrozenCell", "topSummaryRowClassname", "bottomSummaryRowClassname", "headerRow", "headerRowClassname", "HeaderRow", "selectedCellIdx", "useId", "cells", "memo", "GroupedColumnHeaderRow", "renderedParents", "add", "cellCopied", "cellCopiedClassname", "cellDraggedOver", "cellDraggedOverClassname", "Cell", "isCopied", "isDraggedOver", "onContextMenu", "isEditable", "selectCellWrapper", "openEditor", "handleClick", "handleContextMenu", "handleRowChange", "newRow", "Row", "copiedCellIdx", "draggedOverCellIdx", "selectedCellEditor", "onCellClick", "onCellDoubleClick", "onCellContextMenu", "rowClass", "onMouseEnter", "handleDragEnter", "selectionValue", "RowComponent", "forwardRef", "defaultRenderRow", "ScrollToCell", "scrollToPosition", "gridElement", "setScrollToCellPosition", "removeScrollToCell", "observer", "IntersectionObserver", "root", "threshold", "gridColumn", "gridRow", "arrow", "arrowClassname", "renderSortIcon", "renderSortPriority", "rootClassname", "viewportDragging", "viewportDraggingClassname", "focusSinkClassname", "focusSinkHeaderAndSummaryClassname", "summaryCellClassname", "SummaryCell", "summaryCellClass", "renderSummaryCell", "summaryRow", "topSummaryRow", "summaryRowClassname", "SummaryRow", "bottom", "isTop", "ariaRowIndex", "DataGrid", "rowKeyGetter", "rawRowHeight", "headerRowHeight", "rawHeaderRowHeight", "summaryRowHeight", "rawSummaryRowHeight", "selectedRows", "onSelectedRowsChange", "onCellKeyDown", "onSelectedCellChange", "onScroll", "onCopy", "onPaste", "rawEnableVirtualization", "renderers", "rawDirection", "rawRole", "ariaDescribedBy", "rawAriaRowCount", "testId", "defaultRenderers", "renderRow", "defaultRenderSortStatus", "defaultRenderCheckbox", "noRowsFallback", "setScrollTop", "setScrollLeft", "copiedCell", "setCopiedCell", "draggedOverRowIdx", "setOverRowIdx", "setScrollToPosition", "gridHeight", "bottomSummaryRowsCount", "summaryRowsCount", "headerAndTopSummaryRowsCount", "groupedColumnHeaderRowsCount", "setSelectedPosition", "prevSelectedPosition", "lastSelectedRowIdx", "focusSinkRef", "shouldFocusCellRef", "isTreeGrid", "headerRowsHeight", "summaryRowsHeight", "isSelectable", "leftKey", "rightKey", "ariaRowCount", "defaultGridComponents", "headerSelectionValue", "hasSelectedRow", "hasUnselectedRow", "minColIdx", "selectedCellIsWithinSelectionBounds", "isCellWithinSelectionBounds", "selectedCellIsWithinViewportBounds", "isCellWithinViewportBounds", "scrollHeight", "handleColumnResizeLatest", "onColumnsReorderLastest", "onSortColumnsChangeLatest", "onCellClickLatest", "onCellDoubleClickLatest", "onCellContextMenuLatest", "selectHeaderRowLatest", "selectHeaderRow", "selectRowLatest", "selectRow", "handleFormatterRowChangeLatest", "updateRow", "selectCellLatest", "selectHeaderCellLatest", "isSamePosition", "focus", "preventScroll", "focusCellOrCellContent", "useImperativeHandle", "scrollToCell", "scrollToIdx", "scrollToRowIdx", "isRowIdxWithinViewportBounds", "newSelectedRows", "rowKey", "previousRowIdx", "indexOf", "step", "Element", "isCellEvent", "isRowEvent", "cKey", "getSelection", "isCollapsed", "handleCopy", "handlePaste", "handleCellInput", "handleScroll", "commitEditorChanges", "sourceColumnKey", "targetColumn", "updatedTargetRow", "targetColumnKey", "originalRow", "isColIdxWithinSelectionBounds", "isCellWithinEditBounds", "enableEditor", "samePosition", "getCellToScroll", "getNextPosition", "nextRowY", "nextSelectedCellPosition", "getDraggedOverCellIdx", "elementToFocus", "renderDragHandle", "getCellEditor", "getRowViewportColumns", "selectedColumn", "slice", "getViewportRows", "rowElements", "selectedIdx", "selectedRowIdx", "viewportRowIdx", "isRowOutsideViewport", "rowColumns", "c", "templateRows", "isGroupRowFocused", "scrollPaddingInlineStart", "scrollPaddingBlock", "dir", "Array", "from", "_", "summaryRowIdx", "isSummaryRowSelected", "gridEl", "p1", "p2", "GroupCell", "id", "childRows", "groupColumnIndex", "isGroupByColumn", "toggleGroupWrapper", "isLevelMatching", "cursor", "groupRow", "groupRowClassname", "GroupedRow", "groupBy", "handleSelectGroup", "setSize", "posInSet", "TreeDataGrid", "rawRows", "rawRowKeyGetter", "rawOnCellKeyDown", "rawSelectedRows", "rawOnSelectedRowsChange", "rawGroupBy", "rowGrouper", "expandedGroupIds", "onExpandedGroupIdsChange", "rawRenderRow", "toggleGroupLatest", "groupedRows", "rowsCount", "groupRows", "groupByKey", "remainingGroupByKeys", "groupRowsCount", "groups", "childGroups", "childRowsCount", "isGroupRow", "allGroupRows", "flattenedRows", "expandGroup", "parentId", "isReadonlyArray", "keys", "getParentRowAndIndex", "parentRow", "parentRowAndIndex", "groupIndex", "isGroupRowSelected", "every", "cr", "newRawSelectedRows", "handleRowsChange", "updatedRawRows", "rawIndexes", "rawIndex", "groupId", "newExpandedGroupIds", "rowProps", "arr", "isArray", "textEditorInternalClassname", "textEditorClassname", "autoFocusAndSelect", "input", "select", "textEditor", "onBlur"]
}
