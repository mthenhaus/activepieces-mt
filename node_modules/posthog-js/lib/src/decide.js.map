{"version":3,"file":"decide.js","sourceRoot":"","sources":["../../src/decide.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from './posthog-core'\nimport { Compression, DecideResponse, RemoteConfig } from './types'\nimport { STORED_GROUP_PROPERTIES_KEY, STORED_PERSON_PROPERTIES_KEY } from './constants'\n\nimport { createLogger } from './utils/logger'\nimport { assignableWindow, document } from './utils/globals'\n\nconst logger = createLogger('[Decide]')\n\nexport class Decide {\n    constructor(private readonly instance: PostHog) {\n        // don't need to wait for `decide` to return if flags were provided on initialisation\n        this.instance.decideEndpointWasHit = this.instance._hasBootstrappedFeatureFlags()\n    }\n\n    private _loadRemoteConfigJs(cb: (config?: RemoteConfig) => void): void {\n        if (assignableWindow.__PosthogExtensions__?.loadExternalDependency) {\n            assignableWindow.__PosthogExtensions__?.loadExternalDependency?.(this.instance, 'remote-config', () => {\n                return cb(assignableWindow._POSTHOG_CONFIG)\n            })\n        } else {\n            logger.error('PostHog Extensions not found. Cannot load remote config.')\n            cb()\n        }\n    }\n\n    private _loadRemoteConfigJSON(cb: (config?: RemoteConfig) => void): void {\n        this.instance._send_request({\n            method: 'GET',\n            url: this.instance.requestRouter.endpointFor('assets', `/array/${this.instance.config.token}/config`),\n            callback: (response) => {\n                cb(response.json as RemoteConfig | undefined)\n            },\n        })\n    }\n\n    call(): void {\n        // Call decide to get what features are enabled and other settings.\n        // As a reminder, if the /decide endpoint is disabled, feature flags, toolbar, session recording, autocapture,\n        // and compression will not be available.\n        const disableRemoteCalls = !!this.instance.config.advanced_disable_decide\n\n        if (!disableRemoteCalls) {\n            // TRICKY: Reset any decide reloads queued during config.loaded because they'll be\n            // covered by the decide call right above.\n            this.instance.featureFlags.resetRequestQueue()\n        }\n\n        if (this.instance.config.__preview_remote_config) {\n            // Attempt 1 - use the pre-loaded config if it came as part of the token-specific array.js\n            if (assignableWindow._POSTHOG_CONFIG) {\n                logger.info('Using preloaded remote config', assignableWindow._POSTHOG_CONFIG)\n                this.onRemoteConfig(assignableWindow._POSTHOG_CONFIG)\n                return\n            }\n\n            if (disableRemoteCalls) {\n                logger.warn('Remote config is disabled. Falling back to local config.')\n                return\n            }\n\n            // Attempt 2 - if we have the external deps loader then lets load the script version of the config that includes site apps\n            this._loadRemoteConfigJs((config) => {\n                if (!config) {\n                    logger.info('No config found after loading remote JS config. Falling back to JSON.')\n                    // Attempt 3 Load the config json instead of the script - we won't get site apps etc. but we will get the config\n                    this._loadRemoteConfigJSON((config) => {\n                        this.onRemoteConfig(config)\n                    })\n                    return\n                }\n\n                this.onRemoteConfig(config)\n            })\n\n            return\n        }\n\n        if (disableRemoteCalls) {\n            return\n        }\n\n        /*\n        Calls /decide endpoint to fetch options for autocapture, session recording, feature flags & compression.\n        */\n        const data = {\n            token: this.instance.config.token,\n            distinct_id: this.instance.get_distinct_id(),\n            groups: this.instance.getGroups(),\n            person_properties: this.instance.get_property(STORED_PERSON_PROPERTIES_KEY),\n            group_properties: this.instance.get_property(STORED_GROUP_PROPERTIES_KEY),\n            disable_flags:\n                this.instance.config.advanced_disable_feature_flags ||\n                this.instance.config.advanced_disable_feature_flags_on_first_load ||\n                undefined,\n        }\n\n        this.instance._send_request({\n            method: 'POST',\n            url: this.instance.requestRouter.endpointFor('api', '/decide/?v=3'),\n            data,\n            compression: this.instance.config.disable_compression ? undefined : Compression.Base64,\n            timeout: this.instance.config.feature_flag_request_timeout_ms,\n            callback: (response) => this.parseDecideResponse(response.json as DecideResponse | undefined),\n        })\n    }\n\n    parseDecideResponse(response?: DecideResponse): void {\n        this.instance.featureFlags.setReloadingPaused(false)\n        // :TRICKY: Reload - start another request if queued!\n        this.instance.featureFlags._startReloadTimer()\n\n        const errorsLoading = !response\n\n        if (\n            !this.instance.config.advanced_disable_feature_flags_on_first_load &&\n            !this.instance.config.advanced_disable_feature_flags\n        ) {\n            this.instance.featureFlags.receivedFeatureFlags(response ?? {}, errorsLoading)\n        }\n\n        if (errorsLoading) {\n            logger.error('Failed to fetch feature flags from PostHog.')\n            return\n        }\n        if (!(document && document.body)) {\n            logger.info('document not ready yet, trying again in 500 milliseconds...')\n            setTimeout(() => {\n                this.parseDecideResponse(response)\n            }, 500)\n            return\n        }\n\n        this.instance._onRemoteConfig(response)\n    }\n\n    private onRemoteConfig(config?: RemoteConfig): void {\n        // NOTE: Once this is rolled out we will remove the \"decide\" related code above. Until then the code duplication is fine.\n        if (!config) {\n            logger.error('Failed to fetch remote config from PostHog.')\n            return\n        }\n        if (!(document && document.body)) {\n            logger.info('document not ready yet, trying again in 500 milliseconds...')\n            setTimeout(() => {\n                this.onRemoteConfig(config)\n            }, 500)\n            return\n        }\n\n        this.instance._onRemoteConfig(config)\n\n        if (config.hasFeatureFlags !== false) {\n            // TRICKY: This is set in the parent for some reason...\n            this.instance.featureFlags.setReloadingPaused(false)\n            // If the config has feature flags, we need to call decide to get the feature flags\n            // This completely separates it from the config logic which is good in terms of separation of concerns\n            this.instance.featureFlags.reloadFeatureFlags()\n        }\n    }\n}\n"]}