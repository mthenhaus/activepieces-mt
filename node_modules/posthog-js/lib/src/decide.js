import { Compression } from './types';
import { STORED_GROUP_PROPERTIES_KEY, STORED_PERSON_PROPERTIES_KEY } from './constants';
import { createLogger } from './utils/logger';
import { assignableWindow, document } from './utils/globals';
var logger = createLogger('[Decide]');
var Decide = /** @class */ (function () {
    function Decide(instance) {
        this.instance = instance;
        // don't need to wait for `decide` to return if flags were provided on initialisation
        this.instance.decideEndpointWasHit = this.instance._hasBootstrappedFeatureFlags();
    }
    Decide.prototype._loadRemoteConfigJs = function (cb) {
        var _a, _b, _c;
        if ((_a = assignableWindow.__PosthogExtensions__) === null || _a === void 0 ? void 0 : _a.loadExternalDependency) {
            (_c = (_b = assignableWindow.__PosthogExtensions__) === null || _b === void 0 ? void 0 : _b.loadExternalDependency) === null || _c === void 0 ? void 0 : _c.call(_b, this.instance, 'remote-config', function () {
                return cb(assignableWindow._POSTHOG_CONFIG);
            });
        }
        else {
            logger.error('PostHog Extensions not found. Cannot load remote config.');
            cb();
        }
    };
    Decide.prototype._loadRemoteConfigJSON = function (cb) {
        this.instance._send_request({
            method: 'GET',
            url: this.instance.requestRouter.endpointFor('assets', "/array/".concat(this.instance.config.token, "/config")),
            callback: function (response) {
                cb(response.json);
            },
        });
    };
    Decide.prototype.call = function () {
        var _this = this;
        // Call decide to get what features are enabled and other settings.
        // As a reminder, if the /decide endpoint is disabled, feature flags, toolbar, session recording, autocapture,
        // and compression will not be available.
        var disableRemoteCalls = !!this.instance.config.advanced_disable_decide;
        if (!disableRemoteCalls) {
            // TRICKY: Reset any decide reloads queued during config.loaded because they'll be
            // covered by the decide call right above.
            this.instance.featureFlags.resetRequestQueue();
        }
        if (this.instance.config.__preview_remote_config) {
            // Attempt 1 - use the pre-loaded config if it came as part of the token-specific array.js
            if (assignableWindow._POSTHOG_CONFIG) {
                logger.info('Using preloaded remote config', assignableWindow._POSTHOG_CONFIG);
                this.onRemoteConfig(assignableWindow._POSTHOG_CONFIG);
                return;
            }
            if (disableRemoteCalls) {
                logger.warn('Remote config is disabled. Falling back to local config.');
                return;
            }
            // Attempt 2 - if we have the external deps loader then lets load the script version of the config that includes site apps
            this._loadRemoteConfigJs(function (config) {
                if (!config) {
                    logger.info('No config found after loading remote JS config. Falling back to JSON.');
                    // Attempt 3 Load the config json instead of the script - we won't get site apps etc. but we will get the config
                    _this._loadRemoteConfigJSON(function (config) {
                        _this.onRemoteConfig(config);
                    });
                    return;
                }
                _this.onRemoteConfig(config);
            });
            return;
        }
        if (disableRemoteCalls) {
            return;
        }
        /*
        Calls /decide endpoint to fetch options for autocapture, session recording, feature flags & compression.
        */
        var data = {
            token: this.instance.config.token,
            distinct_id: this.instance.get_distinct_id(),
            groups: this.instance.getGroups(),
            person_properties: this.instance.get_property(STORED_PERSON_PROPERTIES_KEY),
            group_properties: this.instance.get_property(STORED_GROUP_PROPERTIES_KEY),
            disable_flags: this.instance.config.advanced_disable_feature_flags ||
                this.instance.config.advanced_disable_feature_flags_on_first_load ||
                undefined,
        };
        this.instance._send_request({
            method: 'POST',
            url: this.instance.requestRouter.endpointFor('api', '/decide/?v=3'),
            data: data,
            compression: this.instance.config.disable_compression ? undefined : Compression.Base64,
            timeout: this.instance.config.feature_flag_request_timeout_ms,
            callback: function (response) { return _this.parseDecideResponse(response.json); },
        });
    };
    Decide.prototype.parseDecideResponse = function (response) {
        var _this = this;
        this.instance.featureFlags.setReloadingPaused(false);
        // :TRICKY: Reload - start another request if queued!
        this.instance.featureFlags._startReloadTimer();
        var errorsLoading = !response;
        if (!this.instance.config.advanced_disable_feature_flags_on_first_load &&
            !this.instance.config.advanced_disable_feature_flags) {
            this.instance.featureFlags.receivedFeatureFlags(response !== null && response !== void 0 ? response : {}, errorsLoading);
        }
        if (errorsLoading) {
            logger.error('Failed to fetch feature flags from PostHog.');
            return;
        }
        if (!(document && document.body)) {
            logger.info('document not ready yet, trying again in 500 milliseconds...');
            setTimeout(function () {
                _this.parseDecideResponse(response);
            }, 500);
            return;
        }
        this.instance._onRemoteConfig(response);
    };
    Decide.prototype.onRemoteConfig = function (config) {
        var _this = this;
        // NOTE: Once this is rolled out we will remove the "decide" related code above. Until then the code duplication is fine.
        if (!config) {
            logger.error('Failed to fetch remote config from PostHog.');
            return;
        }
        if (!(document && document.body)) {
            logger.info('document not ready yet, trying again in 500 milliseconds...');
            setTimeout(function () {
                _this.onRemoteConfig(config);
            }, 500);
            return;
        }
        this.instance._onRemoteConfig(config);
        if (config.hasFeatureFlags !== false) {
            // TRICKY: This is set in the parent for some reason...
            this.instance.featureFlags.setReloadingPaused(false);
            // If the config has feature flags, we need to call decide to get the feature flags
            // This completely separates it from the config logic which is good in terms of separation of concerns
            this.instance.featureFlags.reloadFeatureFlags();
        }
    };
    return Decide;
}());
export { Decide };
//# sourceMappingURL=decide.js.map