import { FieldValueTypes, RuleConditionOp } from '../types/models';
export declare const FIELD_TYPES: Map<keyof FieldValueTypes, string>;
export declare function isValidOp(field: keyof FieldValueTypes, op: RuleConditionOp): any;
export declare function getValidOps(field: keyof FieldValueTypes): any;
export declare const ALLOCATION_METHODS: {
    'fixed-amount': string;
    'fixed-percent': string;
    remainder: string;
};
export declare function mapField(field: any, opts?: any): any;
export declare function friendlyOp(op: any, type?: any): string;
export declare function deserializeField(field: any): {
    field: string;
    options: {
        inflow: boolean;
        outflow?: undefined;
    };
} | {
    field: string;
    options: {
        outflow: boolean;
        inflow?: undefined;
    };
} | {
    field: any;
    options?: undefined;
};
export declare function getFieldError(type: any): "Invalid date format" | "Value cannot be empty" | "Value must be a string" | "Value must be a boolean" | "Value must be a number" | "Please choose a valid field for this type of rule" | "Invalid handlebars template" | "Internal error, sorry! Please get in touch https://actualbudget.org/contact/ for support";
export declare function sortNumbers(num1: any, num2: any): any[];
export declare function parse(item: any): any;
export declare function unparse({ error, inputKey, ...item }: {
    [x: string]: any;
    error: any;
    inputKey: any;
}): {
    [x: string]: any;
};
export declare function makeValue(value: any, cond: any): any;
export declare function getApproxNumberThreshold(number: any): number;
