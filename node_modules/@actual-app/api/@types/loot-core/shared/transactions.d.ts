import { type TransactionEntity } from '../types/models';
import { diffItems, applyChanges } from './util';
export declare function isTemporaryId(id: string): boolean;
export declare function isPreviewId(id: string): boolean;
type GenericTransactionEntity = TransactionEntity;
export declare function makeChild<T extends GenericTransactionEntity>(parent: T, data?: object): T;
export declare function recalculateSplit(trans: TransactionEntity): {
    error: {
        type: "SplitTransactionError";
        version: 1;
        difference: number;
    };
    id: string;
    is_parent?: boolean;
    is_child?: boolean;
    parent_id?: TransactionEntity["id"];
    account: import("../types/models").AccountEntity["id"];
    category?: import("../types/models").CategoryEntity["id"];
    amount: number;
    payee?: import("../types/models").PayeeEntity["id"];
    notes?: string;
    date: string;
    imported_id?: string;
    imported_payee?: string;
    starting_balance_flag?: boolean;
    transfer_id?: TransactionEntity["id"];
    sort_order?: number;
    cleared?: boolean;
    reconciled?: boolean;
    tombstone?: boolean;
    forceUpcoming?: boolean;
    schedule?: import("../types/models").ScheduleEntity["id"];
    subtransactions?: TransactionEntity[];
    _unmatched?: boolean;
    _deleted?: boolean;
    raw_synced_data?: string | undefined;
};
export declare function ungroupTransactions(transactions: TransactionEntity[]): TransactionEntity[];
export declare function groupTransaction(split: TransactionEntity[]): {
    subtransactions: TransactionEntity[];
    id: string;
    is_parent?: boolean;
    is_child?: boolean;
    parent_id?: TransactionEntity["id"];
    account: import("../types/models").AccountEntity["id"];
    category?: import("../types/models").CategoryEntity["id"];
    amount: number;
    payee?: import("../types/models").PayeeEntity["id"];
    notes?: string;
    date: string;
    imported_id?: string;
    imported_payee?: string;
    starting_balance_flag?: boolean;
    transfer_id?: TransactionEntity["id"];
    sort_order?: number;
    cleared?: boolean;
    reconciled?: boolean;
    tombstone?: boolean;
    forceUpcoming?: boolean;
    schedule?: import("../types/models").ScheduleEntity["id"];
    _unmatched?: boolean;
    _deleted?: boolean;
    error?: {
        type: "SplitTransactionError";
        version: 1;
        difference: number;
    } | null;
    raw_synced_data?: string | undefined;
};
export declare function ungroupTransaction(split: TransactionEntity | null): TransactionEntity[];
export declare function applyTransactionDiff(groupedTrans: Parameters<typeof ungroupTransaction>[0], diff: Parameters<typeof applyChanges>[0]): {
    subtransactions: TransactionEntity[];
    id: string;
    is_parent?: boolean;
    is_child?: boolean;
    parent_id?: TransactionEntity["id"];
    account: import("../types/models").AccountEntity["id"];
    category?: import("../types/models").CategoryEntity["id"];
    amount: number;
    payee?: import("../types/models").PayeeEntity["id"];
    notes?: string;
    date: string;
    imported_id?: string;
    imported_payee?: string;
    starting_balance_flag?: boolean;
    transfer_id?: TransactionEntity["id"];
    sort_order?: number;
    cleared?: boolean;
    reconciled?: boolean;
    tombstone?: boolean;
    forceUpcoming?: boolean;
    schedule?: import("../types/models").ScheduleEntity["id"];
    _unmatched?: boolean;
    _deleted?: boolean;
    error?: {
        type: "SplitTransactionError";
        version: 1;
        difference: number;
    } | null;
    raw_synced_data?: string | undefined;
};
export declare function addSplitTransaction(transactions: TransactionEntity[], id: string): {
    data: TransactionEntity[];
    newTransaction: TransactionEntity | null;
    diff: ReturnType<typeof diffItems<TransactionEntity>>;
};
export declare function updateTransaction(transactions: TransactionEntity[], transaction: TransactionEntity): {
    data: TransactionEntity[];
    newTransaction: TransactionEntity | null;
    diff: ReturnType<typeof diffItems<TransactionEntity>>;
};
export declare function deleteTransaction(transactions: TransactionEntity[], id: string): {
    data: TransactionEntity[];
    newTransaction: TransactionEntity | null;
    diff: ReturnType<typeof diffItems<TransactionEntity>>;
};
export declare function splitTransaction(transactions: TransactionEntity[], id: string, createSubtransactions?: (parentTransaction: TransactionEntity) => TransactionEntity[]): {
    data: TransactionEntity[];
    newTransaction: TransactionEntity | null;
    diff: ReturnType<typeof diffItems<TransactionEntity>>;
};
export declare function realizeTempTransactions(transactions: TransactionEntity[]): TransactionEntity[];
export declare function makeAsNonChildTransactions(childTransactionsToUpdate: TransactionEntity[], transactions: TransactionEntity[]): {
    updated: TransactionEntity[];
    deleted: {
        amount: number;
        id: string;
        is_parent?: boolean;
        is_child?: boolean;
        parent_id?: TransactionEntity["id"];
        account: import("../types/models").AccountEntity["id"];
        category?: import("../types/models").CategoryEntity["id"];
        payee?: import("../types/models").PayeeEntity["id"];
        notes?: string;
        date: string;
        imported_id?: string;
        imported_payee?: string;
        starting_balance_flag?: boolean;
        transfer_id?: TransactionEntity["id"];
        sort_order?: number;
        cleared?: boolean;
        reconciled?: boolean;
        tombstone?: boolean;
        forceUpcoming?: boolean;
        schedule?: import("../types/models").ScheduleEntity["id"];
        subtransactions?: TransactionEntity[];
        _unmatched?: boolean;
        _deleted?: boolean;
        error?: {
            type: "SplitTransactionError";
            version: 1;
            difference: number;
        } | null;
        raw_synced_data?: string | undefined;
    }[];
};
export {};
