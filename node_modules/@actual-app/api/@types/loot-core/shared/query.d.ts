import { WithRequired } from '../types/util';
type ObjectExpression = {
    [key: string]: ObjectExpression | unknown;
};
export type QueryState = {
    get table(): string;
    get tableOptions(): Readonly<Record<string, unknown>>;
    get filterExpressions(): ReadonlyArray<ObjectExpression>;
    get selectExpressions(): ReadonlyArray<ObjectExpression | string | '*'>;
    get groupExpressions(): ReadonlyArray<ObjectExpression | string>;
    get orderExpressions(): ReadonlyArray<ObjectExpression | string>;
    get calculation(): boolean;
    get rawMode(): boolean;
    get withDead(): boolean;
    get validateRefs(): boolean;
    get limit(): number | null;
    get offset(): number | null;
};
export declare class Query {
    state: QueryState;
    constructor(state: WithRequired<Partial<QueryState>, 'table'>);
    filter(expr: ObjectExpression): Query;
    unfilter(exprs?: Array<keyof ObjectExpression>): Query;
    select(exprs?: Array<ObjectExpression | string> | ObjectExpression | string | '*' | ['*']): Query;
    calculate(expr: ObjectExpression | string): Query;
    groupBy(exprs: ObjectExpression | string | Array<ObjectExpression | string>): Query;
    orderBy(exprs: ObjectExpression | string | Array<ObjectExpression | string>): Query;
    limit(num: number): Query;
    offset(num: number): Query;
    raw(): Query;
    withDead(): Query;
    withoutValidatedRefs(): Query;
    options(opts: Record<string, unknown>): Query;
    reset(): Query;
    serialize(): QueryState;
    serializeAsString(): string;
}
export declare function getPrimaryOrderBy(query: Query, defaultOrderBy: ObjectExpression | null): {
    order: string;
    field?: undefined;
} | {
    field: string;
    order: unknown;
};
export declare function q(table: QueryState['table']): Query;
export {};
