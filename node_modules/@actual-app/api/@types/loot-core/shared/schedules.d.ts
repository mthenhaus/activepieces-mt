import type { IRuleOptions } from '@rschedule/core';
export declare function getStatus(nextDate: string, completed: boolean, hasTrans: boolean, upcomingLength: string): "completed" | "paid" | "due" | "upcoming" | "missed" | "scheduled";
export declare function getHasTransactionsQuery(schedules: any): import("./query").Query;
export declare function getRecurringDescription(config: any, dateFormat: any): string;
export declare function recurConfigToRSchedule(config: any): IRuleOptions[];
export declare function extractScheduleConds(conditions: any): {
    payee: any;
    account: any;
    amount: any;
    date: any;
};
export declare function getNextDate(dateCond: any, start?: Date, noSkipWeekend?: boolean): any;
export declare function getDateWithSkippedWeekend(date: Date, solveMode: 'after' | 'before'): Date;
export declare function getScheduledAmount(amount: number | {
    num1: number;
    num2: number;
}, inverse?: boolean): number;
export declare function describeSchedule(schedule: any, payee: any): string;
export declare function getUpcomingDays(upcomingLength?: string): number;
export declare function scheduleIsRecurring(dateCond: any): boolean;
