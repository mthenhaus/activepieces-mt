import { QueryState } from '../../shared/query';
import { AccountEntity, CategoryGroupEntity, PayeeEntity, TransactionEntity } from '../../types/models';
import { ParseFileOptions } from './import/parse-file';
import { batchUpdateTransactions } from '.';
export type TransactionHandlers = {
    'transactions-batch-update': typeof handleBatchUpdateTransactions;
    'transaction-add': typeof addTransaction;
    'transaction-update': typeof updateTransaction;
    'transaction-delete': typeof deleteTransaction;
    'transactions-parse-file': typeof parseTransactionsFile;
    'transactions-export': typeof exportTransactions;
    'transactions-export-query': typeof exportTransactionsQuery;
    'get-earliest-transaction': typeof getEarliestTransaction;
};
declare function handleBatchUpdateTransactions({ added, deleted, updated, learnCategories, }: Parameters<typeof batchUpdateTransactions>[0]): Promise<{
    added: TransactionEntity[];
    updated: TransactionEntity[] | ({
        id: any;
        transfer_id: any;
    } | {
        id: any;
        category: any;
    })[];
}>;
declare function addTransaction(transaction: TransactionEntity): Promise<{}>;
declare function updateTransaction(transaction: TransactionEntity): Promise<{}>;
declare function deleteTransaction(transaction: Pick<TransactionEntity, 'id'>): Promise<{}>;
declare function parseTransactionsFile({ filepath, options, }: {
    filepath: string;
    options: ParseFileOptions;
}): Promise<import("./import/parse-file").ParseFileResult>;
declare function exportTransactions({ transactions, accounts, categoryGroups, payees, }: {
    transactions: TransactionEntity[];
    accounts: AccountEntity[];
    categoryGroups: CategoryGroupEntity[];
    payees: PayeeEntity[];
}): Promise<string>;
declare function exportTransactionsQuery({ query: queryState, }: {
    query: QueryState;
}): Promise<string>;
declare function getEarliestTransaction(): Promise<any>;
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: TransactionHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "get-earliest-transaction" | "transactions-batch-update" | "transaction-add" | "transaction-update" | "transaction-delete" | "transactions-parse-file" | "transactions-export" | "transactions-export-query">(name: Name, func: TransactionHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
export {};
