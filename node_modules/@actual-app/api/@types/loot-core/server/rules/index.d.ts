import { RuleEntity } from '../../types/models';
export declare function parseDateString(str: any): {
    type: string;
    date: string;
};
export declare class Condition {
    field: any;
    op: any;
    options: any;
    rawValue: any;
    type: any;
    unparsedValue: any;
    value: any;
    constructor(op: any, field: any, value: any, options: any);
    eval(object: any): any;
    getValue(): any;
    serialize(): {
        options: any;
        op: any;
        field: any;
        value: any;
        type: any;
    };
}
declare const ACTION_OPS: readonly ["set", "set-split-amount", "link-schedule", "prepend-notes", "append-notes"];
type ActionOperator = (typeof ACTION_OPS)[number];
export declare class Action {
    field: any;
    op: ActionOperator;
    options: any;
    rawValue: any;
    type: any;
    value: any;
    private handlebarsTemplate?;
    constructor(op: ActionOperator, field: any, value: any, options: any);
    exec(object: any): void;
    serialize(): {
        options: any;
        op: "set" | "set-split-amount" | "link-schedule" | "prepend-notes" | "append-notes";
        field: any;
        value: any;
        type: any;
    };
}
export declare function execActions(actions: Action[], transaction: any): any;
export declare class Rule {
    actions: Action[];
    conditions: Condition[];
    conditionsOp: any;
    id?: string;
    stage: 'pre' | null | 'post';
    constructor({ id, stage, conditionsOp, conditions, actions, }: {
        id?: string;
        stage?: 'pre' | null | 'post';
        conditionsOp: any;
        conditions: any;
        actions: any;
    });
    evalConditions(object: any): boolean;
    execActions<T>(object: T): Partial<T>;
    exec(object: any): Partial<any>;
    apply(object: any): any;
    getId(): string | undefined;
    serialize(): RuleEntity;
}
export declare class RuleIndexer {
    field: string;
    method?: string;
    rules: Map<string, Set<Rule>>;
    constructor({ field, method }: {
        field: string;
        method?: string;
    });
    getIndex(key: string | null): Set<Rule>;
    getIndexForValue(value: unknown): Set<Rule>;
    getKey(value: unknown): string | null;
    getIndexes(rule: Rule): Set<Rule>[];
    index(rule: Rule): void;
    remove(rule: Rule): void;
    getApplicableRules(object: any): Set<Rule>;
}
export declare function rankRules(rules: Iterable<Rule>): Rule[];
export declare function migrateIds(rule: Rule, mappings: Map<string, string>): void;
export declare function iterateIds(rules: Rule[], fieldName: string, func: (rule: Rule, id: string) => void | boolean): void;
export {};
