import { GlobalPrefs, MetadataPrefs, type SyncedPrefs } from '../../types/prefs';
export interface PreferencesHandlers {
    'preferences/save': typeof saveSyncedPrefs;
    'preferences/get': typeof getSyncedPrefs;
    'save-global-prefs': typeof saveGlobalPrefs;
    'load-global-prefs': typeof loadGlobalPrefs;
    'save-prefs': typeof saveMetadataPrefs;
    'load-prefs': typeof loadMetadataPrefs;
}
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: PreferencesHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "preferences/save" | "preferences/get" | "save-global-prefs" | "load-global-prefs" | "save-prefs" | "load-prefs">(name: Name, func: PreferencesHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
declare function saveSyncedPrefs({ id, value, }: {
    id: keyof SyncedPrefs;
    value: string | undefined;
}): Promise<void>;
declare function getSyncedPrefs(): Promise<SyncedPrefs>;
declare function saveGlobalPrefs(prefs: GlobalPrefs): Promise<string>;
declare function loadGlobalPrefs(): Promise<{
    floatingSidebar: boolean;
    maxMonths: number;
    documentDir: string;
    keyId: any;
    language: string;
    theme: import("../../types/prefs").Theme;
    preferredDarkTheme: import("../../types/prefs").DarkTheme;
    serverSelfSignedCert: string;
}>;
declare function saveMetadataPrefs(prefsToSet: MetadataPrefs): Promise<string>;
declare function loadMetadataPrefs(): Promise<MetadataPrefs>;
export {};
