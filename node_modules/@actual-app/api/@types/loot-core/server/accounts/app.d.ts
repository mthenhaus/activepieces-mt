import { AccountEntity, CategoryEntity, SyncServerGoCardlessAccount, TransactionEntity, SyncServerSimpleFinAccount } from '../../types/models';
import * as bankSync from './sync';
export type AccountHandlers = {
    'account-update': typeof updateAccount;
    'accounts-get': typeof getAccounts;
    'account-balance': typeof getAccountBalance;
    'account-properties': typeof getAccountProperties;
    'gocardless-accounts-link': typeof linkGoCardlessAccount;
    'simplefin-accounts-link': typeof linkSimpleFinAccount;
    'account-create': typeof createAccount;
    'account-close': typeof closeAccount;
    'account-reopen': typeof reopenAccount;
    'account-move': typeof moveAccount;
    'secret-set': typeof setSecret;
    'secret-check': typeof checkSecret;
    'gocardless-poll-web-token': typeof pollGoCardlessWebToken;
    'gocardless-poll-web-token-stop': typeof stopGoCardlessWebTokenPolling;
    'gocardless-status': typeof goCardlessStatus;
    'simplefin-status': typeof simpleFinStatus;
    'simplefin-accounts': typeof simpleFinAccounts;
    'gocardless-get-banks': typeof getGoCardlessBanks;
    'gocardless-create-web-token': typeof createGoCardlessWebToken;
    'accounts-bank-sync': typeof accountsBankSync;
    'simplefin-batch-sync': typeof simpleFinBatchSync;
    'transactions-import': typeof importTransactions;
    'account-unlink': typeof unlinkAccount;
};
declare function updateAccount({ id, name }: Pick<AccountEntity, 'id' | 'name'>): Promise<{}>;
declare function getAccounts(): Promise<any[]>;
declare function getAccountBalance({ id, cutoff, }: {
    id: string;
    cutoff: string | Date;
}): Promise<number>;
declare function getAccountProperties({ id }: {
    id: AccountEntity['id'];
}): Promise<{
    balance: number;
    numTransactions: number;
}>;
declare function linkGoCardlessAccount({ requisitionId, account, upgradingId, offBudget, }: {
    requisitionId: string;
    account: SyncServerGoCardlessAccount;
    upgradingId?: AccountEntity['id'] | undefined;
    offBudget?: boolean | undefined;
}): Promise<string>;
declare function linkSimpleFinAccount({ externalAccount, upgradingId, offBudget, }: {
    externalAccount: SyncServerSimpleFinAccount;
    upgradingId?: AccountEntity['id'] | undefined;
    offBudget?: boolean | undefined;
}): Promise<string>;
declare function createAccount({ name, balance, offBudget, closed, }: {
    name: string;
    balance?: number | undefined;
    offBudget?: boolean | undefined;
    closed?: boolean | undefined;
}): Promise<string>;
declare function closeAccount({ id, transferAccountId, categoryId, forced, }: {
    id: AccountEntity['id'];
    transferAccountId?: AccountEntity['id'] | undefined;
    categoryId?: CategoryEntity['id'] | undefined;
    forced?: boolean | undefined;
}): Promise<void>;
declare function reopenAccount({ id }: {
    id: AccountEntity['id'];
}): Promise<void>;
declare function moveAccount({ id, targetId, }: {
    id: AccountEntity['id'];
    targetId: AccountEntity['id'];
}): Promise<void>;
declare function setSecret({ name, value, }: {
    name: string;
    value: string | null;
}): Promise<any>;
declare function checkSecret(name: string): Promise<string | {
    error: string;
}>;
declare function pollGoCardlessWebToken({ requisitionId, }: {
    requisitionId: string;
}): Promise<unknown>;
declare function stopGoCardlessWebTokenPolling(): Promise<string>;
declare function goCardlessStatus(): Promise<any>;
declare function simpleFinStatus(): Promise<any>;
declare function simpleFinAccounts(): Promise<any>;
declare function getGoCardlessBanks(country: string): Promise<any>;
declare function createGoCardlessWebToken({ institutionId, accessValidForDays, }: {
    institutionId: string;
    accessValidForDays: number;
}): Promise<any>;
type SyncResponse = {
    newTransactions: Array<TransactionEntity['id']>;
    matchedTransactions: Array<TransactionEntity['id']>;
    updatedAccounts: Array<AccountEntity['id']>;
};
type SyncError = {
    type: 'SyncError';
    accountId: AccountEntity['id'];
    message: string;
    category: string;
    code: string;
} | {
    accountId: AccountEntity['id'];
    message: string;
    internal?: string;
};
export type SyncResponseWithErrors = SyncResponse & {
    errors: SyncError[];
};
declare function accountsBankSync({ ids, }: {
    ids: Array<AccountEntity['id']>;
}): Promise<SyncResponseWithErrors>;
declare function simpleFinBatchSync({ ids, }: {
    ids: Array<AccountEntity['id']>;
}): Promise<Array<{
    accountId: AccountEntity['id'];
    res: SyncResponseWithErrors;
}>>;
type ImportTransactionsResult = bankSync.ReconcileTransactionsResult & {
    errors: Array<{
        message: string;
    }>;
};
declare function importTransactions({ accountId, transactions, isPreview, opts, }: {
    accountId: AccountEntity['id'];
    transactions: TransactionEntity[];
    isPreview: boolean;
    opts?: {
        defaultCleared: boolean;
    };
}): Promise<ImportTransactionsResult>;
declare function unlinkAccount({ id }: {
    id: AccountEntity['id'];
}): Promise<string>;
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: AccountHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "account-update" | "accounts-get" | "account-balance" | "account-properties" | "gocardless-accounts-link" | "simplefin-accounts-link" | "account-create" | "account-close" | "account-reopen" | "account-move" | "secret-set" | "secret-check" | "gocardless-poll-web-token" | "gocardless-poll-web-token-stop" | "gocardless-status" | "simplefin-status" | "simplefin-accounts" | "gocardless-get-banks" | "gocardless-create-web-token" | "accounts-bank-sync" | "simplefin-batch-sync" | "transactions-import" | "account-unlink">(name: Name, func: AccountHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
export {};
