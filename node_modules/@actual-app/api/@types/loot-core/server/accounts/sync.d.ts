import { AccountEntity, TransactionEntity } from '../../types/models';
export declare function getGoCardlessAccounts(userId: any, userKey: any, id: any): Promise<any>;
export type ReconcileTransactionsResult = {
    added: string[];
    updated: string[];
    updatedPreview: Array<{
        transaction: TransactionEntity;
        existing?: TransactionEntity;
        ignored?: boolean;
    }>;
};
export declare function reconcileTransactions(acctId: any, transactions: any, isBankSyncAccount?: boolean, strictIdChecking?: boolean, isPreview?: boolean, defaultCleared?: boolean): Promise<ReconcileTransactionsResult>;
export declare function matchTransactions(acctId: any, transactions: any, isBankSyncAccount?: boolean, strictIdChecking?: boolean): Promise<{
    payeesToCreate: Map<any, any>;
    transactionsStep1: any[];
    transactionsStep2: any[];
    transactionsStep3: any[];
}>;
export declare function addTransactions(acctId: any, transactions: any, { runTransfers, learnCategories }?: {
    runTransfers?: boolean;
    learnCategories?: boolean;
}): Promise<any>;
export declare function syncAccount(userId: string | undefined, userKey: string | undefined, id: string, acctId: string, bankId: string): Promise<{
    added: any[];
    updated: string[];
    updatedPreview: Array<{
        transaction: TransactionEntity;
        existing?: TransactionEntity;
        ignored?: boolean;
    }>;
} | {
    added: any[];
    updated: any[];
}>;
export declare function simpleFinBatchSync(accounts: Array<Pick<AccountEntity, 'id' | 'account_id'>>): Promise<any[]>;
