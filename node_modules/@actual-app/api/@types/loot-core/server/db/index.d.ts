import { Database } from '@jlongster/sql.js';
import { CategoryEntity, CategoryGroupEntity } from '../../types/models';
import { DbAccount, DbCategory, DbCategoryGroup, DbPayee, DbTransaction, DbViewTransaction } from './types';
export * from './types';
export { toDateRepr, fromDateRepr } from '../models';
export declare function getDatabasePath(): string;
export declare function openDatabase(id?: string): Promise<void>;
export declare function closeDatabase(): Promise<void>;
export declare function setDatabase(db_: Database): void;
export declare function getDatabase(): {
    close(): void;
    create_function(name: string, func: (...args: any[]) => any): any;
    each(sql: string, params: import("@jlongster/sql.js").BindParams, callback: import("@jlongster/sql.js").ParamsCallback, done: () => void): any;
    each(sql: string, callback: import("@jlongster/sql.js").ParamsCallback, done: () => void): any;
    exec(sql: string, params?: import("@jlongster/sql.js").BindParams): import("@jlongster/sql.js").QueryExecResult[];
    export(): Uint8Array;
    getRowsModified(): number;
    handleError(): null | never;
    iterateStatements(sql: string): {
        getRemainingSql(): string;
        next(): import("@jlongster/sql.js").StatementIteratorResult;
        [Symbol.iterator](): Iterator<{
            bind(values?: import("@jlongster/sql.js").BindParams): boolean;
            free(): boolean;
            freemem(): void;
            get(params?: import("@jlongster/sql.js").BindParams): import("@jlongster/sql.js").SqlValue[];
            getAsObject(params?: import("@jlongster/sql.js").BindParams): import("@jlongster/sql.js").ParamsObject;
            getColumnNames(): string[];
            getNormalizedSQL(): string;
            getSQL(): string;
            reset(): void;
            run(values?: import("@jlongster/sql.js").BindParams): void;
            step(): boolean;
        }>;
    };
    prepare(sql: string, params?: import("@jlongster/sql.js").BindParams): {
        bind(values?: import("@jlongster/sql.js").BindParams): boolean;
        free(): boolean;
        freemem(): void;
        get(params?: import("@jlongster/sql.js").BindParams): import("@jlongster/sql.js").SqlValue[];
        getAsObject(params?: import("@jlongster/sql.js").BindParams): import("@jlongster/sql.js").ParamsObject;
        getColumnNames(): string[];
        getNormalizedSQL(): string;
        getSQL(): string;
        reset(): void;
        run(values?: import("@jlongster/sql.js").BindParams): void;
        step(): boolean;
    };
    run(sql: string, params?: import("@jlongster/sql.js").BindParams): any;
};
export declare function loadClock(): Promise<void>;
export declare function runQuery(sql: string, params?: Array<string | number>, fetchAll?: false): {
    changes: unknown;
};
export declare function runQuery<T>(sql: string, params: Array<string | number> | undefined, fetchAll: true): T[];
export declare function execQuery(sql: string): void;
export declare function cache(sql: string): string;
export declare function transaction(fn: () => void): void;
export declare function asyncTransaction(fn: () => Promise<void>): Promise<void>;
export declare function all(sql: any, params?: (string | number)[]): Promise<any[]>;
export declare function first(sql: any, params?: (string | number)[]): Promise<any>;
export declare function firstSync(sql: any, params?: (string | number)[]): any;
export declare function run(sql: any, params?: (string | number)[]): Promise<{
    changes: unknown;
}>;
export declare function select(table: any, id: any): Promise<any>;
export declare function update(table: any, params: any): Promise<void>;
export declare function insertWithUUID(table: any, row: any): Promise<any>;
export declare function insert(table: any, row: any): Promise<void>;
export declare function delete_(table: any, id: any): Promise<void>;
export declare function deleteAll(table: string): Promise<void>;
export declare function selectWithSchema(table: any, sql: any, params: any): Promise<any[]>;
export declare function selectFirstWithSchema(table: any, sql: any, params: any): Promise<any>;
export declare function insertWithSchema(table: any, row: any): Promise<any>;
export declare function updateWithSchema(table: any, fields: any): Promise<void>;
export declare function getCategories(ids?: Array<DbCategory['id']>): Promise<CategoryEntity[]>;
export declare function getCategoriesGrouped(ids?: Array<DbCategoryGroup['id']>): Promise<Array<CategoryGroupEntity>>;
export declare function insertCategoryGroup(group: any): Promise<any>;
export declare function updateCategoryGroup(group: any): Promise<void>;
export declare function moveCategoryGroup(id: any, targetId: any): Promise<void>;
export declare function deleteCategoryGroup(group: any, transferId?: string): Promise<void>;
export declare function insertCategory(category: any, { atEnd }?: {
    atEnd: any;
}): Promise<any>;
export declare function updateCategory(category: any): Promise<void>;
export declare function moveCategory(id: DbCategory['id'], groupId: DbCategoryGroup['id'], targetId?: DbCategory['id']): Promise<void>;
export declare function deleteCategory(category: Pick<DbCategory, 'id'>, transferId?: DbCategory['id']): Promise<void>;
export declare function getPayee(id: DbPayee['id']): Promise<any>;
export declare function getAccount(id: DbAccount['id']): Promise<any>;
export declare function insertPayee(payee: any): Promise<any>;
export declare function deletePayee(payee: Pick<DbPayee, 'id'>): Promise<void>;
export declare function deleteTransferPayee(payee: Pick<DbPayee, 'id'>): Promise<void>;
export declare function updatePayee(payee: any): Promise<void>;
export declare function mergePayees(target: DbPayee['id'], ids: Array<DbPayee['id']>): Promise<void>;
export declare function getPayees(): Promise<any[]>;
export declare function getCommonPayees(): Promise<any[]>;
export declare function syncGetOrphanedPayees(): Promise<any[]>;
export declare function getOrphanedPayees(): Promise<any[]>;
export declare function getPayeeByName(name: DbPayee['name']): Promise<any>;
export declare function getAccounts(): Promise<any[]>;
export declare function insertAccount(account: any): Promise<any>;
export declare function updateAccount(account: any): Promise<void>;
export declare function deleteAccount(account: any): Promise<void>;
export declare function moveAccount(id: DbAccount['id'], targetId: DbAccount['id']): Promise<void>;
export declare function getTransaction(id: DbViewTransaction['id']): Promise<any>;
export declare function getTransactions(accountId: DbTransaction['acct']): Promise<any[]>;
export declare function insertTransaction(transaction: any): Promise<any>;
export declare function updateTransaction(transaction: any): Promise<void>;
export declare function deleteTransaction(transaction: any): Promise<void>;
