import { type Emitter } from 'mitt';
import { ServerEvents } from '../types/server-events';
type Events = {
    sync: ServerEvents['sync-event'];
    'load-budget': {
        id: string;
    };
};
type UnlistenService = () => void;
type Service = () => UnlistenService;
declare class App<Handlers> {
    events: Emitter<Events>;
    handlers: Handlers;
    services: Service[];
    unlistenServices: UnlistenService[];
    constructor();
    method<Name extends string & keyof Handlers>(name: Name, func: Handlers[Name]): void;
    service(func: Service): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
}
export declare function createApp<T>(): App<T>;
export {};
