import { type CustomReportData, type CustomReportEntity } from '../../types/models';
import { ReportsHandlers } from './types/handlers';
export declare const reportModel: {
    validate(report: Omit<CustomReportEntity, "tombstone">, { update }?: {
        update?: boolean;
    }): Omit<CustomReportEntity, "tombstone">;
    toJS(row: CustomReportData): {
        id: string;
        name: string;
        startDate: string;
        endDate: string;
        isDateStatic: boolean;
        dateRange: string;
        mode: string;
        groupBy: string;
        sortBy: import("../../types/models").sortByOpType;
        interval: string;
        balanceType: string;
        showEmpty: boolean;
        showOffBudget: boolean;
        showHiddenCategories: boolean;
        showUncategorized: boolean;
        includeCurrentInterval: boolean;
        graphType: string;
        conditions: import("../../types/models").RuleConditionEntity[];
        conditionsOp: "and" | "or";
    };
    fromJS(report: CustomReportEntity): {
        id: string;
        name: string;
        start_date: string;
        end_date: string;
        date_static: number;
        date_range: string;
        mode: string;
        group_by: string;
        sort_by: import("../../types/models").sortByOpType;
        interval: string;
        balance_type: string;
        show_empty: number;
        show_offbudget: number;
        show_hidden: number;
        show_uncategorized: number;
        include_current: number;
        graph_type: string;
        conditions: import("../../types/models").RuleConditionEntity[];
        conditions_op: "and" | "or";
    };
};
export declare const app: {
    events: import("mitt").Emitter<{
        sync: import("../../types/server-events").ServerEvents["sync-event"];
        'load-budget': {
            id: string;
        };
    }>;
    handlers: ReportsHandlers;
    services: (() => () => void)[];
    unlistenServices: (() => void)[];
    method<Name extends "report/create" | "report/update" | "report/delete">(name: Name, func: ReportsHandlers[Name]): void;
    service(func: () => () => void): void;
    combine(...apps: any[]): void;
    startServices(): void;
    stopServices(): void;
};
