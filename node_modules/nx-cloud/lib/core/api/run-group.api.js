"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunGroupApi = void 0;
const axios_1 = require("../../utilities/axios");
const metric_logger_1 = require("../../utilities/metric-logger");
const { output } = require('../../utilities/nx-imports-light');
class RunGroupApi {
    constructor(options) {
        this.apiAxiosInstance = (0, axios_1.createApiAxiosInstance)(options);
    }
    createRunGroup(branch, runGroup, ciExecutionId, ciExecutionEnv, stopAgentsOnFailure, agentCount, stopAgentsAfter, commitSha, commitRef) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const recorder = (0, metric_logger_1.createMetricRecorder)('createRunGroup');
            try {
                const resp = yield (0, axios_1.axiosMultipleTries)(() => this.apiAxiosInstance.post('/nx-cloud/executions/create-run-group', {
                    branch,
                    runGroup,
                    ciExecutionId,
                    ciExecutionEnv,
                    stopAgentsOnFailure,
                    agentCount,
                    stopAgentsAfter,
                    commitSha,
                }));
                recorder.recordMetric((0, metric_logger_1.mapRespToPerfEntry)(resp));
            }
            catch (e) {
                recorder.recordMetric(((_a = e === null || e === void 0 ? void 0 : e.axiosException) === null || _a === void 0 ? void 0 : _a.response)
                    ? (0, metric_logger_1.mapRespToPerfEntry)(e.axiosException.response)
                    : metric_logger_1.RUNNER_FAILURE_PERF_ENTRY);
                output.error({
                    title: e.message,
                });
                process.exit(1);
            }
        });
    }
    completeRunGroup(branch, runGroup, ciExecutionId, ciExecutionEnv) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const recorder = (0, metric_logger_1.createMetricRecorder)('completeRunGroup');
            try {
                const resp = yield (0, axios_1.axiosMultipleTries)(() => this.apiAxiosInstance.post('/nx-cloud/executions/complete-run-group', {
                    branch,
                    runGroup,
                    ciExecutionId,
                    ciExecutionEnv,
                }));
                recorder.recordMetric((0, metric_logger_1.mapRespToPerfEntry)(resp));
            }
            catch (e) {
                recorder.recordMetric(((_a = e === null || e === void 0 ? void 0 : e.axiosException) === null || _a === void 0 ? void 0 : _a.response)
                    ? (0, metric_logger_1.mapRespToPerfEntry)(e.axiosException.response)
                    : metric_logger_1.RUNNER_FAILURE_PERF_ENTRY);
                output.error({
                    title: e.message,
                });
                process.exit(1);
            }
        });
    }
}
exports.RunGroupApi = RunGroupApi;
//# sourceMappingURL=run-group.api.js.map