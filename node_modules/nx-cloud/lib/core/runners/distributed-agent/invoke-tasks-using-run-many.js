"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invokeTasksUsingRunMany = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const environment_1 = require("../../../utilities/environment");
const { output } = require('../../../utilities/nx-imports-light');
const { cacheDirectory } = require('../../../utilities/nx-imports');
function invokeTasksUsingRunMany() {
    return __awaiter(this, void 0, void 0, function* () {
        const readCompleted = completedTasksReader();
        return function invokeTasksUsingRunMany(executionId, tasksToExecute, parallel) {
            return __awaiter(this, void 0, void 0, function* () {
                let completedStatusCode = 0;
                const completedTasks = [];
                for (const g of groupByTarget(tasksToExecute)) {
                    const config = g.configuration
                        ? `--configuration=${g.configuration}`
                        : ``;
                    const parallelStr = parallel > 1 ? ` --parallel --max-parallel=${parallel}` : ``;
                    // TODO use pnpx or yarn when needed
                    const command = `npx nx run-many --target=${g.target} ${config} --projects=${g.projects.join(',')} ${g.params}${parallelStr}`;
                    if (environment_1.VERBOSE_LOGGING) {
                        output.note({
                            title: `Executing: '${command}'`,
                        });
                    }
                    try {
                        (0, child_process_1.execSync)(command, {
                            stdio: ['ignore', 'inherit', 'inherit'],
                            env: Object.assign(Object.assign({}, process.env), { NX_CACHE_FAILURES: 'true', NX_CLOUD_DISTRIBUTED_EXECUTION_ID: executionId, NX_STREAM_OUTPUT: 'true', NX_PREFIX_OUTPUT: 'true' }),
                        });
                        completedTasks.push(...readCompleted(executionId));
                    }
                    catch (e) {
                        if (e.status === environment_1.DISTRIBUTED_TASK_EXECUTION_INTERNAL_ERROR_STATUS_CODE) {
                            throw e;
                        }
                        else {
                            completedStatusCode = 1;
                            completedTasks.push(...readCompleted(executionId));
                        }
                    }
                }
                return { completedStatusCode, completedTasks };
            });
        };
    });
}
exports.invokeTasksUsingRunMany = invokeTasksUsingRunMany;
function groupByTarget(tasks) {
    const res = [];
    tasks.forEach((t) => {
        const r = res.find((rr) => rr.target === t.target && rr.configuration === t.configuration);
        if (r) {
            r.projects.push(t.projectName);
        }
        else {
            res.push({
                target: t.target,
                projects: [t.projectName],
                params: t.params,
                configuration: t.configuration,
            });
        }
    });
    return res;
}
function completedTasksReader() {
    return (distributedExecutionId) => {
        const errorMessage = `Command execution failed (distributed task execution: ${distributedExecutionId}). Tasks hashes haven\'t been recorded.`;
        let completedTasks;
        try {
            const taskHashesFile = `${cacheDirectory}/tasks-hashes-${distributedExecutionId}`;
            completedTasks = JSON.parse((0, fs_1.readFileSync)(taskHashesFile).toString());
            // remove it such that if the next command crashes we don't read an obsolete file
            (0, fs_1.unlinkSync)(taskHashesFile);
        }
        catch (e) {
            throw new Error(errorMessage);
        }
        if (completedTasks.length == 0) {
            throw new Error(errorMessage);
        }
        return completedTasks;
    };
}
//# sourceMappingURL=invoke-tasks-using-run-many.js.map