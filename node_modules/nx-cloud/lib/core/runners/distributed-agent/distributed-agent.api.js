"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DistributedAgentApi = void 0;
const axios_1 = require("../../../utilities/axios");
const environment_1 = require("../../../utilities/environment");
const metric_logger_1 = require("../../../utilities/metric-logger");
const { output } = require('../../../utilities/nx-imports-light');
class DistributedAgentApi {
    constructor(options, branch, runGroup, ciExecutionId, ciExecutionEnv, agentName) {
        this.branch = branch;
        this.runGroup = runGroup;
        this.ciExecutionId = ciExecutionId;
        this.ciExecutionEnv = ciExecutionEnv;
        this.agentName = agentName;
        this.apiAxiosInstance = (0, axios_1.createApiAxiosInstance)(options);
    }
    tasks(executionId, statusCode, completedTasks, targets) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const recorder = (0, metric_logger_1.createMetricRecorder)('dtePollTasks');
            try {
                const res = yield (0, axios_1.axiosMultipleTries)(() => this.apiAxiosInstance.post('/nx-cloud/executions/tasks', {
                    runGroup: this.runGroup,
                    ciExecutionId: this.ciExecutionId,
                    ciExecutionEnv: this.ciExecutionEnv,
                    agentName: this.agentName,
                    executionId,
                    statusCode,
                    completedTasks,
                    targets,
                }));
                recorder.recordMetric((0, metric_logger_1.mapRespToPerfEntry)(res));
                return res.data;
            }
            catch (e) {
                recorder.recordMetric(((_a = e === null || e === void 0 ? void 0 : e.axiosException) === null || _a === void 0 ? void 0 : _a.response)
                    ? (0, metric_logger_1.mapRespToPerfEntry)(e.axiosException.response)
                    : metric_logger_1.RUNNER_FAILURE_PERF_ENTRY);
                throw e;
            }
        });
    }
    completeRunGroupWithError(error) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (environment_1.VERBOSE_LOGGING) {
                output.note({
                    title: 'Completing with an error',
                    bodyLines: [
                        `ciExecutionId: ${this.ciExecutionId}`,
                        `ciExecutionEnv: ${this.ciExecutionEnv}`,
                        `runGroup: ${this.runGroup}`,
                        `error: ${error}`,
                    ],
                });
            }
            const recorder = (0, metric_logger_1.createMetricRecorder)('completeRunGroup');
            try {
                const resp = yield (0, axios_1.axiosMultipleTries)(() => this.apiAxiosInstance.post('/nx-cloud/executions/complete-run-group', {
                    branch: this.branch,
                    runGroup: this.runGroup,
                    ciExecutionId: this.ciExecutionId,
                    ciExecutionEnv: this.ciExecutionEnv,
                    agentName: this.agentName,
                    criticalErrorMessage: error,
                }));
                if (environment_1.VERBOSE_LOGGING) {
                    output.note({
                        title: 'Completed run group with an error',
                    });
                }
                recorder.recordMetric((0, metric_logger_1.mapRespToPerfEntry)(resp));
            }
            catch (e) {
                recorder.recordMetric(((_a = e === null || e === void 0 ? void 0 : e.axiosException) === null || _a === void 0 ? void 0 : _a.response)
                    ? (0, metric_logger_1.mapRespToPerfEntry)(e.axiosException.response)
                    : metric_logger_1.RUNNER_FAILURE_PERF_ENTRY);
                console.error(e);
            }
        });
    }
}
exports.DistributedAgentApi = DistributedAgentApi;
//# sourceMappingURL=distributed-agent.api.js.map