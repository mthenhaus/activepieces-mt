"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invokeTasksUsingNxImperativeApi = void 0;
const parser = require("yargs-parser");
const serializer_overrides_1 = require("../../../utilities/serializer-overrides");
const { initTasksRunner } = require('../../../utilities/nx-imports');
function invokeTasksUsingNxImperativeApi(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const tasksRunner = yield initTasksRunner(options);
        return (executionId, tasksToExecute, parallel) => __awaiter(this, void 0, void 0, function* () {
            const tasks = tasksToExecute.map((t) => {
                const params = parser(t.params, {
                    configuration: {
                        'camel-case-expansion': false,
                        'dot-notation': true,
                    },
                });
                const unparsed = (0, serializer_overrides_1.unparse)(params);
                if (params._.length == 0) {
                    delete params._;
                }
                return {
                    id: t.taskId,
                    target: {
                        project: t.projectName,
                        target: t.target,
                        configuration: t.configuration,
                    },
                    overrides: Object.assign(Object.assign({}, params), { __overrides_unparsed__: unparsed }),
                    projectRoot: t.projectRoot,
                };
            });
            process.env.NX_CACHE_FAILURES = 'true'; // this is only requires because of how we do uploads
            process.env.NX_CLOUD_DISTRIBUTED_EXECUTION_ID = executionId;
            process.env.NX_STREAM_OUTPUT = 'true';
            process.env.NX_PREFIX_OUTPUT = 'true';
            const r = yield tasksRunner.invoke({ tasks, parallel });
            const completedTasks = Object.values(r.taskGraph.tasks);
            return {
                completedTasks: completedTasks.map((t) => ({
                    taskId: t.id,
                    hash: t.hash,
                })),
                completedStatusCode: r.status,
            };
        });
    });
}
exports.invokeTasksUsingNxImperativeApi = invokeTasksUsingNxImperativeApi;
//# sourceMappingURL=invoke-tasks-using-nx-imperative-api.js.map