"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processTask = void 0;
const environment_1 = require("../../../utilities/environment");
const serializer_overrides_1 = require("../../../utilities/serializer-overrides");
const { output } = require('../../../utilities/nx-imports-light');
function processTask(dteArtifactStorage, tasks, completedTask) {
    return __awaiter(this, void 0, void 0, function* () {
        if (environment_1.VERBOSE_LOGGING) {
            output.note({
                title: `Processing task ${completedTask.taskId}`,
            });
        }
        const matchingTask = tasks.find((tt) => completedTask.taskId === tt.id);
        if (!matchingTask) {
            throw new Error(`Found unknown task: ${completedTask.taskId}`);
        }
        const terminalOutput = yield dteArtifactStorage.retrieveAndExtract(completedTask.hash, completedTask.url);
        output.logCommand(getCommand(matchingTask));
        process.stdout.write(terminalOutput);
        output.addVerticalSeparator();
    });
}
exports.processTask = processTask;
function getCommand(task) {
    const config = task.target.configuration
        ? `:${task.target.configuration}`
        : '';
    return [
        'nx',
        'run',
        `${task.target.project}:${task.target.target}${config}`,
        (0, serializer_overrides_1.serializeOverrides)(task),
    ].join(' ');
}
//# sourceMappingURL=process-task.js.map