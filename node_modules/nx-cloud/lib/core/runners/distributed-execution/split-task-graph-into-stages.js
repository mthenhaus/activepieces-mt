"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitTasksIntoStages = void 0;
function splitTasksIntoStages(taskGraph) {
    const stages = [];
    const notStagedTaskIds = new Set(Object.values(taskGraph.tasks).map((t) => t.id));
    let stageIndex = 0;
    // Loop through tasks and try to stage them. As tasks are staged, they are removed from the loop
    while (notStagedTaskIds.size > 0) {
        const currentStage = (stages[stageIndex] = []);
        for (const taskId of notStagedTaskIds) {
            let ready = true;
            for (const dependency of taskGraph.dependencies[taskId]) {
                if (notStagedTaskIds.has(dependency)) {
                    // dependency has not been staged yet, this task is not ready to be staged.
                    ready = false;
                    break;
                }
            }
            // Some dependency still has not been staged, skip it for now, it will be processed again
            if (!ready) {
                continue;
            }
            // All the dependencies have been staged, let's stage it.
            const task = taskGraph.tasks[taskId];
            currentStage.push(task);
        }
        // Remove the entire new stage of tasks from the list
        for (const task of currentStage) {
            notStagedTaskIds.delete(task.id);
        }
        stageIndex++;
    }
    return stages;
}
exports.splitTasksIntoStages = splitTasksIntoStages;
//# sourceMappingURL=split-task-graph-into-stages.js.map