"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processTasks = void 0;
const create_unchanged_value_timeout_1 = require("../../../utilities/create-unchanged-value-timeout");
const environment_1 = require("../../../utilities/environment");
const waiter_1 = require("../../../utilities/waiter");
const process_task_1 = require("./process-task");
const { output } = require('../../../utilities/nx-imports-light');
function processTasks(api, dteArtifactStorage, executionId, tasks) {
    return __awaiter(this, void 0, void 0, function* () {
        const processedTasks = {};
        const failIfNumberOfCompletedTasksDoesNotChangeAfterTimeout = (0, create_unchanged_value_timeout_1.createUnchangedValueTimeout)({
            title: `No new completed tasks after ${environment_1.NO_COMPLETED_TASKS_TIMEOUT / 1000} seconds.`,
            timeout: environment_1.NO_COMPLETED_TASKS_TIMEOUT,
        });
        const waiter = new waiter_1.Waiter();
        while (true) {
            if (environment_1.VERBOSE_LOGGING) {
                output.note({
                    title: 'Waiting...',
                });
            }
            yield waiter.wait();
            const r = yield api.status(executionId);
            if (environment_1.VERBOSE_LOGGING) {
                output.note({
                    title: `Status update`,
                    bodyLines: [
                        `executionId: ${executionId}`,
                        `executionStatus: ${r.executionStatus}`,
                        `number of completed tasks: ${r.completedTasks.length}`,
                        `error: ${r.criticalErrorMessage}`,
                    ],
                });
            }
            if (r.criticalErrorMessage) {
                output.error({
                    title: 'Distributed Execution Terminated',
                    bodyLines: ['Error:', r.criticalErrorMessage],
                });
                process.exit(1);
            }
            failIfNumberOfCompletedTasksDoesNotChangeAfterTimeout(r.completedTasks.length);
            for (const t of r.completedTasks) {
                if (processedTasks[t.taskId])
                    continue;
                yield (0, process_task_1.processTask)(dteArtifactStorage, tasks, t);
                waiter.reset();
                processedTasks[t.taskId] = true;
            }
            if (r.executionStatus === 'COMPLETED') {
                return { commandStatus: r.commandStatus, runUrl: r.runUrl };
            }
        }
    });
}
exports.processTasks = processTasks;
//# sourceMappingURL=process-tasks.js.map