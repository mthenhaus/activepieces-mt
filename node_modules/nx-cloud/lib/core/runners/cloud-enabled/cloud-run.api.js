"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudRunApi = void 0;
const fs_1 = require("fs");
const util_1 = require("util");
const zlib_1 = require("zlib");
const axios_1 = require("../../../utilities/axios");
const environment_1 = require("../../../utilities/environment");
const is_private_cloud_1 = require("../../../utilities/is-private-cloud");
const metric_logger_1 = require("../../../utilities/metric-logger");
const { output } = require('../../../utilities/nx-imports-light');
class CloudRunApi {
    constructor(messages, runContext, options, machineInfo) {
        this.messages = messages;
        this.runContext = runContext;
        this.machineInfo = machineInfo;
        this.apiAxiosInstance = (0, axios_1.createApiAxiosInstance)(options);
    }
    startRun(distributedExecutionId, hashes) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            // API is not working, don't make the end request
            if (this.messages.apiError)
                return {};
            const recorder = (0, metric_logger_1.createMetricRecorder)('startRun');
            try {
                const request = {
                    meta: {
                        nxCloudVersion: this.nxCloudVersion(),
                    },
                    branch: (0, environment_1.getBranch)(),
                    runGroup: (0, environment_1.getRunGroup)(),
                    ciExecutionId: (0, environment_1.getCIExecutionId)(),
                    ciExecutionEnv: (0, environment_1.getCIExecutionEnv)(),
                    distributedExecutionId,
                    hashes,
                    machineInfo: this.machineInfo,
                };
                if (environment_1.VERBOSE_LOGGING) {
                    output.note({
                        title: 'RunStart',
                        bodyLines: ['\n' + JSON.stringify(request, null, 2)],
                    });
                }
                const resp = yield (0, axios_1.printDuration)('RunStart duration', () => (0, axios_1.axiosMultipleTries)(() => this.apiAxiosInstance.post('/nx-cloud/runs/start', request)));
                recorder.recordMetric((0, metric_logger_1.mapRespToPerfEntry)(resp));
                if (resp.data && resp.data.message) {
                    this.messages.message = resp.data.message;
                }
                if (!resp.data || !resp.data.urls) {
                    this.messages.apiError = `Invalid Nx Cloud response: ${JSON.stringify(resp.data)}`;
                    return {};
                }
                return resp.data.urls;
            }
            catch (e) {
                recorder.recordMetric(((_a = e === null || e === void 0 ? void 0 : e.axiosException) === null || _a === void 0 ? void 0 : _a.response)
                    ? (0, metric_logger_1.mapRespToPerfEntry)(e.axiosException.response)
                    : metric_logger_1.RUNNER_FAILURE_PERF_ENTRY);
                this.messages.apiError = this.messages.extractErrorMessage(e, 'api');
                return {};
            }
        });
    }
    createReqBody(run, tasks, ciExecutionContext, linkId) {
        if ((0, is_private_cloud_1.isConnectedToPrivateCloud)()) {
            for (let t of tasks) {
                delete t.uploadedToStorage;
            }
        }
        const uncompressedReqBody = Object.assign(Object.assign({ meta: {
                nxCloudVersion: this.nxCloudVersion(),
            }, tasks,
            run,
            linkId }, ((0, is_private_cloud_1.isConnectedToPrivateCloud)() ? {} : ciExecutionContext)), { machineInfo: this.machineInfo });
        return JSON.stringify(uncompressedReqBody);
    }
    endRun(run, tasks, ciExecutionContext, linkId) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            // API is not working, don't make the end request
            if (this.messages.apiError)
                return false;
            let uncompressedBodyString = this.createReqBody(run, tasks, ciExecutionContext, linkId);
            // if the req body is > 20mb, remove hashDetails
            if (uncompressedBodyString.length > 20 * 1000 * 1000) {
                uncompressedBodyString = this.createReqBody(run, tasks.map((t) => (Object.assign(Object.assign({}, t), { hashDetails: undefined }))), ciExecutionContext, linkId);
            }
            const uncompressedBuffer = Buffer.from(uncompressedBodyString);
            const compressedBuffer = yield (0, util_1.promisify)(zlib_1.gzip)(uncompressedBuffer);
            const recorder = (0, metric_logger_1.createMetricRecorder)('endRun');
            try {
                if (environment_1.VERBOSE_LOGGING) {
                    const t = tasks.map((tt) => {
                        return Object.assign(Object.assign({}, tt), { terminalOutput: tt.terminalOutput
                                ? `${tt.terminalOutput.slice(0, 20)}...`
                                : undefined });
                    });
                    output.note({
                        title: 'RunEnd. Completed tasks',
                        bodyLines: ['\n' + JSON.stringify(t, null, 2)],
                    });
                }
                const resp = yield (0, axios_1.printDuration)('RunEnd duration', () => (0, axios_1.axiosMultipleTries)(() => this.apiAxiosInstance.post('/nx-cloud/runs/end', compressedBuffer, {
                    headers: Object.assign(Object.assign({}, this.apiAxiosInstance.defaults.headers), { 'Content-Encoding': 'gzip', 'Content-Type': 'application/octet-stream' }),
                })));
                if (resp) {
                    recorder.recordMetric((0, metric_logger_1.mapRespToPerfEntry)(resp));
                    if (resp.data && resp.data.runUrl && resp.data.status === 'success') {
                        this.runContext.runUrl = resp.data.runUrl;
                        return true;
                    }
                    if (resp.data && resp.data.status) {
                        this.messages.apiError = `Invalid end run response: ${JSON.stringify(resp.data.message)}`;
                    }
                    else if (resp.data && typeof resp.data === 'string') {
                        if (resp.data !== 'success') {
                            this.messages.apiError = `Invalid end run response: ${JSON.stringify(resp.data)}`;
                        }
                    }
                    else {
                        this.messages.apiError = `Invalid end run response: ${JSON.stringify(resp.data)}`;
                    }
                    if (environment_1.VERBOSE_LOGGING) {
                        output.note({
                            title: 'Invalid end run response',
                            bodyLines: [JSON.stringify(resp.data, null, 2)],
                        });
                    }
                }
                else {
                    output.error({
                        title: 'Nx Cloud: Unknown Error Occurred',
                        bodyLines: [
                            'Run completion responded with `undefined`.',
                            'Run Details:',
                            JSON.stringify(run, null, 2),
                            'Stack Trace:',
                            JSON.stringify(new Error().stack, null, 2),
                        ],
                    });
                }
                return false;
            }
            catch (ee) {
                recorder.recordMetric(((_a = ee === null || ee === void 0 ? void 0 : ee.axiosException) === null || _a === void 0 ? void 0 : _a.response)
                    ? (0, metric_logger_1.mapRespToPerfEntry)(ee.axiosException.response)
                    : metric_logger_1.RUNNER_FAILURE_PERF_ENTRY);
                const e = (_b = ee.axiosException) !== null && _b !== void 0 ? _b : ee;
                this.messages.apiError = this.messages.extractErrorMessage(e, 'api');
                return false;
            }
        });
    }
    nxCloudVersion() {
        try {
            const v = JSON.parse((0, fs_1.readFileSync)(`package.json`).toString());
            return (v.devDependencies['nx-cloud'] || v.devDependencies['@nrwl/nx-cloud']);
        }
        catch (e) {
            return 'unknown';
        }
    }
}
exports.CloudRunApi = CloudRunApi;
//# sourceMappingURL=cloud-run.api.js.map